                      (                    ROMbasic.ASM):00001 ; Extended MS BASIC with autostart ROM
                      (                    ROMbasic.ASM):00002 ;
                      (                    ROMbasic.ASM):00003 ; This is a derived work from that of Grant Searle.
                      (                    ROMbasic.ASM):00004 ; http://searle.hostei.com/grant/6809/Simple6809.html
                      (                    ROMbasic.ASM):00005 ;
                      (                    ROMbasic.ASM):00006 ; I have used Grant's 6809 Extended BASIC with very
                      (                    ROMbasic.ASM):00007 ; minimal adapations to port to hd6309 CPU or the
                      (                    ROMbasic.ASM):00008 ; SBC hardware. For now, enjoy!
                      (                    ROMbasic.ASM):00009 ;
                      (                    ROMbasic.ASM):00010 ; target toolchain: lwtools lwasm ver 4.10 
                      (                    ROMbasic.ASM):00011 ;
                      (                    ROMbasic.ASM):00012 ; tomcircuit 4/22/2014
                      (                    ROMbasic.ASM):00013 
     C012             (                    ROMbasic.ASM):00014 ZSCCAC    EQU  $C012          ; SCC channel A command
     C013             (                    ROMbasic.ASM):00015 ZSCCAD    EQU  $C013          ; SCC channel A data
     C040             (                    ROMbasic.ASM):00016 SYSCFG    EQU  $C040            ; ROM WS, ROMSEL, and RA14 select
     C050             (                    ROMbasic.ASM):00017 IOPORT    EQU  $C050          ; SD card and LED control
                      (                    ROMbasic.ASM):00018                                
     0008             (                    ROMbasic.ASM):00019 BS        EQU  8              BACKSPACE 
     000A             (                    ROMbasic.ASM):00020 LF        EQU  $A             LINEFEED
     000D             (                    ROMbasic.ASM):00021 CR        EQU  $D             ENTER KEY 
     001B             (                    ROMbasic.ASM):00022 ESC       EQU  $1B            ESCAPE CODE 
     0020             (                    ROMbasic.ASM):00023 SPACE     EQU  $20            SPACE (BLANK) 
     003A             (                    ROMbasic.ASM):00024 STKBUF    EQU  58             STACK BUFFER ROOM 
     00FA             (                    ROMbasic.ASM):00025 LBUFMX    EQU  250            MAX NUMBER OF CHARS IN A BASIC LINE 
     00FA             (                    ROMbasic.ASM):00026 MAXLIN    EQU  $FA            MAXIMUM MS BYTE OF LINE NUMBER 
                      (                    ROMbasic.ASM):00027 
                      (                    ROMbasic.ASM):00028 ; PSEUDO OPS                      
     0021             (                    ROMbasic.ASM):00029 SKP1      EQU  $21            OP CODE OF BRN — SKIP ONE BYTE 
     008C             (                    ROMbasic.ASM):00030 SKP2      EQU  $8C            OP CODE OF CMPX # - SKIP TWO BYTES 
     0086             (                    ROMbasic.ASM):00031 SKP1LD    EQU  $86            OP CODE OF LDA # - SKIP THE NEXT BYTE 
                      (                    ROMbasic.ASM):00032 ;                             AND LOAD THE VALUE OF THAT BYTE INTO ACCA — THIS 
                      (                    ROMbasic.ASM):00033 ;                             IS USUALLY USED TO LOAD ACCA WITH A NON ZERO VALUE 
     0095             (                    ROMbasic.ASM):00034 RTS_LOW   EQU  $95             
                      (                    ROMbasic.ASM):00035 
                      (                    ROMbasic.ASM):00036           ORG  0               
0000                  (                    ROMbasic.ASM):00037 ENDFLG    RMB  1              STOP/END FLAG: POSITIVE=STOP, NEG=END 
0001                  (                    ROMbasic.ASM):00038 CHARAC    RMB  1              TERMINATOR FLAG 1 
0002                  (                    ROMbasic.ASM):00039 ENDCHR    RMB  1              TERMINATOR FLAG 2 
0003                  (                    ROMbasic.ASM):00040 TMPLOC    RMB  1              SCRATCH VARIABLE 
0004                  (                    ROMbasic.ASM):00041 IFCTR     RMB  1              IF COUNTER - HOW MANY IF STATEMENTS IN A LINE 
0005                  (                    ROMbasic.ASM):00042 DIMFLG    RMB  1              *DV* ARRAY FLAG 0=EVALUATE, 1=DIMENSIONING 
0006                  (                    ROMbasic.ASM):00043 VALTYP    RMB  1              *DV* *PV TYPE FLAG: 0=NUMERIC, $FF=STRING 
0007                  (                    ROMbasic.ASM):00044 GARBFL    RMB  1              *TV STRING SPACE HOUSEKEEPING FLAG 
0008                  (                    ROMbasic.ASM):00045 ARYDIS    RMB  1              DISABLE ARRAY SEARCH: 00=ALLOW SEARCH 
0009                  (                    ROMbasic.ASM):00046 INPFLG    RMB  1              *TV INPUT FLAG: READ=0, INPUT<>0 
000A                  (                    ROMbasic.ASM):00047 RELFLG    RMB  1              *TV RELATIONAL OPERATOR FLAG 
000B                  (                    ROMbasic.ASM):00048 TEMPPT    RMB  2              *PV TEMPORARY STRING STACK POINTER 
000D                  (                    ROMbasic.ASM):00049 LASTPT    RMB  2              *PV ADDR OF LAST USED STRING STACK ADDRESS 
000F                  (                    ROMbasic.ASM):00050 TEMPTR    RMB  2              TEMPORARY POINTER 
0011                  (                    ROMbasic.ASM):00051 TMPTR1    RMB  2              TEMPORARY DESCRIPTOR STORAGE (STACK SEARCH) 
0013                  (                    ROMbasic.ASM):00052 FPA2      RMB  4              FLOATING POINT ACCUMULATOR #2 MANTISSA 
0017                  (                    ROMbasic.ASM):00053 BOTSTK    RMB  2              BOTTOM OF STACK AT LAST CHECK 
0019                  (                    ROMbasic.ASM):00054 TXTTAB    RMB  2              *PV BEGINNING OF BASIC PROGRAM 
001B                  (                    ROMbasic.ASM):00055 VARTAB    RMB  2              *PV START OF VARIABLES 
001D                  (                    ROMbasic.ASM):00056 ARYTAB    RMB  2              *PV START OF ARRAYS 
001F                  (                    ROMbasic.ASM):00057 ARYEND    RMB  2              *PV END OF ARRAYS (+1) 
0021                  (                    ROMbasic.ASM):00058 FRETOP    RMB  2              *PV START OF STRING STORAGE (TOP OF FREE RAM) 
0023                  (                    ROMbasic.ASM):00059 STRTAB    RMB  2              *PV START OF STRING VARIABLES 
0025                  (                    ROMbasic.ASM):00060 FRESPC    RMB  2              UTILITY STRING POINTER 
0027                  (                    ROMbasic.ASM):00061 MEMSIZ    RMB  2              *PV TOP OF STRING SPACE 
0029                  (                    ROMbasic.ASM):00062 OLDTXT    RMB  2              SAVED LINE NUMBER DURING A "STOP" 
002B                  (                    ROMbasic.ASM):00063 BINVAL    RMB  2              BINARY VALUE OF A CONVERTED LINE NUMBER 
002D                  (                    ROMbasic.ASM):00064 OLDPTR    RMB  2              SAVED INPUT PTR DURING A "STOP" 
002F                  (                    ROMbasic.ASM):00065 TINPTR    RMB  2              TEMPORARY INPUT POINTER STORAGE 
0031                  (                    ROMbasic.ASM):00066 DATTXT    RMB  2              *PV 'DATA' STATEMENT LINE NUMBER POINTER 
0033                  (                    ROMbasic.ASM):00067 DATPTR    RMB  2              *PV 'DATA' STATEMENT ADDRESS POINTER 
0035                  (                    ROMbasic.ASM):00068 DATTMP    RMB  2              DATA POINTER FOR 'INPUT' & 'READ' 
0037                  (                    ROMbasic.ASM):00069 VARNAM    RMB  2              *TV TEMP STORAGE FOR A VARIABLE NAME 
0039                  (                    ROMbasic.ASM):00070 VARPTR    RMB  2              *TV POINTER TO A VARIABLE DESCRIPTOR 
003B                  (                    ROMbasic.ASM):00071 VARDES    RMB  2              TEMP POINTER TO A VARIABLE DESCRIPTOR 
003D                  (                    ROMbasic.ASM):00072 RELPTR    RMB  2              POINTER TO RELATIONAL OPERATOR PROCESSING ROUTINE 
003F                  (                    ROMbasic.ASM):00073 TRELFL    RMB  1              TEMPORARY RELATIONAL OPERATOR FLAG BYTE 
                      (                    ROMbasic.ASM):00074 ; FLOATING POINT ACCUMULATORS #3,4 & 5 ARE MOSTLY                      
                      (                    ROMbasic.ASM):00075 ; USED AS SCRATCH PAD VARIABLES.                      
                      (                    ROMbasic.ASM):00076 ; FLOATING POINT ACCUMULATOR #3 :PACKED: ($40-$44)                      
0040                  (                    ROMbasic.ASM):00077 V40       RMB  1               
0041                  (                    ROMbasic.ASM):00078 V41       RMB  1               
0042                  (                    ROMbasic.ASM):00079 V42       RMB  1               
0043                  (                    ROMbasic.ASM):00080 V43       RMB  1               
0044                  (                    ROMbasic.ASM):00081 V44       RMB  1               
                      (                    ROMbasic.ASM):00082 ; FLOATING POINT ACCUMULATOR #4 :PACKED: ($45-$49)                      
0045                  (                    ROMbasic.ASM):00083 V45       RMB  1               
0046                  (                    ROMbasic.ASM):00084 V46       RMB  1               
0047                  (                    ROMbasic.ASM):00085 V47       RMB  1               
0048                  (                    ROMbasic.ASM):00086 V48       RMB  2               
                      (                    ROMbasic.ASM):00087 ; FLOATING POINT ACCUMULATOR #5 :PACKED: ($4A—$4E)                      
004A                  (                    ROMbasic.ASM):00088 V4A       RMB  1               
004B                  (                    ROMbasic.ASM):00089 V4B       RMB  2               
004D                  (                    ROMbasic.ASM):00090 V4D       RMB  2               
                      (                    ROMbasic.ASM):00091 ; FLOATING POINT ACCUMULATOR #0                      
004F                  (                    ROMbasic.ASM):00092 FP0EXP    RMB  1              *PV FLOATING POINT ACCUMULATOR #0 EXPONENT 
0050                  (                    ROMbasic.ASM):00093 FPA0      RMB  4              *PV FLOATING POINT ACCUMULATOR #0 MANTISSA 
0054                  (                    ROMbasic.ASM):00094 FP0SGN    RMB  1              *PV FLOATING POINT ACCUMULATOR #0 SIGN 
0055                  (                    ROMbasic.ASM):00095 COEFCT    RMB  1              POLYNOMIAL COEFFICIENT COUNTER 
0056                  (                    ROMbasic.ASM):00096 STRDES    RMB  5              TEMPORARY STRING DESCRIPTOR 
005B                  (                    ROMbasic.ASM):00097 FPCARY    RMB  1              FLOATING POINT CARRY BYTE 
                      (                    ROMbasic.ASM):00098 ; FLOATING POINT ACCUMULATOR #1                      
005C                  (                    ROMbasic.ASM):00099 FP1EXP    RMB  1              *PV FLOATING POINT ACCUMULATOR #1 EXPONENT 
005D                  (                    ROMbasic.ASM):00100 FPA1      RMB  4              *PV FLOATING POINT ACCUMULATOR #1 MANTISSA 
0061                  (                    ROMbasic.ASM):00101 FP1SGN    RMB  1              *PV FLOATING POINT ACCUMULATOR #1 SIGN 
0062                  (                    ROMbasic.ASM):00102 RESSGN    RMB  1              SIGN OF RESULT OF FLOATING POINT OPERATION 
0063                  (                    ROMbasic.ASM):00103 FPSBYT    RMB  1              FLOATING POINT SUB BYTE (FIFTH BYTE) 
0064                  (                    ROMbasic.ASM):00104 COEFPT    RMB  2              POLYNOMIAL COEFFICIENT POINTER 
0066                  (                    ROMbasic.ASM):00105 LSTTXT    RMB  2              CURRENT LINE POINTER DURING LIST 
0068                  (                    ROMbasic.ASM):00106 CURLIN    RMB  2              *PV CURRENT LINE # OF BASIC PROGRAM, $FFFF = DIRECT 
006A                  (                    ROMbasic.ASM):00107 DEVCFW    RMB  1              *TV TAB FIELD WIDTH 
006B                  (                    ROMbasic.ASM):00108 DEVLCF    RMB  1              *TV TAB ZONE 
006C                  (                    ROMbasic.ASM):00109 DEVPOS    RMB  1              *TV PRINT POSITION 
006D                  (                    ROMbasic.ASM):00110 DEVWID    RMB  1              *TV PRINT WIDTH 
006E                  (                    ROMbasic.ASM):00111 RSTFLG    RMB  1              *PV WARM START FLAG: $55=WARM, OTHER=COLD 
006F                  (                    ROMbasic.ASM):00112 RSTVEC    RMB  2              *PV WARM START VECTOR - JUMP ADDRESS FOR WARM START 
0071                  (                    ROMbasic.ASM):00113 TOPRAM    RMB  2              *PV TOP OF RAM 
0073                  (                    ROMbasic.ASM):00114 IKEYIM    RMB  1              *TV INKEY$ RAM IMAGE 
0074                  (                    ROMbasic.ASM):00115 ZERO      RMB  2              *PV DUMMY - THESE TWO BYTES ARE ALWAYS ZERO 
                      (                    ROMbasic.ASM):00116 ; THE FOLLOWING BYTES ARE MOVED DOWN FROM ROM                      
0076                  (                    ROMbasic.ASM):00117 LPTCFW    RMB  1              16 
0077                  (                    ROMbasic.ASM):00118 LPTLCF    RMB  1              112 
0078                  (                    ROMbasic.ASM):00119 LPTWID    RMB  1              132 
0079                  (                    ROMbasic.ASM):00120 LPTPOS    RMB  1              0 
007A                  (                    ROMbasic.ASM):00121 EXECJP    RMB  2              LB4AA 
                      (                    ROMbasic.ASM):00122                                
                      (                    ROMbasic.ASM):00123 ; THIS ROUTINE PICKS UP THE NEXT INPUT CHARACTER FROM                      
                      (                    ROMbasic.ASM):00124 ; BASIC. THE ADDRESS OF THE NEXT BASIC BYTE TO BE                      
                      (                    ROMbasic.ASM):00125 ; INTERPRETED IS STORED AT CHARAD.
                      (                    ROMbasic.ASM):00126 ;
                      (                    ROMbasic.ASM):00127 ; this gets copied to RAM from ROM around LA123
                      (                    ROMbasic.ASM):00128 ;
007C                  (                    ROMbasic.ASM):00129 GETNCH    RMB  6
0082                  (                    ROMbasic.ASM):00130 GETCCH    RMB  1
0083                  (                    ROMbasic.ASM):00131 CHARAD    RMB  5
                      (                    ROMbasic.ASM):00132                                
0088                  (                    ROMbasic.ASM):00133 VAB       RMB  1              LOW ORDER FOUR BYTES OF THE PRODUCT 
0089                  (                    ROMbasic.ASM):00134 VAC       RMB  1                 OF A FLOATING POINT MULTIPLICATION 
008A                  (                    ROMbasic.ASM):00135 VAD       RMB  1                 THESE BYTES ARE USE AS RANDOM DATA 
008B                  (                    ROMbasic.ASM):00136 VAE       RMB  1                 BY THE RND STATEMENT 
                      (                    ROMbasic.ASM):00137                                
                      (                    ROMbasic.ASM):00138 ; EXTENDED BASIC VARIABLES                      
008C                  (                    ROMbasic.ASM):00139 TRCFLG    RMB  1              *PV TRACE FLAG 0=OFF ELSE=ON 
008D                  (                    ROMbasic.ASM):00140 USRADR    RMB  2              *PV ADDRESS OF THE START OF USR VECTORS 
                      (                    ROMbasic.ASM):00141                                
                      (                    ROMbasic.ASM):00142 ; EXTENDED BASIC SCRATCH PAD VARIABLES                      
008F                  (                    ROMbasic.ASM):00143 VCF       RMB  2               
0091                  (                    ROMbasic.ASM):00144 VD1       RMB  2               
0093                  (                    ROMbasic.ASM):00145 VD3       RMB  2               
0095                  (                    ROMbasic.ASM):00146 VD5       RMB  2               
0097                  (                    ROMbasic.ASM):00147 VD7       RMB  1               
0098                  (                    ROMbasic.ASM):00148 VD8       RMB  1               
0099                  (                    ROMbasic.ASM):00149 VD9       RMB  1               
009A                  (                    ROMbasic.ASM):00150 VDA       RMB  1               
009B                  (                    ROMbasic.ASM):00151 SW3VEC    RMB  3               
009E                  (                    ROMbasic.ASM):00152 SW2VEC    RMB  3               
00A1                  (                    ROMbasic.ASM):00153 SWIVEC    RMB  3               
00A4                  (                    ROMbasic.ASM):00154 NMIVEC    RMB  3               
00A7                  (                    ROMbasic.ASM):00155 IRQVEC    RMB  3               
00AA                  (                    ROMbasic.ASM):00156 FRQVEC    RMB  3               
00AD                  (                    ROMbasic.ASM):00157 USRJMP    RMB  3              JUMP ADDRESS FOR BASIC'S USR FUNCTION 
00B0                  (                    ROMbasic.ASM):00158 RVSEED    RMB  1              * FLOATING POINT RANDOM NUMBER SEED EXPONENT 
00B1                  (                    ROMbasic.ASM):00159           RMB  4              * MANTISSA: INITIALLY SET TO $804FC75259 
                      (                    ROMbasic.ASM):00160                                
                      (                    ROMbasic.ASM):00161 ;** USR FUNCTION VECTOR ADDRESSES (EX BASIC ONLY)                      
00B5                  (                    ROMbasic.ASM):00162 USR0      RMB  2              USR 0 VECTOR 
00B7                  (                    ROMbasic.ASM):00163           RMB  2              USR 1 
00B9                  (                    ROMbasic.ASM):00164           RMB  2              USR 2 
00BB                  (                    ROMbasic.ASM):00165           RMB  2              USR 3 
00BD                  (                    ROMbasic.ASM):00166           RMB  2              USR 4 
00BF                  (                    ROMbasic.ASM):00167           RMB  2              USR 5 
00C1                  (                    ROMbasic.ASM):00168           RMB  2              USR 6 
00C3                  (                    ROMbasic.ASM):00169           RMB  2              USR 7 
00C5                  (                    ROMbasic.ASM):00170           RMB  2              USR 8 
00C7                  (                    ROMbasic.ASM):00171           RMB  2              USR 9 
                      (                    ROMbasic.ASM):00172                                
00C9                  (                    ROMbasic.ASM):00173 STRSTK    RMB  8*5            STRING DESCRIPTOR STACK 
00F1                  (                    ROMbasic.ASM):00174 LINHDR    RMB  2              LINE INPUT BUFFER HEADER 
00F3                  (                    ROMbasic.ASM):00175 LINBUF    RMB  LBUFMX+1       BASIC LINE INPUT BUFFER 
01EE                  (                    ROMbasic.ASM):00176 STRBUF    RMB  41             STRING BUFFER 
                      (                    ROMbasic.ASM):00177                                
0217                  (                    ROMbasic.ASM):00178 PROGST    RMB  1              START OF PROGRAM SPACE 
                      (                    ROMbasic.ASM):00179 
                      (                    ROMbasic.ASM):00180 ;         INTERRUPT VECTORS                 
     FFF2             (                    ROMbasic.ASM):00181 V_SWI3    EQU  $FFF2
     FFF4             (                    ROMbasic.ASM):00182 V_SWI2    EQU  $FFF4           
     FFF6             (                    ROMbasic.ASM):00183 V_FIRQ    EQU  $FFF6           
     FFF8             (                    ROMbasic.ASM):00184 V_IRQ     EQU  $FFF8           
     FFFA             (                    ROMbasic.ASM):00185 V_SWI     EQU  $FFFA           
     FFFC             (                    ROMbasic.ASM):00186 V_NMI     EQU  $FFFC           
     FFFE             (                    ROMbasic.ASM):00187 V_RESET   EQU  $FFFE           
                      (                    ROMbasic.ASM):00188                                
                      (                    ROMbasic.ASM):00189           ORG  $DB00           
                      (                    ROMbasic.ASM):00190                                
                      (                    ROMbasic.ASM):00191 ; Wait for a keystroke from the console.
DB00 8D03             (                    ROMbasic.ASM):00192 KEYWAIT   BSR  KEYIN          ; GET A CHARACTER FROM CONSOLE IN 
DB02 27FC             (                    ROMbasic.ASM):00193           BEQ  KEYWAIT        ; LOOP IF NO KEY DOWN 
DB04 39               (                    ROMbasic.ASM):00194           RTS                  
                      (                    ROMbasic.ASM):00195                                
                      (                    ROMbasic.ASM):00196 ; THIS ROUTINE GETS A KEYSTROKE FROM THE KEYBOARD IF A KEY                      
                      (                    ROMbasic.ASM):00197 ; IS DOWN. IT RETURNS ZERO TRUE IF THERE WAS NO KEY DOWN.                      
DB05 B6C012           (                    ROMbasic.ASM):00198 KEYIN     LDA  ZSCCAC         ; reset register pointer to WR0/RR0
DB08 B6C012           (                    ROMbasic.ASM):00199           LDA  ZSCCAC         ; load RR0 (status)
DB0B 8501             (                    ROMbasic.ASM):00200           BITA #1              
DB0D 2706             (                    ROMbasic.ASM):00201           BEQ  NOCHAR          
DB0F B6C013           (                    ROMbasic.ASM):00202           LDA  ZSCCAD         ; read character from SCC into A
DB12 847F             (                    ROMbasic.ASM):00203           ANDA #$7F            
DB14 39               (                    ROMbasic.ASM):00204           RTS                  
DB15 4F               (                    ROMbasic.ASM):00205 NOCHAR    CLRA                 
DB16 39               (                    ROMbasic.ASM):00206           RTS                  
                      (                    ROMbasic.ASM):00207                                
                      (                    ROMbasic.ASM):00208 ; CONSOLE OUT                      
DB17 8D24             (                    ROMbasic.ASM):00209 PUTCHR    BSR  WAITACIA        
DB19 3402             (                    ROMbasic.ASM):00210           PSHS A               
DB1B 810D             (                    ROMbasic.ASM):00211           CMPA #CR            IS IT CARRIAGE RETURN? 
DB1D 270B             (                    ROMbasic.ASM):00212           BEQ  NEWLINE        YES 
DB1F B7C013           (                    ROMbasic.ASM):00213           STA  ZSCCAD         ; put character in data register        
DB22 0C79             (                    ROMbasic.ASM):00214           INC  LPTPOS         INCREMENT CHARACTER COUNTER 
DB24 9679             (                    ROMbasic.ASM):00215           LDA  LPTPOS         CHECK FOR END OF LINE PRINTER LINE 
DB26 9178             (                    ROMbasic.ASM):00216           CMPA LPTWID         AT END OF LINE PRINTER LINE? 
DB28 2510             (                    ROMbasic.ASM):00217           BLO  PUTEND         NO 
DB2A 0F79             (                    ROMbasic.ASM):00218 NEWLINE   CLR  LPTPOS         RESET CHARACTER COUNTER 
DB2C 8D0F             (                    ROMbasic.ASM):00219           BSR  WAITACIA        
DB2E 860D             (                    ROMbasic.ASM):00220           LDA  #CR
DB30 B7C013           (                    ROMbasic.ASM):00221           STA  ZSCCAD         ; put CR in data register        
DB33 8D08             (                    ROMbasic.ASM):00222           BSR  WAITACIA        
DB35 860A             (                    ROMbasic.ASM):00223           LDA  #LF            DO LINEFEED AFTER CR 
DB37 B7C013           (                    ROMbasic.ASM):00224           STA  ZSCCAD         ; put LF in data register        
DB3A 3502             (                    ROMbasic.ASM):00225 PUTEND    PULS A               
DB3C 39               (                    ROMbasic.ASM):00226           RTS                  
                      (                    ROMbasic.ASM):00227                                
DB3D 3402             (                    ROMbasic.ASM):00228 WAITACIA  PSHS A               
DB3F B6C012           (                    ROMbasic.ASM):00229 WRWAIT    LDA  ZSCCAC         ; reset register pointer to WR0/RR0
DB42 B6C012           (                    ROMbasic.ASM):00230           LDA  ZSCCAC         ; load RR0 (status)
DB45 8504             (                    ROMbasic.ASM):00231           BITA #4              
DB47 27F6             (                    ROMbasic.ASM):00232           BEQ  WRWAIT          
DB49 3502             (                    ROMbasic.ASM):00233           PULS A               
DB4B 39               (                    ROMbasic.ASM):00234           RTS                  
                      (                    ROMbasic.ASM):00235                               
                      (                    ROMbasic.ASM):00236 RESVEC:
DB4C 10CE01EE         (                    ROMbasic.ASM):00237 LA00E     LDS  #LINBUF+LBUFMX+1 SET STACK TO TOP OF LINE INPUT BUFFER
DB50 8610             (                    ROMbasic.ASM):00238           LDA  #%00010000     ; turn off LED1 and LED2, disable SD card
DB52 B7C050           (                    ROMbasic.ASM):00239           STA  IOPORT
DB55 8602             (                    ROMbasic.ASM):00240                 LDA     #%00000010      ; make ROM 0WS, select ROM, set RA14 low
DB57 B7C040           (                    ROMbasic.ASM):00241                 STA     SYSCFG
DB5A BDFEFF           (                    ROMbasic.ASM):00242           JSR  SCCA_INIT      ;initialize SCC channel A
DB5D 966E             (                    ROMbasic.ASM):00243           LDA  RSTFLG         GET WARM START FLAG 
DB5F 8155             (                    ROMbasic.ASM):00244           CMPA #$55           IS IT A WARM START? 
DB61 260A             (                    ROMbasic.ASM):00245           BNE  BACDST         NO - D0 A COLD START          
DB63 9E6F             (                    ROMbasic.ASM):00246           LDX  RSTVEC         WARM START VECTOR 
DB65 A684             (                    ROMbasic.ASM):00247           LDA  ,X             GET FIRST BYTE OF WARM START ADDR 
DB67 8112             (                    ROMbasic.ASM):00248           CMPA #$12           IS IT NOP? 
DB69 2602             (                    ROMbasic.ASM):00249           BNE  BACDST         NO - DO A COLD START 
DB6B 6E84             (                    ROMbasic.ASM):00250           JMP  ,X             YES, G0 THERE 
                      (                    ROMbasic.ASM):00251                 
                      (                    ROMbasic.ASM):00252 ;;;;;;;;;;;;;;;;;;;;;;;;;;
                      (                    ROMbasic.ASM):00253 ; COLD START ENTRY
                      (                    ROMbasic.ASM):00254 ;;;;;;;;;;;;;;;;;;;;;;;;;;
DB6D 8613             (                    ROMbasic.ASM):00255 BACDST    LDA  #%00010011     ; turn ON LED1 and LED2
DB6F B7C050           (                    ROMbasic.ASM):00256           STA  IOPORT
DB72 8E0218           (                    ROMbasic.ASM):00257           LDX  #PROGST+1      POINT X TO CLEAR 1ST 1K OF RAM 
DB75 6F83             (                    ROMbasic.ASM):00258 LA077     CLR  ,--X           MOVE POINTER DOWN TWO-CLEAR BYTE 
DB77 3001             (                    ROMbasic.ASM):00259           LEAX 1,X            ADVANCE POINTER ONE 
DB79 26FA             (                    ROMbasic.ASM):00260           BNE  LA077          KEEP GOING IF NOT AT BOTTOM OF PAGE 0 
DB7B 8E0217           (                    ROMbasic.ASM):00261           LDX  #PROGST        SET TO START OF PROGRAM SPACE 
DB7E 6F80             (                    ROMbasic.ASM):00262           CLR  ,X+            CLEAR 1ST BYTE OF BASIC PROGRAM 
DB80 9F19             (                    ROMbasic.ASM):00263           STX  TXTTAB         BEGINNING OF BASIC PROGRAM 
DB82 A602             (                    ROMbasic.ASM):00264 LA084     LDA  2,X            LOOK FOR END OF MEMORY 
DB84 43               (                    ROMbasic.ASM):00265           COMA                * COMPLEMENT IT AND PUT IT BACK 
DB85 A702             (                    ROMbasic.ASM):00266           STA  2,X            * INTO SYSTEM MEMORY 
DB87 A102             (                    ROMbasic.ASM):00267           CMPA 2,X            IS IT RAM? 
DB89 2606             (                    ROMbasic.ASM):00268           BNE  LA093          BRANCH IF NOT (ROM, BAD RAM OR NO RAM) 
DB8B 3001             (                    ROMbasic.ASM):00269           LEAX 1,X            MOVE POINTER UP ONE 
DB8D 6301             (                    ROMbasic.ASM):00270           COM  1,X            RE-COMPLEMENT TO RESTORE BYTE 
DB8F 20F1             (                    ROMbasic.ASM):00271           BRA  LA084          KEEP LOOKING FOR END OF RAM 
DB91 9F71             (                    ROMbasic.ASM):00272 LA093     STX  TOPRAM         SAVE ABSOLUTE TOP OF RAM 
DB93 9F27             (                    ROMbasic.ASM):00273           STX  MEMSIZ         SAVE TOP OF STRING SPACE 
DB95 9F23             (                    ROMbasic.ASM):00274           STX  STRTAB         SAVE START OF STRING VARIABLES 
DB97 3089FF38         (                    ROMbasic.ASM):00275           LEAX -200,X         CLEAR 200 - DEFAULT STRING SPACE TO 200 BYTES 
DB9B 9F21             (                    ROMbasic.ASM):00276           STX  FRETOP         SAVE START OF STRING SPACE 
DB9D 1F14             (                    ROMbasic.ASM):00277           TFR  X,S            PUT STACK THERE 
DB9F 8EDBF5           (                    ROMbasic.ASM):00278           LDX  #LA10D         POINT X TO ROM SOURCE DATA 
DBA2 CE0076           (                    ROMbasic.ASM):00279           LDU  #LPTCFW        POINT U TO RAM DESTINATION 
DBA5 C612             (                    ROMbasic.ASM):00280           LDB  #18            MOVE 18 BYTES 
DBA7 BDDCD6           (                    ROMbasic.ASM):00281           JSR  LA59A          MOVE 18 BYTES FROM ROM TO RAM 
DBAA CE00A7           (                    ROMbasic.ASM):00282           LDU  #IRQVEC        POINT U TO NEXT RAM DESTINATION 
DBAD C604             (                    ROMbasic.ASM):00283           LDB  #4             MOVE 4 MORE BYTES 
DBAF BDDCD6           (                    ROMbasic.ASM):00284           JSR  LA59A          MOVE 4 BYTES FROM ROM TO RAM 
DBB2 8639             (                    ROMbasic.ASM):00285           LDA  #$39            
DBB4 97F0             (                    ROMbasic.ASM):00286           STA  LINHDR-1       PUT RTS IN LINHDR-1 
DBB6 BDDFE2           (                    ROMbasic.ASM):00287           JSR  LAD19          G0 DO A ‘NEW’ 
                      (                    ROMbasic.ASM):00288 ; EXTENDED BASIC INITIALISATION                      
DBB9 8E00B5           (                    ROMbasic.ASM):00289           LDX  #USR0          INITIALIZE ADDRESS OF START OF 
DBBC 9F8D             (                    ROMbasic.ASM):00290           STX  USRADR         USR JUMP TABLE 
                      (                    ROMbasic.ASM):00291 ; INITIALIZE THE USR CALLS TO ‘FC ERROR’                      
DBBE CEE6F6           (                    ROMbasic.ASM):00292           LDU  #LB44A         ADDRESS OF ‘FC ERROR’ ROUTINE 
DBC1 C60A             (                    ROMbasic.ASM):00293           LDB  #10            10 USR CALLS IN EX BASIC 
DBC3 EF81             (                    ROMbasic.ASM):00294 L8031     STU  ,X++           STORE ‘FC’ ERROR AT USR ADDRESSES 
DBC5 5A               (                    ROMbasic.ASM):00295           DECB                FINISHED ALL 10? 
DBC6 26FB             (                    ROMbasic.ASM):00296           BNE  L8031          NO 
                      (                    ROMbasic.ASM):00297                 
                      (                    ROMbasic.ASM):00298 ; HD6309 SBC can be USB powered, which means that
                      (                    ROMbasic.ASM):00299 ; power is applied before USB bridge enumerates.
                      (                    ROMbasic.ASM):00300 ; Therefore, to ensure that communications are
                      (                    ROMbasic.ASM):00301 ; established, wait for TWO characters to come in 
                      (                    ROMbasic.ASM):00302 ; from the SCC. This ensures that the copyright 
                      (                    ROMbasic.ASM):00303 ; banner is visible, also.
DBC8 BDDB05           (                    ROMbasic.ASM):00304 L8032     JSR  KEYIN
DBCB 27FB             (                    ROMbasic.ASM):00305           BEQ  L8032
DBCD 8612             (                    ROMbasic.ASM):00306           LDA  #%00010010     ; turn OFF LED1
DBCF B7C050           (                    ROMbasic.ASM):00307           STA  IOPORT           
DBD2 BDDB05           (                    ROMbasic.ASM):00308 L8033     JSR  KEYIN
DBD5 27FB             (                    ROMbasic.ASM):00309           BEQ  L8033
DBD7 8610             (                    ROMbasic.ASM):00310           LDA  #%00010000     ; turn OFF LED2
DBD9 B7C050           (                    ROMbasic.ASM):00311           STA  IOPORT           
                      (                    ROMbasic.ASM):00312 ; OUTPUT THE WELCOME BANNER AT COLDSTART
DBDC 8EDC2A           (                    ROMbasic.ASM):00313           LDX  #LA147-1       POINT X TO COLOR BASIC COPYRIGHT MESSAGE 
DBDF BDEC0D           (                    ROMbasic.ASM):00314           JSR  LB99C          PRINT ‘COLOR BASIC’ 
DBE2 8EDBED           (                    ROMbasic.ASM):00315           LDX  #BAWMST        WARM START ADDRESS 
DBE5 9F6F             (                    ROMbasic.ASM):00316           STX  RSTVEC         SAVE IT 
DBE7 8655             (                    ROMbasic.ASM):00317           LDA  #$55           WARM START FLAG 
DBE9 976E             (                    ROMbasic.ASM):00318           STA  RSTFLG         SAVE IT 
DBEB 2004             (                    ROMbasic.ASM):00319           BRA  LA0F3          GO TO BASIC’S MAIN LOOP 
                      (                    ROMbasic.ASM):00320                 
                      (                    ROMbasic.ASM):00321 ;;;;;;;;;;;;;;;;;;;;;;;;;;                               
                      (                    ROMbasic.ASM):00322 ; WARM START ENTRY
                      (                    ROMbasic.ASM):00323 ;;;;;;;;;;;;;;;;;;;;;;;;;;                               
DBED 12               (                    ROMbasic.ASM):00324 BAWMST    NOP                 NOP REQ’D FOR WARM START  
DBEE BDDFFC           (                    ROMbasic.ASM):00325           JSR  LAD33          DO PART OF A NEW 
DBF1 7EDF4A           (                    ROMbasic.ASM):00326 LA0F3     JMP  LAC73          GO TO MAIN LOOP OF BASIC 
                      (                    ROMbasic.ASM):00327 ;                              
                      (                    ROMbasic.ASM):00328 ; FIRQ SERVICE ROUTINE                      
                      (                    ROMbasic.ASM):00329 BFRQSV                         
DBF4 3B               (                    ROMbasic.ASM):00330           RTI                  
                      (                    ROMbasic.ASM):00331 ;                              
                      (                    ROMbasic.ASM):00332 ; THESE BYTES ARE MOVED TO ADDRESSES $76 - $85 THE DIRECT PAGE                      
DBF5 10               (                    ROMbasic.ASM):00333 LA10D     FCB  16             TAB FIELD WIDTH 
DBF6 40               (                    ROMbasic.ASM):00334           FCB  64             LAST TAB ZONE 
DBF7 50               (                    ROMbasic.ASM):00335           FCB  80             PRINTER WIDTH 
DBF8 00               (                    ROMbasic.ASM):00336           FCB  0              LINE PRINTER POSITION 
DBF9 E6F6             (                    ROMbasic.ASM):00337           FDB  LB44A          ARGUMENT OF EXEC COMMAND - SET TO ‘FC’ ERROR 
                      (                    ROMbasic.ASM):00338 ; LINE INPUT ROUTINE                      
DBFB 0C84             (                    ROMbasic.ASM):00339           INC  CHARAD+1        
DBFD 2602             (                    ROMbasic.ASM):00340           BNE  LA123           
DBFF 0C83             (                    ROMbasic.ASM):00341           INC  CHARAD          
DC01 B60000           (                    ROMbasic.ASM):00342 LA123     LDA  >0000           
DC04 7EDCE7           (                    ROMbasic.ASM):00343           JMP  BROMHK          
                      (                    ROMbasic.ASM):00344 ;                              
                      (                    ROMbasic.ASM):00345 ; THESE BYTES ARE MOVED TO ADDRESSES $A7-$B1                      
DC07 7EDCE6           (                    ROMbasic.ASM):00346           JMP  BIRQSV         IRQ SERVICE 
DC0A 7EDBF4           (                    ROMbasic.ASM):00347           JMP  BFRQSV         FIRQ SERVICE 
DC0D 7EE6F6           (                    ROMbasic.ASM):00348           JMP  LB44A          USR ADDRESS FOR 8K BASIC (INITIALIZED TO ‘FC’ ERROR) 
DC10 80               (                    ROMbasic.ASM):00349           FCB  $80            *RANDOM SEED 
DC11 4FC7             (                    ROMbasic.ASM):00350           FDB  $4FC7          *RANDON SEED OF MANTISSA 
DC13 5259             (                    ROMbasic.ASM):00351           FDB  $5259          *.811635157 
                      (                    ROMbasic.ASM):00352 ; BASIC COMMAND INTERPRETATION TABLE ROM IMAGE                      
DC15 32               (                    ROMbasic.ASM):00353 COMVEC    FCB  50             50 BASIC COMMANDS 
DC16 DD45             (                    ROMbasic.ASM):00354           FDB  LAA66          POINTS TO RESERVED WORDS 
DC18 DE52             (                    ROMbasic.ASM):00355           FDB  LAB67          POINTS TO JUMP TABLE FOR COMMANDS 
DC1A 1D               (                    ROMbasic.ASM):00356           FCB  29             29 BASIC SECONDARY COMMANDS 
DC1B DDE5             (                    ROMbasic.ASM):00357           FDB  LAB1A          POINTS TO SECONDARY FUNCTION RESERVED WORDS 
DC1D DCF6             (                    ROMbasic.ASM):00358           FDB  LAA29          POINTS TO SECONDARY FUNCTION JUMP TABLE 
DC1F 0000             (                    ROMbasic.ASM):00359           FDB  0              NO MORE TABLES (RES WORDS=0) 
DC21 0000             (                    ROMbasic.ASM):00360           FDB  0              NO MORE TABLES 
DC23 0000             (                    ROMbasic.ASM):00361           FDB  0              NO MORE TABLES 
DC25 0000             (                    ROMbasic.ASM):00362           FDB  0              NO MORE TABLES 
DC27 0000             (                    ROMbasic.ASM):00363           FDB  0              NO MORE TABLES 
DC29 0000             (                    ROMbasic.ASM):00364           FDB  0              NO MORE TABLES (SECONDARY FNS =0) 
                      (                    ROMbasic.ASM):00365                                
                      (                    ROMbasic.ASM):00366 ; COPYRIGHT MESSAGES                      
DC2B 0D               (                    ROMbasic.ASM):00367 LA147     FCB  CR
DC2C 3638303920455854 (                    ROMbasic.ASM):00368           FCC  "6809 EXTENDED BASIC"  
     454E444544204241
     534943
DC3F 0D               (                    ROMbasic.ASM):00369           FCB  CR              
DC40 2843292031393832 (                    ROMbasic.ASM):00370           FCC  "(C) 1982 BY MICROSOFT"  
     204259204D494352
     4F534F4654
DC55 0D0D             (                    ROMbasic.ASM):00371 LA156     FCB  CR,CR           
DC57 00               (                    ROMbasic.ASM):00372 LA165     FCB  $00             
                      (                    ROMbasic.ASM):00373                                
DC58 3416             (                    ROMbasic.ASM):00374 LA35F     PSHS X,B,A          SAVE REGISTERS 
DC5A 9E76             (                    ROMbasic.ASM):00375           LDX  LPTCFW         TAB FIELD WIDTH AND TAB ZONE 
DC5C DC78             (                    ROMbasic.ASM):00376           LDD  LPTWID         PRINTER WIDTH AND POSITION 
DC5E 9F6A             (                    ROMbasic.ASM):00377 LA37C     STX  DEVCFW         SAVE TAB FIELD WIDTH AND ZONE 
DC60 D76C             (                    ROMbasic.ASM):00378           STB  DEVPOS         SAVE PRINT POSITION 
DC62 976D             (                    ROMbasic.ASM):00379           STA  DEVWID         SAVE PRINT WIDTH 
DC64 3596             (                    ROMbasic.ASM):00380           PULS A,B,X,PC       RESTORE REGISTERS 
                      (                    ROMbasic.ASM):00381                                
                      (                    ROMbasic.ASM):00382 ; THIS IS THE ROUTINE THAT GETS AN INPUT LINE FOR BASIC                      
                      (                    ROMbasic.ASM):00383 ; EXIT WITH BREAK KEY: CARRY = 1                      
                      (                    ROMbasic.ASM):00384 ; EXIT WITH ENTER KEY: CARRY = 0                      
                      (                    ROMbasic.ASM):00385 LA38D                          
DC66 0F73             (                    ROMbasic.ASM):00386 LA390     CLR  IKEYIM         RESET BREAK CHECK KEY TEMP KEY STORAGE 
DC68 8E00F4           (                    ROMbasic.ASM):00387           LDX  #LINBUF+1      INPUT LINE BUFFER 
DC6B C601             (                    ROMbasic.ASM):00388           LDB  #1             ACCB CHAR COUNTER: SET TO 1 TO ALLOW A 
                      (                    ROMbasic.ASM):00389                                                 ;  BACKSPACE AS FIRST CHARACTER  
DC6D BDDB00           (                    ROMbasic.ASM):00390 LA39A     JSR  KEYWAIT        GO GET A CHARACTER FROM CONSOLE IN 
DC70 8108             (                    ROMbasic.ASM):00391           CMPA #BS            BACKSPACE 
DC72 2607             (                    ROMbasic.ASM):00392           BNE  LA3B4          NO 
DC74 5A               (                    ROMbasic.ASM):00393           DECB                YES - DECREMENT CHAR COUNTER 
DC75 27EF             (                    ROMbasic.ASM):00394           BEQ  LA390          BRANCH IF BACK AT START OF LINE AGAIN 
DC77 301F             (                    ROMbasic.ASM):00395           LEAX -1,X           DECREMENT BUFFER POINTER 
DC79 2034             (                    ROMbasic.ASM):00396           BRA  LA3E8          ECHO CHAR TO SCREEN 
DC7B 8115             (                    ROMbasic.ASM):00397 LA3B4     CMPA #$15           SHIFT RIGHT ARROW? 
DC7D 260A             (                    ROMbasic.ASM):00398           BNE  LA3C2          NO 
                      (                    ROMbasic.ASM):00399 ; YES, RESET BUFFER TO BEGINNING AND ERASE CURRENT LINE                      
DC7F 5A               (                    ROMbasic.ASM):00400 LA3B8     DECB                DEC CHAR CTR 
DC80 27E4             (                    ROMbasic.ASM):00401           BEQ  LA390          GO BACK TO START IF CHAR CTR = 0 
DC82 8608             (                    ROMbasic.ASM):00402           LDA  #BS            BACKSPACE? 
DC84 BDDB17           (                    ROMbasic.ASM):00403           JSR  PUTCHR         SEND TO CONSOLE OUT (SCREEN) 
DC87 20F6             (                    ROMbasic.ASM):00404           BRA  LA3B8          KEEP GOING 
DC89 8103             (                    ROMbasic.ASM):00405 LA3C2     CMPA #3             BREAK KEY? 
DC8B 1A01             (                    ROMbasic.ASM):00406           ORCC #1             SET CARRY FLAG 
DC8D 2705             (                    ROMbasic.ASM):00407           BEQ  LA3CD          BRANCH IF BREAK KEY DOWN 
DC8F 810D             (                    ROMbasic.ASM):00408 LA3C8     CMPA #CR            ENTER KEY? 
DC91 260D             (                    ROMbasic.ASM):00409           BNE  LA3D9          NO 
DC93 4F               (                    ROMbasic.ASM):00410 LA3CC     CLRA                CLEAR CARRY FLAG IF ENTER KEY - END LINE ENTRY 
DC94 3401             (                    ROMbasic.ASM):00411 LA3CD     PSHS CC             SAVE CARRY FLAG 
DC96 BDEBCD           (                    ROMbasic.ASM):00412           JSR  LB958          SEND CR TO SCREEN 
DC99 6F84             (                    ROMbasic.ASM):00413           CLR  ,X             MAKE LAST BYTE IN INPUT BUFFER = 0 
DC9B 8E00F3           (                    ROMbasic.ASM):00414           LDX  #LINBUF        RESET INPUT BUFFER POINTER 
DC9E 3581             (                    ROMbasic.ASM):00415           PULS CC,PC          RESTORE CARRY FLAG 
                      (                    ROMbasic.ASM):00416                                
                      (                    ROMbasic.ASM):00417 ; INSERT A CHARACTER INTO THE BASIC LINE INPUT BUFFER                      
DCA0 8120             (                    ROMbasic.ASM):00418 LA3D9     CMPA #$20           IS IT CONTROL CHAR? 
DCA2 25C9             (                    ROMbasic.ASM):00419           BLO  LA39A          BRANCH IF CONTROL CHARACTER 
DCA4 817B             (                    ROMbasic.ASM):00420           CMPA #'z+1          * 
DCA6 24C5             (                    ROMbasic.ASM):00421           BCC  LA39A          * IGNORE IF > LOWER CASE Z 
DCA8 C1FA             (                    ROMbasic.ASM):00422           CMPB #LBUFMX        HAVE 250 OR MORE CHARACTERS BEEN ENTERED? 
DCAA 24C1             (                    ROMbasic.ASM):00423           BCC  LA39A          YES, IGNORE ANY MORE 
DCAC A780             (                    ROMbasic.ASM):00424           STA  ,X+            PUT IT IN INPUT BUFFER 
DCAE 5C               (                    ROMbasic.ASM):00425           INCB                INCREMENT CHARACTER COUNTER 
DCAF BDDB17           (                    ROMbasic.ASM):00426 LA3E8     JSR  PUTCHR         ECHO IT TO SCREEN 
DCB2 20B9             (                    ROMbasic.ASM):00427           BRA  LA39A          GO SET SOME MORE 
                      (                    ROMbasic.ASM):00428                                
                      (                    ROMbasic.ASM):00429                                
                      (                    ROMbasic.ASM):00430 ; EXEC                         
DCB4 2705             (                    ROMbasic.ASM):00431 EXEC      BEQ  LA545          BRANCH IF NO ARGUMENT 
DCB6 BDE9E9           (                    ROMbasic.ASM):00432           JSR  LB73D          EVALUATE ARGUMENT - ARGUMENT RETURNED IN X 
DCB9 9F7A             (                    ROMbasic.ASM):00433           STX  EXECJP         STORE X TO EXEC JUMP ADDRESS 
DCBB 6E9F007A         (                    ROMbasic.ASM):00434 LA545     JMP  [EXECJP]       GO DO IT 
                      (                    ROMbasic.ASM):00435                                
                      (                    ROMbasic.ASM):00436 ; BREAK CHECK                      
DCBF 7EE0CB           (                    ROMbasic.ASM):00437 LA549     JMP  LADEB          GO DO BREAK KEY CHECK 
                      (                    ROMbasic.ASM):00438                                
                      (                    ROMbasic.ASM):00439 ; INKEY$                       
DCC2 9673             (                    ROMbasic.ASM):00440 INKEY     LDA  IKEYIM         WAS A KEY DOWN IN THE BREAK CHECK? 
DCC4 2603             (                    ROMbasic.ASM):00441           BNE  LA56B          YES 
DCC6 BDDB05           (                    ROMbasic.ASM):00442           JSR  KEYIN          GO GET A KEY 
DCC9 0F73             (                    ROMbasic.ASM):00443 LA56B     CLR  IKEYIM         CLEAR INKEY RAM IMAGE 
DCCB 9753             (                    ROMbasic.ASM):00444           STA  FPA0+3         STORE THE KEY IN FPA0 
DCCD 10260C6A         (                    ROMbasic.ASM):00445           LBNE LB68F          CONVERT FPA0+3 TO A STRING 
DCD1 9756             (                    ROMbasic.ASM):00446           STA  STRDES         SET LENGTH OF STRING = 0 IF NO KEY DOWN 
DCD3 7EE947           (                    ROMbasic.ASM):00447           JMP  LB69B          PUT A NULL STRING ONTO THE STRING STACK 
                      (                    ROMbasic.ASM):00448                                
                      (                    ROMbasic.ASM):00449 ; MOVE ACCB BYTES FROM (X) TO (U)                      
DCD6 A680             (                    ROMbasic.ASM):00450 LA59A     LDA  ,X+            GET BYTE FROM X 
DCD8 A7C0             (                    ROMbasic.ASM):00451           STA  ,U+            STORE IT AT U 
DCDA 5A               (                    ROMbasic.ASM):00452           DECB                MOVED ALL BYTES? 
DCDB 26F9             (                    ROMbasic.ASM):00453           BNE  LA59A          NO 
DCDD 39               (                    ROMbasic.ASM):00454 LA5A1     RTS                  
                      (                    ROMbasic.ASM):00455                                
DCDE 39               (                    ROMbasic.ASM):00456 LA5C4     RTS                  
                      (                    ROMbasic.ASM):00457                                
                      (                    ROMbasic.ASM):00458 ; THIS ROUTINE WILL SCAN OFF THE FILE NAME FROM A BASIC LINE                      
                      (                    ROMbasic.ASM):00459 ; AND RETURN A SYNTAX ERROR IF THERE ARE ANY CHARACTERS                      
                      (                    ROMbasic.ASM):00460 ; FOLLOWING THE END OF THE NAME                      
DCDF 9D82             (                    ROMbasic.ASM):00461 LA5C7     JSR  GETCCH         GET CURRENT INPUT CHAR FROM BASIC LINE 
DCE1 27FB             (                    ROMbasic.ASM):00462 LA5C9     BEQ  LA5C4          RETURN IF END OF LINE 
DCE3 7EE528           (                    ROMbasic.ASM):00463           JMP  LB277          SYNTAX ERROR IF ANY MORE CHARACTERS 
                      (                    ROMbasic.ASM):00464 ; IRQ SERVICE                      
                      (                    ROMbasic.ASM):00465 BIRQSV                         
DCE6 3B               (                    ROMbasic.ASM):00466 LA9C5     RTI  RETURN FROM INTERRUPT  
                      (                    ROMbasic.ASM):00467                                
                      (                    ROMbasic.ASM):00468 ; SET CARRY IF NUMERIC - RETURN WITH                      
                      (                    ROMbasic.ASM):00469 ; ZERO FLAG SET IF ACCA = 0 OR 3A(:) - END                      
                      (                    ROMbasic.ASM):00470 ; OF BASIC LINE OR SUB LINE                      
DCE7 813A             (                    ROMbasic.ASM):00471 BROMHK    CMPA #'9+1          IS THIS CHARACTER >=(ASCII 9)+1? 
DCE9 240A             (                    ROMbasic.ASM):00472           BHS  LAA28          BRANCH IF > 9; Z SET IF = COLON 
DCEB 8120             (                    ROMbasic.ASM):00473           CMPA #SPACE         SPACE? 
DCED 2602             (                    ROMbasic.ASM):00474           BNE  LAA24          NO - SET CARRY IF NUMERIC 
DCEF 0E7C             (                    ROMbasic.ASM):00475           JMP  GETNCH         IF SPACE, GET NECT CHAR (IGNORE SPACES) 
DCF1 8030             (                    ROMbasic.ASM):00476 LAA24     SUBA #'0            * SET CARRY IF 
DCF3 80D0             (                    ROMbasic.ASM):00477           SUBA #-'0           * CHARACTER > ASCII 0 
DCF5 39               (                    ROMbasic.ASM):00478 LAA28     RTS                  
                      (                    ROMbasic.ASM):00479                                
                      (                    ROMbasic.ASM):00480 ; DISPATCH TABLE FOR SECONDARY FUNCTIONS                      
                      (                    ROMbasic.ASM):00481 ; TOKENS ARE PRECEEDED BY $FF                      
                      (                    ROMbasic.ASM):00482 ; FIRST SET ALWAYS HAS ONE PARAMETER                      
                      (                    ROMbasic.ASM):00483 FUNC_TAB                       
DCF6 EEEB             (                    ROMbasic.ASM):00484 LAA29     FDB  SGN            SGN 
DCF8 EF5F             (                    ROMbasic.ASM):00485           FDB  INT            INT 
DCFA EF04             (                    ROMbasic.ASM):00486           FDB  ABS            ABS 
DCFC 00AD             (                    ROMbasic.ASM):00487           FDB  USRJMP         USR 
     0083             (                    ROMbasic.ASM):00488 TOK_USR   EQU  (*-FUNC_TAB)/2+$7F     
     FF83             (                    ROMbasic.ASM):00489 TOK_FF_USR EQU  (*-FUNC_TAB)/2+$FF7F    
DCFE F190             (                    ROMbasic.ASM):00490           FDB  RND            RND 
DD00 F1E5             (                    ROMbasic.ASM):00491           FDB  SIN            SIN 
DD02 E9FC             (                    ROMbasic.ASM):00492           FDB  PEEK           PEEK 
DD04 E92D             (                    ROMbasic.ASM):00493           FDB  LEN            LEN 
DD06 E7A9             (                    ROMbasic.ASM):00494           FDB  STR            STR$ 
DD08 E9C2             (                    ROMbasic.ASM):00495           FDB  VAL            VAL 
DD0A E94C             (                    ROMbasic.ASM):00496           FDB  ASC            ASC 
DD0C E938             (                    ROMbasic.ASM):00497           FDB  CHR            CHR$ 
DD0E F295             (                    ROMbasic.ASM):00498           FDB  ATN            ATN 
DD10 F25D             (                    ROMbasic.ASM):00499           FDB  COS            COS 
DD12 F266             (                    ROMbasic.ASM):00500           FDB  TAN            TAN 
DD14 F3D7             (                    ROMbasic.ASM):00501           FDB  EXP            EXP 
DD16 F409             (                    ROMbasic.ASM):00502           FDB  FIX            FIX 
DD18 F32B             (                    ROMbasic.ASM):00503           FDB  LOG            LOG 
DD1A F591             (                    ROMbasic.ASM):00504           FDB  POS            POS 
DD1C F365             (                    ROMbasic.ASM):00505           FDB  SQR            SQR 
DD1E FA63             (                    ROMbasic.ASM):00506           FDB  HEXDOL         HEX$ 
                      (                    ROMbasic.ASM):00507 ; LEFT, RIGHT AND MID ARE TREATED SEPARATELY                      
DD20 E957             (                    ROMbasic.ASM):00508           FDB  LEFT           LEFT$ 
     0095             (                    ROMbasic.ASM):00509 TOK_LEFT  EQU  (*-FUNC_TAB)/2+$7F    
DD22 E974             (                    ROMbasic.ASM):00510           FDB  RIGHT          RIGHT$ 
DD24 E97B             (                    ROMbasic.ASM):00511           FDB  MID            MID$ 
     0097             (                    ROMbasic.ASM):00512 TOK_MID   EQU  (*-FUNC_TAB)/2+$7F
                      (                    ROMbasic.ASM):00513 ; REMAINING FUNCTIONS                      
DD26 DCC2             (                    ROMbasic.ASM):00514           FDB  INKEY          INKEY$ 
     0098             (                    ROMbasic.ASM):00515 TOK_INKEY EQU  (*-FUNC_TAB)/2+$7F
DD28 E79A             (                    ROMbasic.ASM):00516           FDB  MEM            MEM 
DD2A F599             (                    ROMbasic.ASM):00517           FDB  VARPT          VARPTR 
DD2C F659             (                    ROMbasic.ASM):00518           FDB  INSTR          INSTR 
DD2E F629             (                    ROMbasic.ASM):00519           FDB  STRING         STRING$ 
     001D             (                    ROMbasic.ASM):00520 NUM_SEC_FNS EQU  (*-FUNC_TAB)/2 
                      (                    ROMbasic.ASM):00521                                
                      (                    ROMbasic.ASM):00522 ; THIS TABLE CONTAINS PRECEDENCES AND DISPATCH ADDRESSES FOR ARITHMETIC                      
                      (                    ROMbasic.ASM):00523 ; AND LOGICAL OPERATORS - THE NEGATION OPERATORS DO NOT ACT ON TWO OPERANDS                      
                      (                    ROMbasic.ASM):00524 ; S0 THEY ARE NOT LISTED IN THIS TABLE. THEY ARE TREATED SEPARATELY IN THE                      
                      (                    ROMbasic.ASM):00525 ; EXPRESSION EVALUATION ROUTINE. THEY ARE:                      
                      (                    ROMbasic.ASM):00526 ; UNARY NEGATION (-), PRECEDENCE &7D AND LOGICAL NEGATION (NOT), PRECEDENCE $5A                      
                      (                    ROMbasic.ASM):00527 ; THE RELATIONAL OPERATORS < > = ARE ALSO NOT LISTED, PRECEDENCE $64.                      
                      (                    ROMbasic.ASM):00528 ; A PRECEDENCE VALUE OF ZERO INDICATES END OF EXPRESSION OR PARENTHESES                      
                      (                    ROMbasic.ASM):00529 ;                              
DD30 79               (                    ROMbasic.ASM):00530 LAA51     FCB  $79             
DD31 EC36             (                    ROMbasic.ASM):00531           FDB  LB9C5          + 
DD33 79               (                    ROMbasic.ASM):00532           FCB  $79             
DD34 EC2D             (                    ROMbasic.ASM):00533           FDB  LB9BC          - 
DD36 7B               (                    ROMbasic.ASM):00534           FCB  $7B             
DD37 ED3D             (                    ROMbasic.ASM):00535           FDB  LBACC          * 
DD39 7B               (                    ROMbasic.ASM):00536           FCB  $7B             
DD3A EE02             (                    ROMbasic.ASM):00537           FDB  LBB91          / 
DD3C 7F               (                    ROMbasic.ASM):00538           FCB  $7F             
DD3D F36E             (                    ROMbasic.ASM):00539           FDB  L8489          EXPONENTIATION 
DD3F 50               (                    ROMbasic.ASM):00540           FCB  $50             
DD40 E581             (                    ROMbasic.ASM):00541           FDB  LB2D5          AND 
DD42 46               (                    ROMbasic.ASM):00542           FCB  $46             
DD43 E580             (                    ROMbasic.ASM):00543           FDB  LB2D4          OR 
                      (                    ROMbasic.ASM):00544                                
                      (                    ROMbasic.ASM):00545 ; THIS IS THE RESERVED WORD TABLE                      
                      (                    ROMbasic.ASM):00546 ; FIRST PART OF THE TABLE CONTAINS EXECUTABLE COMMANDS                      
DD45 464F             (                    ROMbasic.ASM):00547 LAA66     FCC  "FO"           80 
DD47 D2               (                    ROMbasic.ASM):00548           FCB  $80+'R'         
DD48 47               (                    ROMbasic.ASM):00549           FCC  "G"            81 
DD49 CF               (                    ROMbasic.ASM):00550           FCB  $80+'O'         
     0081             (                    ROMbasic.ASM):00551 TOK_GO    EQU  $81             
DD4A 5245             (                    ROMbasic.ASM):00552           FCC  "RE"           82 
DD4C CD               (                    ROMbasic.ASM):00553           FCB  $80+'M'         
DD4D A7               (                    ROMbasic.ASM):00554           FCB  ''+$80         83 
DD4E 454C53           (                    ROMbasic.ASM):00555           FCC  "ELS"          84 
DD51 C5               (                    ROMbasic.ASM):00556           FCB  $80+'E'         
DD52 49               (                    ROMbasic.ASM):00557           FCC  "I"            85 
DD53 C6               (                    ROMbasic.ASM):00558           FCB  $80+'F'         
DD54 444154           (                    ROMbasic.ASM):00559           FCC  "DAT"          86 
DD57 C1               (                    ROMbasic.ASM):00560           FCB  $80+'A'         
DD58 5052494E         (                    ROMbasic.ASM):00561           FCC  "PRIN"         87 
DD5C D4               (                    ROMbasic.ASM):00562           FCB  $80+'T'         
DD5D 4F               (                    ROMbasic.ASM):00563           FCC  "O"            88 
DD5E CE               (                    ROMbasic.ASM):00564           FCB  $80+'N'         
DD5F 494E5055         (                    ROMbasic.ASM):00565           FCC  "INPU"         89 
DD63 D4               (                    ROMbasic.ASM):00566           FCB  $80+'T'         
DD64 454E             (                    ROMbasic.ASM):00567           FCC  "EN"           8A 
DD66 C4               (                    ROMbasic.ASM):00568           FCB  $80+'D'         
DD67 4E4558           (                    ROMbasic.ASM):00569           FCC  "NEX"          8B 
DD6A D4               (                    ROMbasic.ASM):00570           FCB  $80+'T'         
DD6B 4449             (                    ROMbasic.ASM):00571           FCC  "DI"           8C 
DD6D CD               (                    ROMbasic.ASM):00572           FCB  $80+'M'         
DD6E 524541           (                    ROMbasic.ASM):00573           FCC  "REA"          8D 
DD71 C4               (                    ROMbasic.ASM):00574           FCB  $80+'D'         
DD72 5255             (                    ROMbasic.ASM):00575           FCC  "RU"           8E 
DD74 CE               (                    ROMbasic.ASM):00576           FCB  $80+'N'         
DD75 524553544F52     (                    ROMbasic.ASM):00577           FCC  "RESTOR"       8F 
DD7B C5               (                    ROMbasic.ASM):00578           FCB  $80+'E'         
DD7C 5245545552       (                    ROMbasic.ASM):00579           FCC  "RETUR"        90 
DD81 CE               (                    ROMbasic.ASM):00580           FCB  $80+'N'         
DD82 53544F           (                    ROMbasic.ASM):00581           FCC  "STO"          91 
DD85 D0               (                    ROMbasic.ASM):00582           FCB  $80+'P'         
DD86 504F4B           (                    ROMbasic.ASM):00583           FCC  "POK"          92 
DD89 C5               (                    ROMbasic.ASM):00584           FCB  $80+'E'         
DD8A 434F4E           (                    ROMbasic.ASM):00585           FCC  "CON"          93 
DD8D D4               (                    ROMbasic.ASM):00586           FCB  $80+'T'         
DD8E 4C4953           (                    ROMbasic.ASM):00587           FCC  "LIS"          94 
DD91 D4               (                    ROMbasic.ASM):00588           FCB  $80+'T'         
DD92 434C4541         (                    ROMbasic.ASM):00589           FCC  "CLEA"         95 
DD96 D2               (                    ROMbasic.ASM):00590           FCB  $80+'R'         
DD97 4E45             (                    ROMbasic.ASM):00591           FCC  "NE"           96 
DD99 D7               (                    ROMbasic.ASM):00592           FCB  $80+'W'         
DD9A 455845           (                    ROMbasic.ASM):00593           FCC  "EXE"          97 
DD9D C3               (                    ROMbasic.ASM):00594           FCB  $80+'C'         
DD9E 54524F           (                    ROMbasic.ASM):00595           FCC  "TRO"          98 
DDA1 CE               (                    ROMbasic.ASM):00596           FCB  $80+'N'         
DDA2 54524F46         (                    ROMbasic.ASM):00597           FCC  "TROF"         99 
DDA6 C6               (                    ROMbasic.ASM):00598           FCB  $80+'F'         
DDA7 4445             (                    ROMbasic.ASM):00599           FCC  "DE"           9A 
DDA9 CC               (                    ROMbasic.ASM):00600           FCB  $80+'L'         
DDAA 4445             (                    ROMbasic.ASM):00601           FCC  "DE"           9B 
DDAC C6               (                    ROMbasic.ASM):00602           FCB  $80+'F'         
DDAD 4C494E           (                    ROMbasic.ASM):00603           FCC  "LIN"          9C 
DDB0 C5               (                    ROMbasic.ASM):00604           FCB  $80+'E'         
DDB1 52454E55         (                    ROMbasic.ASM):00605           FCC  "RENU"         9D 
DDB5 CD               (                    ROMbasic.ASM):00606           FCB  $80+'M'         
DDB6 454449           (                    ROMbasic.ASM):00607           FCC  "EDI"          9E 
DDB9 D4               (                    ROMbasic.ASM):00608           FCB  $80+'T'         
                      (                    ROMbasic.ASM):00609 ; END OF EXECUTABLE COMMANDS. THE REMAINDER OF THE TABLE ARE NON-EXECUTABLE TOKENS                      
DDBA 544142           (                    ROMbasic.ASM):00610           FCC  "TAB"          9F 
DDBD A8               (                    ROMbasic.ASM):00611           FCB  $80+'('         
     009F             (                    ROMbasic.ASM):00612 TOK_TAB   EQU  $9F             
DDBE 54               (                    ROMbasic.ASM):00613           FCC  "T"            A0 
DDBF CF               (                    ROMbasic.ASM):00614           FCB  $80+'O'         
     00A0             (                    ROMbasic.ASM):00615 TOK_TO    EQU  $A0             
DDC0 5355             (                    ROMbasic.ASM):00616           FCC  "SU"           A1 
DDC2 C2               (                    ROMbasic.ASM):00617           FCB  $80+'B'         
     00A1             (                    ROMbasic.ASM):00618 TOK_SUB   EQU  $A1             
DDC3 544845           (                    ROMbasic.ASM):00619           FCC  "THE"          A2 
DDC6 CE               (                    ROMbasic.ASM):00620           FCB  $80+'N'         
     00A2             (                    ROMbasic.ASM):00621 TOK_THEN  EQU  $A2             
DDC7 4E4F             (                    ROMbasic.ASM):00622           FCC  "NO"           A3 
DDC9 D4               (                    ROMbasic.ASM):00623           FCB  $80+'T'         
     00A3             (                    ROMbasic.ASM):00624 TOK_NOT   EQU  $A3             
DDCA 535445           (                    ROMbasic.ASM):00625           FCC  "STE"          A4 
DDCD D0               (                    ROMbasic.ASM):00626           FCB  $80+'P'         
     00A4             (                    ROMbasic.ASM):00627 TOK_STEP  EQU  $A4             
DDCE 4F46             (                    ROMbasic.ASM):00628           FCC  "OF"           A5 
DDD0 C6               (                    ROMbasic.ASM):00629           FCB  $80+'F'         
DDD1 AB               (                    ROMbasic.ASM):00630           FCB  '++$80         A6 
     00A6             (                    ROMbasic.ASM):00631 TOK_PLUS  EQU  $A6             
DDD2 AD               (                    ROMbasic.ASM):00632           FCB  '-+$80         A7 
     00A7             (                    ROMbasic.ASM):00633 TOK_MINUS EQU  $A7             
DDD3 AA               (                    ROMbasic.ASM):00634           FCB  '*+$80         A8 
DDD4 AF               (                    ROMbasic.ASM):00635           FCB  '/+$80         A9 
DDD5 DE               (                    ROMbasic.ASM):00636           FCB  '^+$80         AA 
DDD6 414E             (                    ROMbasic.ASM):00637           FCC  "AN"           AB 
DDD8 C4               (                    ROMbasic.ASM):00638           FCB  $80+'D'         
DDD9 4F               (                    ROMbasic.ASM):00639           FCC  "O"            AC 
DDDA D2               (                    ROMbasic.ASM):00640           FCB  $80+'R'         
DDDB BE               (                    ROMbasic.ASM):00641           FCB  '>+$80         AD 
     00AD             (                    ROMbasic.ASM):00642 TOK_GREATER EQU  $AD             
DDDC BD               (                    ROMbasic.ASM):00643           FCB  '=+$80         AE 
     00AE             (                    ROMbasic.ASM):00644 TOK_EQUALS EQU  $AE             
DDDD BC               (                    ROMbasic.ASM):00645           FCB  '<+$80         AF 
DDDE 46               (                    ROMbasic.ASM):00646           FCC  "F"            B0 
DDDF CE               (                    ROMbasic.ASM):00647           FCB  $80+'N'         
     00B0             (                    ROMbasic.ASM):00648 TOK_FN    EQU  $B0             
DDE0 5553494E         (                    ROMbasic.ASM):00649           FCC  "USIN"         B1 
DDE4 C7               (                    ROMbasic.ASM):00650           FCB  $80+'G'         
     00B1             (                    ROMbasic.ASM):00651 TOK_USING EQU  $B1             
                      (                    ROMbasic.ASM):00652 ;                              
                      (                    ROMbasic.ASM):00653                                
                      (                    ROMbasic.ASM):00654 ; FIRST SET ALWAYS HAS ONE PARAMETER                      
DDE5 5347             (                    ROMbasic.ASM):00655 LAB1A     FCC  "SG"           80 
DDE7 CE               (                    ROMbasic.ASM):00656           FCB  $80+'N'         
DDE8 494E             (                    ROMbasic.ASM):00657           FCC  "IN"           81 
DDEA D4               (                    ROMbasic.ASM):00658           FCB  $80+'T'         
DDEB 4142             (                    ROMbasic.ASM):00659           FCC  "AB"           82 
DDED D3               (                    ROMbasic.ASM):00660           FCB  $80+'S'         
DDEE 5553             (                    ROMbasic.ASM):00661           FCC  "US"           83 
DDF0 D2               (                    ROMbasic.ASM):00662           FCB  $80+'R'         
DDF1 524E             (                    ROMbasic.ASM):00663           FCC  "RN"           84 
DDF3 C4               (                    ROMbasic.ASM):00664           FCB  $80+'D'         
DDF4 5349             (                    ROMbasic.ASM):00665           FCC  "SI"           85 
DDF6 CE               (                    ROMbasic.ASM):00666           FCB  $80+'N'         
DDF7 504545           (                    ROMbasic.ASM):00667           FCC  "PEE"          86 
DDFA CB               (                    ROMbasic.ASM):00668           FCB  $80+'K'         
DDFB 4C45             (                    ROMbasic.ASM):00669           FCC  "LE"           87 
DDFD CE               (                    ROMbasic.ASM):00670           FCB  $80+'N'         
DDFE 535452           (                    ROMbasic.ASM):00671           FCC  "STR"          88 
DE01 A4               (                    ROMbasic.ASM):00672           FCB  $80+'$'         
DE02 5641             (                    ROMbasic.ASM):00673           FCC  "VA"           89 
DE04 CC               (                    ROMbasic.ASM):00674           FCB  $80+'L'         
DE05 4153             (                    ROMbasic.ASM):00675           FCC  "AS"           8A 
DE07 C3               (                    ROMbasic.ASM):00676           FCB  $80+'C'         
DE08 434852           (                    ROMbasic.ASM):00677           FCC  "CHR"          8B 
DE0B A4               (                    ROMbasic.ASM):00678           FCB  $80+'$'         
DE0C 4154             (                    ROMbasic.ASM):00679           FCC  "AT"           8C 
DE0E CE               (                    ROMbasic.ASM):00680           FCB  $80+'N'         
DE0F 434F             (                    ROMbasic.ASM):00681           FCC  "CO"           8D 
DE11 D3               (                    ROMbasic.ASM):00682           FCB  $80+'S'         
DE12 5441             (                    ROMbasic.ASM):00683           FCC  "TA"           8E 
DE14 CE               (                    ROMbasic.ASM):00684           FCB  $80+'N'         
DE15 4558             (                    ROMbasic.ASM):00685           FCC  "EX"           8F 
DE17 D0               (                    ROMbasic.ASM):00686           FCB  $80+'P'         
DE18 4649             (                    ROMbasic.ASM):00687           FCC  "FI"           90 
DE1A D8               (                    ROMbasic.ASM):00688           FCB  $80+'X'         
DE1B 4C4F             (                    ROMbasic.ASM):00689           FCC  "LO"           91 
DE1D C7               (                    ROMbasic.ASM):00690           FCB  $80+'G'         
DE1E 504F             (                    ROMbasic.ASM):00691           FCC  "PO"           92 
DE20 D3               (                    ROMbasic.ASM):00692           FCB  $80+'S'         
DE21 5351             (                    ROMbasic.ASM):00693           FCC  "SQ"           93 
DE23 D2               (                    ROMbasic.ASM):00694           FCB  $80+'R'         
DE24 484558           (                    ROMbasic.ASM):00695           FCC  "HEX"          94 
DE27 A4               (                    ROMbasic.ASM):00696           FCB  $80+'$'         
                      (                    ROMbasic.ASM):00697 ; LEFT, RIGHT AND MID ARE TREATED SEPARATELY                      
DE28 4C454654         (                    ROMbasic.ASM):00698           FCC  "LEFT"         95 
DE2C A4               (                    ROMbasic.ASM):00699           FCB  $80+'$'         
DE2D 5249474854       (                    ROMbasic.ASM):00700           FCC  "RIGHT"        96 
DE32 A4               (                    ROMbasic.ASM):00701           FCB  $80+'$'         
DE33 4D4944           (                    ROMbasic.ASM):00702           FCC  "MID"          97 
DE36 A4               (                    ROMbasic.ASM):00703           FCB  $80+'$'         
                      (                    ROMbasic.ASM):00704 ; REMAINING FUNCTIONS                      
DE37 494E4B4559       (                    ROMbasic.ASM):00705           FCC  "INKEY"        98 
DE3C A4               (                    ROMbasic.ASM):00706           FCB  $80+'$'         
DE3D 4D45             (                    ROMbasic.ASM):00707           FCC  "ME"           99 
DE3F CD               (                    ROMbasic.ASM):00708           FCB  $80+'M'         
DE40 5641525054       (                    ROMbasic.ASM):00709           FCC  "VARPT"        9A 
DE45 D2               (                    ROMbasic.ASM):00710           FCB  $80+'R'         
DE46 494E5354         (                    ROMbasic.ASM):00711           FCC  "INST"         9B 
DE4A D2               (                    ROMbasic.ASM):00712           FCB  $80+'R'         
DE4B 535452494E47     (                    ROMbasic.ASM):00713           FCC  "STRING"       9C 
DE51 A4               (                    ROMbasic.ASM):00714           FCB  $80+'$'         
                      (                    ROMbasic.ASM):00715                                
                      (                    ROMbasic.ASM):00716 ;                              
                      (                    ROMbasic.ASM):00717 ; DISPATCH TABLE FOR COMMANDS TOKEN #               
                      (                    ROMbasic.ASM):00718 CMD_TAB                        
DE52 E010             (                    ROMbasic.ASM):00719 LAB67     FDB  FOR             80   
DE54 E15B             (                    ROMbasic.ASM):00720           FDB  GO              81   
DE56 E1B8             (                    ROMbasic.ASM):00721           FDB  REM             82   
     0082             (                    ROMbasic.ASM):00722 TOK_REM   EQU  (*-CMD_TAB)/2+$7F   
DE58 E1B8             (                    ROMbasic.ASM):00723           FDB  REM             83 (') 
     0083             (                    ROMbasic.ASM):00724 TOK_SNGL_Q EQU  (*-CMD_TAB)/2+$7F 
DE5A E1B8             (                    ROMbasic.ASM):00725           FDB  REM             84 (ELSE) 
     0084             (                    ROMbasic.ASM):00726 TOK_ELSE  EQU  (*-CMD_TAB)/2+$7F 
DE5C E1E9             (                    ROMbasic.ASM):00727           FDB  IF              85   
     0085             (                    ROMbasic.ASM):00728 TOK_IF    EQU  (*-CMD_TAB)/2+$7F 
DE5E E1B5             (                    ROMbasic.ASM):00729           FDB  DATA            86   
     0086             (                    ROMbasic.ASM):00730 TOK_DATA    EQU  (*-CMD_TAB)/2+$7F
DE60 EB92             (                    ROMbasic.ASM):00731           FDB  PRINT           87   
     0087             (                    ROMbasic.ASM):00732 TOK_PRINT EQU  (*-CMD_TAB)/2+$7F 
DE62 E217             (                    ROMbasic.ASM):00733           FDB  ON              88   
DE64 E2C4             (                    ROMbasic.ASM):00734           FDB  INPUT           89   
     0089             (                    ROMbasic.ASM):00735 TOK_INPUT EQU  (*-CMD_TAB)/2+$7F  
DE66 E0E2             (                    ROMbasic.ASM):00736           FDB  END             8A   
DE68 E3A9             (                    ROMbasic.ASM):00737           FDB  NEXT            8B   
DE6A E5FA             (                    ROMbasic.ASM):00738           FDB  DIM             8C   
DE6C E2FE             (                    ROMbasic.ASM):00739           FDB  READ            8D   
DE6E E150             (                    ROMbasic.ASM):00740           FDB  RUN             8E   
DE70 E0C4             (                    ROMbasic.ASM):00741           FDB  RESTOR         8F 
DE72 E195             (                    ROMbasic.ASM):00742           FDB  RETURN          90   
DE74 E0E6             (                    ROMbasic.ASM):00743           FDB  STOP            91   
DE76 EA03             (                    ROMbasic.ASM):00744           FDB  POKE            92   
DE78 E10B             (                    ROMbasic.ASM):00745           FDB  CONT           93 
DE7A EA0A             (                    ROMbasic.ASM):00746           FDB  LIST            94   
DE7C E11C             (                    ROMbasic.ASM):00747           FDB  CLEAR           95   
DE7E DFE0             (                    ROMbasic.ASM):00748           FDB  NEW             96   
DE80 DCB4             (                    ROMbasic.ASM):00749           FDB  EXEC           97 
DE82 F58C             (                    ROMbasic.ASM):00750           FDB  TRON           98 
DE84 F58D             (                    ROMbasic.ASM):00751           FDB  TROFF          99 
DE86 F808             (                    ROMbasic.ASM):00752           FDB  DEL            9A 
DE88 F74C             (                    ROMbasic.ASM):00753           FDB  DEF            9B 
DE8A FEF6             (                    ROMbasic.ASM):00754           FDB  LINE           9C 
DE8C F892             (                    ROMbasic.ASM):00755           FDB  RENUM          9D 
DE8E F418             (                    ROMbasic.ASM):00756           FDB  EDIT           9E 
     009E             (                    ROMbasic.ASM):00757 TOK_HIGH_EXEC EQU  (*-CMD_TAB)/2+$7F 
                      (                    ROMbasic.ASM):00758                                
                      (                    ROMbasic.ASM):00759 ; ERROR MESSAGES AND THEIR NUMBERS AS USED INTERNALLY                      
DE90 4E46             (                    ROMbasic.ASM):00760 LABAF     FCC  "NF"           0 NEXT WITHOUT FOR   
DE92 534E             (                    ROMbasic.ASM):00761           FCC  "SN"           1 SYNTAX ERROR   
DE94 5247             (                    ROMbasic.ASM):00762           FCC  "RG"           2 RETURN WITHOUT GOSUB   
DE96 4F44             (                    ROMbasic.ASM):00763           FCC  "OD"           3 OUT OF DATA   
DE98 4643             (                    ROMbasic.ASM):00764           FCC  "FC"           4 ILLEGAL FUNCTION CALL   
DE9A 4F56             (                    ROMbasic.ASM):00765           FCC  "OV"           5 OVERFLOW   
DE9C 4F4D             (                    ROMbasic.ASM):00766           FCC  "OM"           6 OUT OF MEMORY   
DE9E 554C             (                    ROMbasic.ASM):00767           FCC  "UL"           7 UNDEFINED LINE NUMBER   
DEA0 4253             (                    ROMbasic.ASM):00768           FCC  "BS"           8 BAD SUBSCRIPT   
DEA2 4444             (                    ROMbasic.ASM):00769           FCC  "DD"           9 REDIMENSIONED ARRAY   
DEA4 2F30             (                    ROMbasic.ASM):00770           FCC  "/0"           10 DIVISION BY ZERO 
DEA6 4944             (                    ROMbasic.ASM):00771           FCC  "ID"           11 ILLEGAL DIRECT STATEMENT 
DEA8 544D             (                    ROMbasic.ASM):00772           FCC  "TM"           12 TYPE MISMATCH 
DEAA 4F53             (                    ROMbasic.ASM):00773           FCC  "OS"           13 OUT OF STRING SPACE 
DEAC 4C53             (                    ROMbasic.ASM):00774           FCC  "LS"           14 STRING TOO LONG 
DEAE 5354             (                    ROMbasic.ASM):00775           FCC  "ST"           15 STRING FORMULA TOO COMPLEX 
DEB0 434E             (                    ROMbasic.ASM):00776           FCC  "CN"           16 CAN'T CONTINUE 
DEB2 4644             (                    ROMbasic.ASM):00777           FCC  "FD"           17 BAD FILE DATA 
DEB4 414F             (                    ROMbasic.ASM):00778           FCC  "AO"           18 FILE ALREADY OPEN 
DEB6 444E             (                    ROMbasic.ASM):00779           FCC  "DN"           19 DEVICE NUMBER ERROR 
DEB8 494F             (                    ROMbasic.ASM):00780           FCC  "IO"           20 I/O ERROR 
DEBA 464D             (                    ROMbasic.ASM):00781           FCC  "FM"           21 BAD FILE MODE 
DEBC 4E4F             (                    ROMbasic.ASM):00782           FCC  "NO"           22 FILE NOT OPEN 
DEBE 4945             (                    ROMbasic.ASM):00783           FCC  "IE"           23 INPUT PAST END OF FILE 
DEC0 4453             (                    ROMbasic.ASM):00784           FCC  "DS"           24 DIRECT STATEMENT IN FILE 
                      (                    ROMbasic.ASM):00785 ; ADDITIONAL ERROR MESSAGES ADDED BY EXTENDED BASIC                      
DEC2 5546             (                    ROMbasic.ASM):00786 L890B     FCC  "UF"           25 UNDEFINED FUNCTION (FN) CALL 
DEC4 4E45             (                    ROMbasic.ASM):00787 L890D     FCC  "NE"           26 FILE NOT FOUND 
                      (                    ROMbasic.ASM):00788                                
DEC6 204552524F52     (                    ROMbasic.ASM):00789 LABE1     FCC  " ERROR"        
DECC 00               (                    ROMbasic.ASM):00790           FCB  $00             
DECD 20494E20         (                    ROMbasic.ASM):00791 LABE8     FCC  " IN "          
DED1 00               (                    ROMbasic.ASM):00792           FCB  $00             
DED2 0D               (                    ROMbasic.ASM):00793 LABED     FCB  CR              
DED3 4F4B             (                    ROMbasic.ASM):00794 LABEE     FCC  "OK"            
DED5 0D00             (                    ROMbasic.ASM):00795           FCB  CR,$00          
DED7 0D               (                    ROMbasic.ASM):00796 LABF2     FCB  CR              
DED8 425245414B       (                    ROMbasic.ASM):00797           FCC  "BREAK"         
DEDD 00               (                    ROMbasic.ASM):00798           FCB  $00             
                      (                    ROMbasic.ASM):00799                                
                      (                    ROMbasic.ASM):00800 ; SEARCH THE STACK FOR ‘GOSUB/RETURN’ OR ‘FOR/NEXT’ DATA.                      
                      (                    ROMbasic.ASM):00801 ; THE ‘FOR/NEXT’ INDEX VARIABLE DESCRIPTOR ADDRESS BEING                      
                      (                    ROMbasic.ASM):00802 ; SOUGHT IS STORED IN VARDES. EACH BLOCK OF FOR/NEXT DATA IS 18                      
                      (                    ROMbasic.ASM):00803 ; BYTES WITH A $80 LEADER BYTE AND THE GOSUB/RETURN DATA IS 5 BYTES                      
                      (                    ROMbasic.ASM):00804 ; WITH AN $A6 LEADER BYTE. THE FIRST NON "FOR/NEXT" DATA                      
                      (                    ROMbasic.ASM):00805 ; IS CONSIDERED ‘GOSUB/RETURN’                      
DEDE 3064             (                    ROMbasic.ASM):00806 LABF9     LEAX 4,S            POINT X TO 3RD ADDRESS ON STACK - IGNORE THE 
                      (                    ROMbasic.ASM):00807 ;                             FIRST TWO RETURN ADDRESSES ON THE STACK  
DEE0 C612             (                    ROMbasic.ASM):00808 LABFB     LDB  #18            18 BYTES SAVED ON STACK FOR EACH ‘FOR’ LOOP 
DEE2 9F0F             (                    ROMbasic.ASM):00809           STX  TEMPTR         SAVE POINTER 
DEE4 A684             (                    ROMbasic.ASM):00810           LDA  ,X             GET 1ST BYTE 
DEE6 8080             (                    ROMbasic.ASM):00811           SUBA #$80           * CHECK FOR TYPE OF STACK JUMP FOUND 
DEE8 2615             (                    ROMbasic.ASM):00812           BNE  LAC1A          * BRANCH IF NOT ‘FOR/NEXT’ 
DEEA AE01             (                    ROMbasic.ASM):00813           LDX  1,X            = GET INDEX VARIABLE DESCRIPTOR 
DEEC 9F11             (                    ROMbasic.ASM):00814           STX  TMPTR1         = POINTER AND SAVE IT IN TMPTR1 
DEEE 9E3B             (                    ROMbasic.ASM):00815           LDX  VARDES         GET INDEX VARIABLE BEING SEARCHED FOR 
DEF0 2709             (                    ROMbasic.ASM):00816           BEQ  LAC16          BRANCH IF DEFAULT INDEX VARIABLE - USE THE 
                      (                    ROMbasic.ASM):00817 ;                             FIRST ‘FOR/NEXT’ DATA FOUND ON STACK 
                      (                    ROMbasic.ASM):00818 ;                             IF NO INDEX VARIABLE AFTER ‘NEXT’ 
DEF2 9C11             (                    ROMbasic.ASM):00819           CMPX TMPTR1         DOES THE STACK INDEX MATCH THE ONE 
                      (                    ROMbasic.ASM):00820 ;                             BEING SEARCHED FOR? 
DEF4 2709             (                    ROMbasic.ASM):00821           BEQ  LAC1A          YES 
DEF6 9E0F             (                    ROMbasic.ASM):00822           LDX  TEMPTR         * RESTORE INITIAL POINTER, ADD 
DEF8 3A               (                    ROMbasic.ASM):00823           ABX                 * 18 TO IT AND LOOK FOR 
DEF9 20E5             (                    ROMbasic.ASM):00824           BRA  LABFB          * NEXT BLOCK OF DATA 
DEFB 9E11             (                    ROMbasic.ASM):00825 LAC16     LDX  TMPTR1         = GET 1ST INDEX VARIABLE FOUND AND 
DEFD 9F3B             (                    ROMbasic.ASM):00826           STX  VARDES         = SAVE AS ‘NEXT’ INDEX 
DEFF 9E0F             (                    ROMbasic.ASM):00827 LAC1A     LDX  TEMPTR         POINT X TO START OF ‘FOR/NEXT’ DATA 
DF01 4D               (                    ROMbasic.ASM):00828           TSTA                SET ZERO FLAG IF ‘FOR/NEXT’ DATA 
DF02 39               (                    ROMbasic.ASM):00829           RTS                  
                      (                    ROMbasic.ASM):00830 ; CHECK FOR MEMORY SPACE FOR NEW TOP OF                      
                      (                    ROMbasic.ASM):00831 ; ARRAYS AND MOVE ARRAYS TO NEW LOCATION                      
DF03 8D17             (                    ROMbasic.ASM):00832 LAC1E     BSR  LAC37          ACCD = NEW BOTTOM OF FREE RAM - IS THERE 
                      (                    ROMbasic.ASM):00833 ;                             ROOM FOR THE STACK? 
                      (                    ROMbasic.ASM):00834 ; MOVE BYTES FROM V43(X) TO V41(U) UNTIL (X) = V47 AND                      
                      (                    ROMbasic.ASM):00835 ; SAVE FINAL VALUE OF U IN V45                      
DF05 DE41             (                    ROMbasic.ASM):00836 LAC20     LDU  V41            POINT U TO DESTINATION ADDRESS (V41) 
DF07 3341             (                    ROMbasic.ASM):00837           LEAU 1,U            ADD ONE TO U - COMPENSATE FOR FIRST PSHU 
DF09 9E43             (                    ROMbasic.ASM):00838           LDX  V43            POINT X TO SOURCE ADDRESS (V43) 
DF0B 3001             (                    ROMbasic.ASM):00839           LEAX 1,X            ADD ONE - COMPENSATE FOR FIRST LDA ,X 
DF0D A682             (                    ROMbasic.ASM):00840 LAC28     LDA  ,-X            GRAB A BYTE FROM SOURCE 
DF0F 3602             (                    ROMbasic.ASM):00841           PSHU A              MOVE IT TO DESTINATION 
DF11 9C47             (                    ROMbasic.ASM):00842           CMPX V47            DONE? 
DF13 26F8             (                    ROMbasic.ASM):00843           BNE  LAC28          NO - KEEP MOVING BYTES 
DF15 DF45             (                    ROMbasic.ASM):00844           STU  V45            SAVE FINAL DESTINATION ADDRESS 
DF17 39               (                    ROMbasic.ASM):00845 LAC32     RTS                  
                      (                    ROMbasic.ASM):00846 ; CHECK TO SEE IF THERE IS ROOM TO STORE 2*ACCB                      
                      (                    ROMbasic.ASM):00847 ; BYTES IN FREE RAM - OM ERROR IF NOT                      
DF18 4F               (                    ROMbasic.ASM):00848 LAC33     CLRA                * ACCD CONTAINS NUMBER OF EXTRA 
DF19 58               (                    ROMbasic.ASM):00849           ASLB                * BYTES TO PUT ON STACK 
DF1A D31F             (                    ROMbasic.ASM):00850           ADDD ARYEND         END OF PROGRAM AND VARIABLES 
DF1C C3003A           (                    ROMbasic.ASM):00851 LAC37     ADDD #STKBUF        ADD STACK BUFFER - ROOM FOR STACK? 
DF1F 2508             (                    ROMbasic.ASM):00852           BCS  LAC44          BRANCH IF GREATER THAN $FFFF 
DF21 10DF17           (                    ROMbasic.ASM):00853           STS  BOTSTK         CURRENT NEW BOTTOM OF STACK STACK POINTER 
DF24 109317           (                    ROMbasic.ASM):00854           CMPD BOTSTK         ARE WE GOING TO BE BELOW STACK? 
DF27 25EE             (                    ROMbasic.ASM):00855           BCS  LAC32          YES - NO ERROR 
DF29 C60C             (                    ROMbasic.ASM):00856 LAC44     LDB  #6*2           OUT OF MEMORY ERROR 
                      (                    ROMbasic.ASM):00857                                
                      (                    ROMbasic.ASM):00858 ; ERROR SERVICING ROUTINE                      
DF2B BDDFFC           (                    ROMbasic.ASM):00859 LAC46     JSR  LAD33          RESET STACK, STRING STACK, CONTINUE POINTER 
DF2E BDEBD1           (                    ROMbasic.ASM):00860           JSR  LB95C          SEND A CR TO SCREEN 
DF31 BDEC20           (                    ROMbasic.ASM):00861           JSR  LB9AF          SEND A ‘?‘ TO SCREEN 
DF34 8EDE90           (                    ROMbasic.ASM):00862           LDX  #LABAF         POINT TO ERROR TABLE 
DF37 3A               (                    ROMbasic.ASM):00863 LAC60     ABX                 ADD MESSAGE NUMBER OFFSET 
DF38 8D31             (                    ROMbasic.ASM):00864           BSR  LACA0          * GET TWO CHARACTERS FROM X AND 
DF3A 8D2F             (                    ROMbasic.ASM):00865           BSR  LACA0          * SEND TO CONSOLE OUT (SCREEN) 
DF3C 8EDEC5           (                    ROMbasic.ASM):00866           LDX  #LABE1-1       POINT TO "ERROR" MESSAGE 
DF3F BDEC0D           (                    ROMbasic.ASM):00867 LAC68     JSR  LB99C          PRINT MESSAGE POINTED TO BY X 
DF42 9668             (                    ROMbasic.ASM):00868           LDA  CURLIN         GET CURRENT LINE NUMBER (CURL IN) 
DF44 4C               (                    ROMbasic.ASM):00869           INCA                TEST FOR DIRECT MODE 
DF45 2703             (                    ROMbasic.ASM):00870           BEQ  LAC73          BRANCH IF DIRECT MODE 
DF47 BDF036           (                    ROMbasic.ASM):00871           JSR  LBDC5          PRINT ‘IN ****‘ 
                      (                    ROMbasic.ASM):00872                                
                      (                    ROMbasic.ASM):00873 ; THIS IS THE MAIN LOOP OF BASIC WHEN IN DIRECT MODE                      
DF4A BDEBD1           (                    ROMbasic.ASM):00874 LAC73     JSR  LB95C          MOVE CURSOR TO START OF LINE 
DF4D 8EDED2           (                    ROMbasic.ASM):00875           LDX  #LABED         POINT X TO ‘OK’, CR MESSAGE 
DF50 BDEC0D           (                    ROMbasic.ASM):00876           JSR  LB99C          PRINT ‘OK’, CR 
DF53 BDDC66           (                    ROMbasic.ASM):00877 LAC7C     JSR  LA390          GO GET AN INPUT LINE 
DF56 CEFFFF           (                    ROMbasic.ASM):00878           LDU  #$FFFF         THE LINE NUMBER FOR DIRECT MODE IS $FFFF 
DF59 DF68             (                    ROMbasic.ASM):00879           STU  CURLIN         SAVE IT IN CURLIN 
DF5B 25F6             (                    ROMbasic.ASM):00880           BCS  LAC7C          BRANCH IF LINE INPUT TERMINATED BY BREAK 
DF5D 9F83             (                    ROMbasic.ASM):00881           STX  CHARAD         SAVE (X) AS CURRENT INPUT POINTER - THIS WILL 
                      (                    ROMbasic.ASM):00882 ;                             ENABLE THE ‘LIVE KEYBOARD’ (DIRECT) MODE. THE  
                      (                    ROMbasic.ASM):00883 ;                             LINE JUST ENTERED WILL BE INTERPRETED  
DF5F 9D7C             (                    ROMbasic.ASM):00884           JSR  GETNCH         GET NEXT CHARACTER FROM BASIC 
DF61 27F0             (                    ROMbasic.ASM):00885           BEQ  LAC7C          NO LINE INPUT - GET ANOTHER LINE 
DF63 250B             (                    ROMbasic.ASM):00886           BCS  LACA5          BRANCH IF NUMER1C - THERE WAS A LINE NUMBER BEFORE 
                      (                    ROMbasic.ASM):00887 ;                             THE  STATEMENT ENTERED, SO THIS STATEMENT  
                      (                    ROMbasic.ASM):00888 ;                             WILL BE MERGED INTO THE BASIC PROGRAM  
DF65 BDEABF           (                    ROMbasic.ASM):00889           JSR  LB821          GO CRUNCH LINE 
DF68 7EE099           (                    ROMbasic.ASM):00890           JMP  LADC0          GO EXECUTE THE STATEMENT (LIVE KEYBOARD) 
                      (                    ROMbasic.ASM):00891 ;                              
DF6B A680             (                    ROMbasic.ASM):00892 LACA0     LDA  ,X+            GET A CHARACTER 
DF6D 7EEC22           (                    ROMbasic.ASM):00893           JMP  LB9B1          SEND TO CONSOLE OUT 
                      (                    ROMbasic.ASM):00894                 
                      (                    ROMbasic.ASM):00895 ; TAKE A LINE FROM THE LINE INPUT BUFFER                      
                      (                    ROMbasic.ASM):00896 ; AND INSERT IT INTO THE BASIC PROGRAM                      
DF70 BDE23C           (                    ROMbasic.ASM):00897 LACA5     JSR  LAF67          CONVERT LINE NUMBER TO BINARY 
DF73 9E2B             (                    ROMbasic.ASM):00898 LACA8     LDX  BINVAL         GET CONVERTED LINE NUMBER 
DF75 9FF1             (                    ROMbasic.ASM):00899           STX  LINHDR         STORE IT IN LINE INPUT HEADER 
DF77 BDEABF           (                    ROMbasic.ASM):00900           JSR  LB821          GO CRUNCH THE LINE 
DF7A D703             (                    ROMbasic.ASM):00901           STB  TMPLOC         SAVE LINE LENGTH 
DF7C 8D4C             (                    ROMbasic.ASM):00902           BSR  LAD01          FIND OUT WHERE TO INSERT LINE 
DF7E 2512             (                    ROMbasic.ASM):00903           BCS  LACC8          BRANCH IF LINE NUMBER DOES NOT ALREADY EXIST 
DF80 DC47             (                    ROMbasic.ASM):00904           LDD  V47            GET ABSOLUTE ADDRESS OF LINE NUMBER 
DF82 A384             (                    ROMbasic.ASM):00905           SUBD ,X             SUBTRACT ADDRESS OF NEXT LINE NUMBER 
DF84 D31B             (                    ROMbasic.ASM):00906           ADDD VARTAB         * ADD TO CURRENT END OF PROGRAM - THIS WILL REMOVE 
DF86 DD1B             (                    ROMbasic.ASM):00907           STD  VARTAB         * THE LENGTH OF THIS LINE NUMBER FROM THE PROGRAM 
DF88 EE84             (                    ROMbasic.ASM):00908           LDU  ,X             POINT U TO ADDRESS OF NEXT LINE NUMBER 
                      (                    ROMbasic.ASM):00909 ; DELETE OLD LINE FROM BASIC PROGRAM                      
DF8A 3702             (                    ROMbasic.ASM):00910 LACC0     PULU A              GET A BYTE FROM WHAT’S LEFT OF PROGRAM 
DF8C A780             (                    ROMbasic.ASM):00911           STA  ,X+            MOVE IT DOWN 
DF8E 9C1B             (                    ROMbasic.ASM):00912           CMPX VARTAB         COMPARE TO END OF BASIC PROGRAM 
DF90 26F8             (                    ROMbasic.ASM):00913           BNE  LACC0          BRANCH IF NOT AT END 
DF92 96F3             (                    ROMbasic.ASM):00914 LACC8     LDA  LINBUF         * CHECK TO SEE IF THERE IS A LINE IN 
DF94 271C             (                    ROMbasic.ASM):00915           BEQ  LACE9          * THE BUFFER AND BRANCH IF NONE 
DF96 DC1B             (                    ROMbasic.ASM):00916           LDD  VARTAB         = SAVE CURRENT END OF 
DF98 DD43             (                    ROMbasic.ASM):00917           STD  V43            = PROGRAM IN V43 
DF9A DB03             (                    ROMbasic.ASM):00918           ADDB TMPLOC         * ADD LENGTH OF CRUNCHED LINE, 
DF9C 8900             (                    ROMbasic.ASM):00919           ADCA #0             * PROPOGATE CARRY AND SAVE NEW END 
DF9E DD41             (                    ROMbasic.ASM):00920           STD  V41            * OF PROGRAM IN V41 
DFA0 BDDF03           (                    ROMbasic.ASM):00921           JSR  LAC1E          = MAKE SURE THERE’S ENOUGH RAM FOR THIS 
                      (                    ROMbasic.ASM):00922 ;                             = LINE & MAKE A HOLE IN BASIC FOR NEW LINE  
DFA3 CE00EF           (                    ROMbasic.ASM):00923           LDU  #LINHDR-2      POINT U TO LINE TO BE INSERTED 
DFA6 3702             (                    ROMbasic.ASM):00924 LACDD     PULU A              GET A BYTE FROM NEW LINE 
DFA8 A780             (                    ROMbasic.ASM):00925           STA  ,X+            INSERT IT IN PROGRAM 
DFAA 9C45             (                    ROMbasic.ASM):00926           CMPX V45            * COMPARE TO ADDRESS OF END OF INSERTED 
DFAC 26F8             (                    ROMbasic.ASM):00927           BNE  LACDD          * LINE AND BRANCH IF NOT DONE 
DFAE 9E41             (                    ROMbasic.ASM):00928           LDX  V41            = GET AND SAVE 
DFB0 9F1B             (                    ROMbasic.ASM):00929           STX  VARTAB         = END OF PROGRAM 
DFB2 8D36             (                    ROMbasic.ASM):00930 LACE9     BSR  LAD21          RESET INPUT POINTER, CLEAR VARIABLES, INITIALIZE 
DFB4 8D02             (                    ROMbasic.ASM):00931           BSR  LACEF          ADJUST START OF NEXT LINE ADDRESSES 
DFB6 209B             (                    ROMbasic.ASM):00932           BRA  LAC7C          REENTER BASIC’S INPUT LOOP 
                      (                    ROMbasic.ASM):00933 ; COMPUTE THE START OF NEXT LINE ADDRESSES FOR THE BASIC PROGRAM                      
DFB8 9E19             (                    ROMbasic.ASM):00934 LACEF     LDX  TXTTAB         POINT X TO START OF PROGRAM 
DFBA EC84             (                    ROMbasic.ASM):00935 LACF1     LDD  ,X             GET ADDRESS OF NEXT LINE 
DFBC 2721             (                    ROMbasic.ASM):00936           BEQ  LAD16          RETURN IF END OF PROGRAM 
DFBE 3304             (                    ROMbasic.ASM):00937           LEAU 4,X            POINT U TO START OF BASIC TEXT IN LINE 
DFC0 A6C0             (                    ROMbasic.ASM):00938 LACF7     LDA  ,U+            * SKIP THROUGH THE LINE UNTIL A 
DFC2 26FC             (                    ROMbasic.ASM):00939           BNE  LACF7          * ZERO (END OF LINE) IS FOUND 
DFC4 EF84             (                    ROMbasic.ASM):00940           STU  ,X             SAVE THE NEW START OF NEXT LINE ADDRESS 
DFC6 AE84             (                    ROMbasic.ASM):00941           LDX  ,X             POINT X TO START OF NEXT LINE 
DFC8 20F0             (                    ROMbasic.ASM):00942           BRA  LACF1          KEEP GOING 
                      (                    ROMbasic.ASM):00943 ;                              
                      (                    ROMbasic.ASM):00944 ; FIND A LINE NUMBER IN THE BASIC PROGRAM                      
                      (                    ROMbasic.ASM):00945 ; RETURN WITH CARRY SET IF NO MATCH FOUND                      
DFCA DC2B             (                    ROMbasic.ASM):00946 LAD01     LDD  BINVAL         GET THE LINE NUMBER TO FIND 
DFCC 9E19             (                    ROMbasic.ASM):00947           LDX  TXTTAB         BEGINNING OF PROGRAM 
DFCE EE84             (                    ROMbasic.ASM):00948 LAD05     LDU  ,X             GET ADDRESS OF NEXT LINE NUMBER 
DFD0 2709             (                    ROMbasic.ASM):00949           BEQ  LAD12          BRANCH IF END OF PROG 
DFD2 10A302           (                    ROMbasic.ASM):00950           CMPD 2,X            IS IT A MATCH? 
DFD5 2306             (                    ROMbasic.ASM):00951           BLS  LAD14          CARRY SET IF LOWER; CARRY CLEAR IF MATCH 
DFD7 AE84             (                    ROMbasic.ASM):00952           LDX  ,X             X = ADDRESS OF NEXT LINE 
DFD9 20F3             (                    ROMbasic.ASM):00953           BRA  LAD05          KEEP LOOPING FOR LINE NUMBER 
DFDB 1A01             (                    ROMbasic.ASM):00954 LAD12     ORCC #1             SET CARRY FLAG 
DFDD 9F47             (                    ROMbasic.ASM):00955 LAD14     STX  V47            SAVE MATCH LINE NUMBER OR NUMBER OF LINE JUST AFTER 
                      (                    ROMbasic.ASM):00956 ;                             WHERE IT SHOULD HAVE BEEN 
DFDF 39               (                    ROMbasic.ASM):00957 LAD16     RTS                  
                      (                    ROMbasic.ASM):00958                                
                      (                    ROMbasic.ASM):00959 ; NEW                          
DFE0 26FB             (                    ROMbasic.ASM):00960 NEW       BNE  LAD14          BRANCH IF ARGUMENT GIVEN 
DFE2 9E19             (                    ROMbasic.ASM):00961 LAD19     LDX  TXTTAB         GET START OF BASIC 
DFE4 6F80             (                    ROMbasic.ASM):00962           CLR  ,X+            * PUT 2 ZERO BYTES THERE - ERASE 
DFE6 6F80             (                    ROMbasic.ASM):00963           CLR  ,X+            * THE BASIC PROGRAM 
DFE8 9F1B             (                    ROMbasic.ASM):00964           STX  VARTAB         AND THE NEXT ADDRESS IS NOW THE END OF PROGRAM 
DFEA 9E19             (                    ROMbasic.ASM):00965 LAD21     LDX  TXTTAB         GET START OF BASIC 
DFEC BDE190           (                    ROMbasic.ASM):00966           JSR  LAEBB          PUT INPUT POINTER ONE BEFORE START OF BASIC 
                      (                    ROMbasic.ASM):00967 ; ERASE ALL VARIABLES                      
DFEF 9E27             (                    ROMbasic.ASM):00968 LAD26     LDX  MEMSIZ         * RESET START OF STRING VARIABLES 
DFF1 9F23             (                    ROMbasic.ASM):00969           STX  STRTAB         * TO TOP OF STRING SPACE 
DFF3 BDE0C4           (                    ROMbasic.ASM):00970           JSR  RESTOR         RESET ‘DATA’ POINTER TO START OF BASIC 
DFF6 9E1B             (                    ROMbasic.ASM):00971           LDX  VARTAB         * GET START OF VARIABLES AND USE IT 
DFF8 9F1D             (                    ROMbasic.ASM):00972           STX  ARYTAB         * TO RESET START OF ARRAYS 
DFFA 9F1F             (                    ROMbasic.ASM):00973           STX  ARYEND         RESET END OF ARRAYS 
DFFC 8E00C9           (                    ROMbasic.ASM):00974 LAD33     LDX  #STRSTK        * RESET STRING STACK POINTER TO 
DFFF 9F0B             (                    ROMbasic.ASM):00975           STX  TEMPPT         * BOTTOM OF STRING STACK 
E001 AEE4             (                    ROMbasic.ASM):00976           LDX  ,S             GET RETURN ADDRESS OFF STACK 
E003 10DE21           (                    ROMbasic.ASM):00977           LDS  FRETOP         RESTORE STACK POINTER 
E006 6FE2             (                    ROMbasic.ASM):00978           CLR  ,-S            PUT A ZERO BYTE ON STACK - TO CLEAR ANY RETURN OF 
                      (                    ROMbasic.ASM):00979 ;                             FOR/NEXT DATA FROM THE STACK 
E008 0F2D             (                    ROMbasic.ASM):00980           CLR  OLDPTR         RESET ‘CONT’ ADDRESS SO YOU 
E00A 0F2E             (                    ROMbasic.ASM):00981           CLR  OLDPTR+1       ‘CAN’T CONTINUE’ 
E00C 0F08             (                    ROMbasic.ASM):00982           CLR  ARYDIS         CLEAR THE ARRAY DISABLE FLAG 
E00E 6E84             (                    ROMbasic.ASM):00983           JMP  ,X             RETURN TO CALLING ROUTINE - THIS IS NECESSARY 
                      (                    ROMbasic.ASM):00984 ;                             SINCE THE STACK WAS RESET 
                      (                    ROMbasic.ASM):00985 ;                              
                      (                    ROMbasic.ASM):00986 ; FOR                          
                      (                    ROMbasic.ASM):00987 ;                              
                      (                    ROMbasic.ASM):00988 ; THE FOR COMMAND WILL STORE 18 BYTES ON THE STACK FOR                      
                      (                    ROMbasic.ASM):00989 ; EACH FOR-NEXT LOOP WHICH IS BEING PROCESSED. THESE                      
                      (                    ROMbasic.ASM):00990 ; BYTES ARE DEFINED AS FOLLOWS: 0- $80 (FOR FLAG);                      
                      (                    ROMbasic.ASM):00991 ;         1,2=INDEX VARIABLE DESCRIPTOR POINTER; 3-7=FP VALUE OF STEP;  
                      (                    ROMbasic.ASM):00992 ;         8=STEP DIRECTION: $FF IF NEGATIVE; 0 IF ZERO; 1 IF POSITIVE;  
                      (                    ROMbasic.ASM):00993 ; 9-13=FP VALUE OF ‘TO’ PARAMETER;                      
                      (                    ROMbasic.ASM):00994 ; 14,15=CURRENT LINE NUMBER; 16,17=RAM ADDRESS OF THE END                      
                      (                    ROMbasic.ASM):00995 ;         OF   THE LINE CONTAINING THE ‘FOR’ STATEMENT  
E010 8680             (                    ROMbasic.ASM):00996 FOR       LDA  #$80           * SAVE THE DISABLE ARRAY FLAG IN VO8 
E012 9708             (                    ROMbasic.ASM):00997           STA  ARYDIS         * DO NOT ALLOW THE INDEX VARIABLE TO BE AN ARRAY 
E014 BDE25E           (                    ROMbasic.ASM):00998           JSR  LET            SET INDEX VARIABLE TO INITIAL VALUE 
E017 BDDEDE           (                    ROMbasic.ASM):00999           JSR  LABF9          SEARCH THE STACK FOR ‘FOR/NEXT’ DATA 
E01A 3262             (                    ROMbasic.ASM):01000           LEAS 2,S            PURGE RETURN ADDRESS OFF OF THE STACK 
E01C 2604             (                    ROMbasic.ASM):01001           BNE  LAD59          BRANCH IF INDEX VARIABLE NOT ALREADY BEING USED 
E01E 9E0F             (                    ROMbasic.ASM):01002           LDX  TEMPTR         GET (ADDRESS + 18) OF MATCHED ‘FOR/NEXT’ DATA 
E020 3285             (                    ROMbasic.ASM):01003           LEAS B,X            MOVE THE STACK POINTER TO THE BEGINNING OF THE 
                      (                    ROMbasic.ASM):01004 ; MATCHED ‘FOR/NEXT’ DATA SO THE NEW DATA WILL                      
                      (                    ROMbasic.ASM):01005 ; OVERLAY THE OLD DATA. THIS WILL ALSO DESTROY                      
                      (                    ROMbasic.ASM):01006 ; ALL OF THE ‘RETURN’ AND ‘FOR/NEXT’ DATA BELOW                      
                      (                    ROMbasic.ASM):01007 ; THIS POINT ON THE STACK                      
E022 C609             (                    ROMbasic.ASM):01008 LAD59     LDB  #$09           * CHECK FOR ROOM FOR 18 BYTES 
E024 BDDF18           (                    ROMbasic.ASM):01009           JSR  LAC33          * IN FREE RAM 
E027 BDE1BD           (                    ROMbasic.ASM):01010           JSR  LAEE8          GET ADDR OF END OF SUBLINE IN X 
E02A DC68             (                    ROMbasic.ASM):01011           LDD  CURLIN         GET CURRENT LINE NUMBER 
E02C 3416             (                    ROMbasic.ASM):01012           PSHS X,B,A          SAVE LINE ADDR AND LINE NUMBER ON STACK 
E02E C6A0             (                    ROMbasic.ASM):01013           LDB  #TOK_TO        TOKEN FOR ‘TO’ 
E030 BDE520           (                    ROMbasic.ASM):01014           JSR  LB26F          SYNTAX CHECK FOR ‘TO’ 
E033 BDE3F4           (                    ROMbasic.ASM):01015           JSR  LB143          ‘TM’ ERROR IF INDEX VARIABLE SET TO STRING 
E036 BDE3F2           (                    ROMbasic.ASM):01016           JSR  LB141          EVALUATE EXPRESSION 
                      (                    ROMbasic.ASM):01017 ;                              
E039 D654             (                    ROMbasic.ASM):01018           LDB  FP0SGN         GET FPA0 MANTISSA SIGN 
E03B CA7F             (                    ROMbasic.ASM):01019           ORB  #$7F           FORM A MASK TO SAVE DATA BITS OF HIGH ORDER MANTISSA 
E03D D450             (                    ROMbasic.ASM):01020           ANDB FPA0           PUT THE MANTISSA SIGN IN BIT 7 OF HIGH ORDER MANTISSA 
E03F D750             (                    ROMbasic.ASM):01021           STB  FPA0           SAVE THE PACKED HIGH ORDER MANTISSA 
E041 108EE048         (                    ROMbasic.ASM):01022           LDY  #LAD7F         LOAD FOLLOWING ADDRESS INTO Y AS A RETURN 
E045 7EE49B           (                    ROMbasic.ASM):01023           JMP  LB1EA          ADDRESS - PUSH FPA0 ONTO THE STACK 
E048 8EED36           (                    ROMbasic.ASM):01024 LAD7F     LDX  #LBAC5         POINT X TO FLOATING POINT NUMBER 1.0 (DEFAULT STEP VALUE) 
E04B BDEE85           (                    ROMbasic.ASM):01025           JSR  LBC14          MOVE (X) TO FPA0 
E04E 9D82             (                    ROMbasic.ASM):01026           JSR  GETCCH         GET CURRENT INPUT CHARACTER 
E050 81A4             (                    ROMbasic.ASM):01027           CMPA #TOK_STEP      STEP TOKEN 
E052 2605             (                    ROMbasic.ASM):01028           BNE  LAD90          BRANCH IF NO ‘STEP’ VALUE 
E054 9D7C             (                    ROMbasic.ASM):01029           JSR  GETNCH         GET A CHARACTER FROM BASIC 
E056 BDE3F2           (                    ROMbasic.ASM):01030           JSR  LB141          EVALUATE NUMERIC EXPRESSION 
E059 BDEEDE           (                    ROMbasic.ASM):01031 LAD90     JSR  LBC6D          CHECK STATUS OF FPA0 
E05C BDE497           (                    ROMbasic.ASM):01032           JSR  LB1E6          SAVE STATUS AND FPA0 ON THE STACK 
E05F DC3B             (                    ROMbasic.ASM):01033           LDD  VARDES         * GET DESCRIPTOR POINTER FOR THE ‘STEP’ 
E061 3406             (                    ROMbasic.ASM):01034           PSHS B,A            * VARIABLE AND SAVE IT ON THE STACK 
E063 8680             (                    ROMbasic.ASM):01035           LDA  #$80           = GET THE ‘FOR’ FLAG AND 
E065 3402             (                    ROMbasic.ASM):01036           PSHS A              = SAVE IT ON THE STACK 
                      (                    ROMbasic.ASM):01037 ;                              
                      (                    ROMbasic.ASM):01038 ; MAIN COMMAND INTERPRETATION LOOP                      
E067 1CAF             (                    ROMbasic.ASM):01039 LAD9E     ANDCC #$AF          ENABLE IRQ,FIRQ 
E069 8D60             (                    ROMbasic.ASM):01040           BSR  LADEB          CHECK FOR KEYBOARD BREAK 
E06B 9E83             (                    ROMbasic.ASM):01041           LDX  CHARAD         GET BASIC’S INPUT POINTER 
E06D 9F2F             (                    ROMbasic.ASM):01042           STX  TINPTR         SAVE IT 
E06F A680             (                    ROMbasic.ASM):01043           LDA  ,X+            GET CURRENT INPUT CHAR & MOVE POINTER 
E071 2707             (                    ROMbasic.ASM):01044           BEQ  LADB4          BRANCH IF END OF LINE 
E073 813A             (                    ROMbasic.ASM):01045           CMPA #':            CHECK FOR LINE SEPARATOR 
E075 2722             (                    ROMbasic.ASM):01046           BEQ  LADC0          BRANCH IF COLON 
E077 7EE528           (                    ROMbasic.ASM):01047 LADB1     JMP  LB277          ‘SYNTAX ERROR’-IF NOT LINE SEPARATOR 
E07A A681             (                    ROMbasic.ASM):01048 LADB4     LDA  ,X++           GET MS BYTE OF ADDRESS OF NEXT BASIC LINE 
E07C 9700             (                    ROMbasic.ASM):01049           STA  ENDFLG         SAVE IN STOP/END FLAG - CAUSE A STOP IF 
                      (                    ROMbasic.ASM):01050 ;                             NEXT LINE ADDRESS IS < $8000; CAUSE 
                      (                    ROMbasic.ASM):01051 ;                             AN END IF ADDRESS > $8000 
E07E 2772             (                    ROMbasic.ASM):01052           BEQ  LAE15          BRANCH TO ‘STOP’ - END OF PROGRAM 
E080 EC80             (                    ROMbasic.ASM):01053           LDD  ,X+            GET CURRENT LINE NUMBER 
E082 DD68             (                    ROMbasic.ASM):01054           STD  CURLIN         SAVE IN CURLIN 
E084 9F83             (                    ROMbasic.ASM):01055           STX  CHARAD         SAVE ADDRESS OF FIRST BYTE OF LINE 
                      (                    ROMbasic.ASM):01056 ; EXTENDED BASIC TRACE                      
E086 968C             (                    ROMbasic.ASM):01057           LDA  TRCFLG         TEST THE TRACE FLAG 
E088 270F             (                    ROMbasic.ASM):01058           BEQ  LADC0          BRANCH IF TRACE OFF 
E08A 865B             (                    ROMbasic.ASM):01059           LDA  #$5B           <LEFT HAND MARKER FOR TRON LINE NUMBER 
E08C BDDB17           (                    ROMbasic.ASM):01060           JSR  PUTCHR         OUTPUT A CHARACTER 
E08F 9668             (                    ROMbasic.ASM):01061           LDA  CURLIN         GET MS BYTE OF LINE NUMBER 
E091 BDF03D           (                    ROMbasic.ASM):01062           JSR  LBDCC          CONVERT ACCD TO DECIMAL AND PRINT ON SCREEN 
E094 865D             (                    ROMbasic.ASM):01063           LDA  #$5D           > RIGHT HAND MARKER FOR TRON LINE NUMBER 
E096 BDDB17           (                    ROMbasic.ASM):01064           JSR  PUTCHR         OUTPUT A CHARACTER 
                      (                    ROMbasic.ASM):01065 ; END OF EXTENDED BASIC TRACE                      
E099 9D7C             (                    ROMbasic.ASM):01066 LADC0     JSR  GETNCH         GET A CHARACTER FROM BASIC 
E09B 8D02             (                    ROMbasic.ASM):01067           BSR  LADC6          GO PROCESS COMMAND 
E09D 20C8             (                    ROMbasic.ASM):01068           BRA  LAD9E          GO BACK TO MAIN LOOP 
E09F 2729             (                    ROMbasic.ASM):01069 LADC6     BEQ  LADEA          RETURN IF END OF LINE (RTS - was BEQ LAE40) 
E0A1 4D               (                    ROMbasic.ASM):01070           TSTA                CHECK FOR TOKEN - BIT 7 SET (NEGATIVE) 
E0A2 102A01B8         (                    ROMbasic.ASM):01071           LBPL LET            BRANCH IF NOT A TOKEN - GO DO A ‘LET’ WHICH 
                      (                    ROMbasic.ASM):01072 ;                             IS THE ‘DEFAULT’ TOKEN FOR MICROSOFT BASIC 
E0A6 81FF             (                    ROMbasic.ASM):01073           CMPA #$FF           SECONDARY TOKEN 
E0A8 270F             (                    ROMbasic.ASM):01074           BEQ  SECTOK          
E0AA 819E             (                    ROMbasic.ASM):01075           CMPA #TOK_HIGH_EXEC SKIPF TOKEN - HIGHEST EXECUTABLE COMMAND IN BASIC 
E0AC 22C9             (                    ROMbasic.ASM):01076           BHI  LADB1          ‘SYNTAX ERROR’ IF NON-EXECUTABLE TOKEN 
E0AE BEDC18           (                    ROMbasic.ASM):01077           LDX  COMVEC+3       GET ADDRESS OF BASIC’S COMMAND TABLE 
E0B1 48               (                    ROMbasic.ASM):01078 LADD4     ASLA                X2 (2 BYTE/JUMP ADDRESS) & DISCARD BIT 7 
E0B2 1F89             (                    ROMbasic.ASM):01079           TFR  A,B            SAVE COMMAND OFFSET IN ACCB 
E0B4 3A               (                    ROMbasic.ASM):01080           ABX                 NON X POINTS TO COMMAND JUMP ADDR 
E0B5 9D7C             (                    ROMbasic.ASM):01081           JSR  GETNCH         GET AN INPUT CHAR 
                      (                    ROMbasic.ASM):01082 ;                              
                      (                    ROMbasic.ASM):01083 ; HERE IS WHERE WE BRANCH TO DO A ‘COMMAND’                      
E0B7 6E94             (                    ROMbasic.ASM):01084           JMP  [,X]           GO DO A COMMAND 
                      (                    ROMbasic.ASM):01085 SECTOK                         
                      (                    ROMbasic.ASM):01086 ; THE ONLY SECONDARY TOKEN THAT CAN ALSO BE AN EXECUTABLE IS                      
                      (                    ROMbasic.ASM):01087 ; THE MID$ REPLACEMENT STATEMENT. SO SPECIAL-CASE CHECK DONE HERE                      
E0B9 9D7C             (                    ROMbasic.ASM):01088           JSR  GETNCH         GET AN INPUT CHAR 
E0BB 8197             (                    ROMbasic.ASM):01089           CMPA #TOK_MID       TOKEN FOR "MID$" 
E0BD 102714F0         (                    ROMbasic.ASM):01090           LBEQ L86D6          PROCESS MID$ REPLACEMENT 
E0C1 7EE528           (                    ROMbasic.ASM):01091           JMP  LB277          SYNTAX ERROR 
                      (                    ROMbasic.ASM):01092                                
                      (                    ROMbasic.ASM):01093 ;                              
                      (                    ROMbasic.ASM):01094 ; RESTORE                      
E0C4 9E19             (                    ROMbasic.ASM):01095 RESTOR    LDX  TXTTAB         BEGINNING OF PROGRAM ADDRESS 
E0C6 301F             (                    ROMbasic.ASM):01096           LEAX -1,X           MOVE TO ONE BYTE BEFORE PROGRAM 
E0C8 9F33             (                    ROMbasic.ASM):01097 LADE8     STX  DATPTR         SAVE NEW DATA POINTER 
E0CA 39               (                    ROMbasic.ASM):01098 LADEA     RTS                  
                      (                    ROMbasic.ASM):01099 ;                              
                      (                    ROMbasic.ASM):01100 ; BREAK CHECK                      
E0CB BDDB05           (                    ROMbasic.ASM):01101 LADEB     JSR  KEYIN          GET A KEYSTROKE ENTRY 
E0CE 270A             (                    ROMbasic.ASM):01102           BEQ  LADFA          RETURN IF NO INPUT 
E0D0 8103             (                    ROMbasic.ASM):01103 LADF0     CMPA #3             CONTROL C? (BREAK) 
E0D2 2712             (                    ROMbasic.ASM):01104           BEQ  STOP           YES 
E0D4 8113             (                    ROMbasic.ASM):01105           CMPA #$13           CONTROL S? (PAUSE) 
E0D6 2703             (                    ROMbasic.ASM):01106           BEQ  LADFB          YES 
E0D8 9773             (                    ROMbasic.ASM):01107           STA  IKEYIM         SAVE KEYSTROKE IN INKEY IMAGE 
E0DA 39               (                    ROMbasic.ASM):01108 LADFA     RTS                  
E0DB BDDB05           (                    ROMbasic.ASM):01109 LADFB     JSR  KEYIN          GET A KEY 
E0DE 27FB             (                    ROMbasic.ASM):01110           BEQ  LADFB          BRANCH IF NO KEY DOWN 
E0E0 20EE             (                    ROMbasic.ASM):01111           BRA  LADF0          CONTINUE - DO A BREAK CHECK 
                      (                    ROMbasic.ASM):01112 ;                              
                      (                    ROMbasic.ASM):01113 ; END                          
E0E2 9D82             (                    ROMbasic.ASM):01114 END       JSR  GETCCH         GET CURRENT INPUT CHAR 
E0E4 2002             (                    ROMbasic.ASM):01115           BRA  LAE0B           
                      (                    ROMbasic.ASM):01116 ;                              
                      (                    ROMbasic.ASM):01117 ; STOP                         
E0E6 1A01             (                    ROMbasic.ASM):01118 STOP      ORCC #$01           SET CARRY FLAG 
E0E8 2631             (                    ROMbasic.ASM):01119 LAE0B     BNE  LAE40          BRANCH IF ARGUMENT EXISTS 
E0EA 9E83             (                    ROMbasic.ASM):01120           LDX  CHARAD         * SAVE CURRENT POSITION OF 
E0EC 9F2F             (                    ROMbasic.ASM):01121           STX  TINPTR         * BASIC’S INPUT POINTER 
E0EE 0600             (                    ROMbasic.ASM):01122 LAE11     ROR  ENDFLG         ROTATE CARRY INTO BIT 7 OF STOP/END FLAG 
E0F0 3262             (                    ROMbasic.ASM):01123           LEAS 2,S            PURGE RETURN ADDRESS OFF STACK 
E0F2 9E68             (                    ROMbasic.ASM):01124 LAE15     LDX  CURLIN         GET CURRENT LINE NUMBER 
E0F4 8CFFFF           (                    ROMbasic.ASM):01125           CMPX #$FFFF         DIRECT MODE? 
E0F7 2706             (                    ROMbasic.ASM):01126           BEQ  LAE22          YES 
E0F9 9F29             (                    ROMbasic.ASM):01127           STX  OLDTXT         SAVE CURRENT LINE NUMBER 
E0FB 9E2F             (                    ROMbasic.ASM):01128           LDX  TINPTR         * GET AND SAVE CURRENT POSITION 
E0FD 9F2D             (                    ROMbasic.ASM):01129           STX  OLDPTR         * OF BASIC’S INPUT POINTER 
                      (                    ROMbasic.ASM):01130 LAE22                          
E0FF 8EDED6           (                    ROMbasic.ASM):01131           LDX  #LABF2-1       POINT TO CR, ‘BREAK’ MESSAGE 
E102 0D00             (                    ROMbasic.ASM):01132           TST  ENDFLG         CHECK STOP/END FLAG 
E104 102AFE42         (                    ROMbasic.ASM):01133           LBPL LAC73          BRANCH TO MAIN LOOP OF BASIC IF END 
E108 7EDF3F           (                    ROMbasic.ASM):01134           JMP  LAC68          PRINT ‘BREAK AT ####’ AND GO TO 
                      (                    ROMbasic.ASM):01135 ;                             BASIC’S MAIN LOOP IF ‘STOP’ 
                      (                    ROMbasic.ASM):01136                                
                      (                    ROMbasic.ASM):01137 ; CONT                         
E10B 260E             (                    ROMbasic.ASM):01138 CONT      BNE  LAE40          RETURN IF ARGUMENT GIVEN 
E10D C620             (                    ROMbasic.ASM):01139           LDB  #2*16          ‘CAN’T CONTINUE’ ERROR 
E10F 9E2D             (                    ROMbasic.ASM):01140           LDX  OLDPTR         GET CONTINUE ADDRESS (INPUT POINTER) 
E111 1027FE16         (                    ROMbasic.ASM):01141           LBEQ LAC46          ‘CN’ ERROR IF CONTINUE ADDRESS = 0 
E115 9F83             (                    ROMbasic.ASM):01142           STX  CHARAD         RESET BASIC’S INPUT POINTER 
E117 9E29             (                    ROMbasic.ASM):01143           LDX  OLDTXT         GET LINE NUMBER 
E119 9F68             (                    ROMbasic.ASM):01144           STX  CURLIN         RESET CURRENT LINE NUMBER 
E11B 39               (                    ROMbasic.ASM):01145 LAE40     RTS                  
                      (                    ROMbasic.ASM):01146 ;                              
                      (                    ROMbasic.ASM):01147 ; CLEAR                        
E11C 272C             (                    ROMbasic.ASM):01148 CLEAR     BEQ  LAE6F          BRANCH IF NO ARGUMENT 
E11E BDE692           (                    ROMbasic.ASM):01149           JSR  LB3E6          EVALUATE ARGUMENT 
E121 3406             (                    ROMbasic.ASM):01150           PSHS B,A            SAVE AMOUNT OF STRING SPACE ON STACK 
E123 9E27             (                    ROMbasic.ASM):01151           LDX  MEMSIZ         GET CURRENT TOP OF CLEARED SPACE 
E125 9D82             (                    ROMbasic.ASM):01152           JSR  GETCCH         GET CURRENT INPUT CHARACTER 
E127 270C             (                    ROMbasic.ASM):01153           BEQ  LAE5A          BRANCH IF NO NEW TOP OF CLEARED SPACE 
E129 BDE51E           (                    ROMbasic.ASM):01154           JSR  LB26D          SYNTAX CHECK FOR COMMA 
E12C BDE9E9           (                    ROMbasic.ASM):01155           JSR  LB73D          EVALUATE EXPRESSlON; RETURN VALUE IN X 
E12F 301F             (                    ROMbasic.ASM):01156           LEAX -1,X           X = TOP OF CLEARED SPACE 
E131 9C71             (                    ROMbasic.ASM):01157           CMPX TOPRAM         COMPARE TO TOP OF RAM 
E133 2218             (                    ROMbasic.ASM):01158           BHI  LAE72          ‘OM’ ERROR IF > TOP OF RAM 
E135 1F10             (                    ROMbasic.ASM):01159 LAE5A     TFR  X,D            ACCD = TOP OF CLEARED SPACE 
E137 A3E1             (                    ROMbasic.ASM):01160           SUBD ,S++           SUBTRACT OUT AMOUNT OF CLEARED SPACE 
E139 2512             (                    ROMbasic.ASM):01161           BCS  LAE72          ‘OM’ ERROR IF FREE MEM < 0 
E13B 1F03             (                    ROMbasic.ASM):01162           TFR  D,U            U = BOTTOM OF CLEARED SPACE 
E13D 83003A           (                    ROMbasic.ASM):01163           SUBD #STKBUF        SUBTRACT OUT STACK BUFFER 
E140 250B             (                    ROMbasic.ASM):01164           BCS  LAE72          ‘OM’ ERROR IF FREE MEM < 0 
E142 931B             (                    ROMbasic.ASM):01165           SUBD VARTAB         SUBTRACT OUT START OF VARIABLES 
E144 2507             (                    ROMbasic.ASM):01166           BCS  LAE72          ‘OM’ ERROR IF FREE MEM < 0 
E146 DF21             (                    ROMbasic.ASM):01167           STU  FRETOP         SAVE NEW BOTTOM OF CLEARED SPACE 
E148 9F27             (                    ROMbasic.ASM):01168           STX  MEMSIZ         SAVE NEW TOP OF CLEARED SPACE 
E14A 7EDFEF           (                    ROMbasic.ASM):01169 LAE6F     JMP  LAD26          ERASE ALL VARIABLES, INITIALIZE POINTERS, ETC 
E14D 7EDF29           (                    ROMbasic.ASM):01170 LAE72     JMP  LAC44          ‘OM’ ERROR 
                      (                    ROMbasic.ASM):01171 ;                              
                      (                    ROMbasic.ASM):01172 ; RUN                          
E150 9D82             (                    ROMbasic.ASM):01173 RUN       JSR  GETCCH         * GET CURRENT INPUT CHARACTER 
E152 1027FE94         (                    ROMbasic.ASM):01174           LBEQ LAD21          * IF NO LINE NUMBER 
E156 BDDFEF           (                    ROMbasic.ASM):01175           JSR  LAD26          ERASE ALL VARIABLES 
E159 2019             (                    ROMbasic.ASM):01176           BRA  LAE9F          ‘GOTO’ THE RUN ADDRESS 
                      (                    ROMbasic.ASM):01177 ;                              
                      (                    ROMbasic.ASM):01178 ; GO                           
E15B 1F89             (                    ROMbasic.ASM):01179 GO        TFR  A,B            SAVE INPUT CHARACTER IN ACCB 
E15D 9D7C             (                    ROMbasic.ASM):01180 LAE88     JSR  GETNCH         GET A CHARACTER FROM BASIC 
E15F C1A0             (                    ROMbasic.ASM):01181           CMPB #TOK_TO        ‘TO’ TOKEN 
E161 2716             (                    ROMbasic.ASM):01182           BEQ  LAEA4          BRANCH IF GOTO 
E163 C1A1             (                    ROMbasic.ASM):01183           CMPB #TOK_SUB       ‘SUB’ TOKEN 
E165 2645             (                    ROMbasic.ASM):01184           BNE  LAED7          ‘SYNTAX ERROR’ IF NEITHER 
E167 C603             (                    ROMbasic.ASM):01185           LDB  #3             =ROOM FOR 6 
E169 BDDF18           (                    ROMbasic.ASM):01186           JSR  LAC33          =BYTES ON STACK? 
E16C DE83             (                    ROMbasic.ASM):01187           LDU  CHARAD         * SAVE CURRENT BASIC INPUT POINTER, LINE 
E16E 9E68             (                    ROMbasic.ASM):01188           LDX  CURLIN         * NUMBER AND SUB TOKEN ON STACK 
E170 86A1             (                    ROMbasic.ASM):01189           LDA  #TOK_SUB       * 
E172 3452             (                    ROMbasic.ASM):01190           PSHS U,X,A          * 
E174 8D03             (                    ROMbasic.ASM):01191 LAE9F     BSR  LAEA4          GO DO A ‘GOTO’ 
E176 7EE067           (                    ROMbasic.ASM):01192           JMP  LAD9E          JUMP BACK TO BASIC’S MAIN LOOP 
                      (                    ROMbasic.ASM):01193 ; GOTO                         
E179 9D82             (                    ROMbasic.ASM):01194 LAEA4     JSR  GETCCH         GET CURRENT INPUT CHAR 
E17B BDE23C           (                    ROMbasic.ASM):01195           JSR  LAF67          GET LINE NUMBER TO BINARY IN BINVAL 
E17E 8D40             (                    ROMbasic.ASM):01196           BSR  LAEEB          ADVANCE BASIC’S POINTER TO END OF LINE 
E180 3001             (                    ROMbasic.ASM):01197           LEAX $01,X          POINT TO START OF NEXT LINE 
E182 DC2B             (                    ROMbasic.ASM):01198           LDD  BINVAL         GET THE LINE NUMBER TO RUN 
E184 109368           (                    ROMbasic.ASM):01199           CMPD CURLIN         COMPARE TO CURRENT LINE NUMBER 
E187 2202             (                    ROMbasic.ASM):01200           BHI  LAEB6          IF REO’D LINE NUMBER IS > CURRENT LINE NUMBER, 
                      (                    ROMbasic.ASM):01201 ;              DON’T START LOOKING FROM  
                      (                    ROMbasic.ASM):01202 ;              START OF PROGRAM  
E189 9E19             (                    ROMbasic.ASM):01203           LDX  TXTTAB         BEGINNING OF PROGRAM 
E18B BDDFCE           (                    ROMbasic.ASM):01204 LAEB6     JSR  LAD05          GO FIND A LINE NUMBER 
E18E 2517             (                    ROMbasic.ASM):01205           BCS  LAED2          ‘UNDEFINED LINE NUMBER’ 
E190 301F             (                    ROMbasic.ASM):01206 LAEBB     LEAX -1,X           MOVE BACK TO JUST BEFORE START OF LINE 
E192 9F83             (                    ROMbasic.ASM):01207           STX  CHARAD         RESET BASIC’S INPUT POINTER 
E194 39               (                    ROMbasic.ASM):01208 LAEBF     RTS                  
                      (                    ROMbasic.ASM):01209 ;                              
                      (                    ROMbasic.ASM):01210 ; RETURN                       
E195 26FD             (                    ROMbasic.ASM):01211 RETURN    BNE  LAEBF          EXIT ROUTINE IF ARGUMENT GIVEN 
E197 86FF             (                    ROMbasic.ASM):01212           LDA  #$FF           * PUT AN ILLEGAL VARIABLE NAME IN FIRST BYTE OF 
E199 973B             (                    ROMbasic.ASM):01213           STA  VARDES         * VARDES WHICH WILL CAUSE ‘FOR/NEXT’ DATA ON THE 
                      (                    ROMbasic.ASM):01214 ;              STACK TO BE IGNORED  
E19B BDDEDE           (                    ROMbasic.ASM):01215           JSR  LABF9          CHECK FOR RETURN DATA ON THE STACK 
E19E 1F14             (                    ROMbasic.ASM):01216           TFR  X,S            RESET STACK POINTER - PURGE TWO RETURN ADDRESSES 
                      (                    ROMbasic.ASM):01217 ;              FROM THE STACK  
E1A0 8121             (                    ROMbasic.ASM):01218           CMPA #TOK_SUB-$80   SUB TOKEN - $80 
E1A2 270B             (                    ROMbasic.ASM):01219           BEQ  LAEDA          BRANCH IF ‘RETURN’ FROM SUBROUTINE 
E1A4 C604             (                    ROMbasic.ASM):01220           LDB  #2*2           ERROR #2 ‘RETURN WITHOUT GOSUB’ 
E1A6 8C               (                    ROMbasic.ASM):01221           FCB  SKP2           SKIP TWO BYTES 
E1A7 C60E             (                    ROMbasic.ASM):01222 LAED2     LDB  #7*2           ERROR #7 ‘UNDEFINED LINE NUMBER’ 
E1A9 7EDF2B           (                    ROMbasic.ASM):01223           JMP  LAC46          JUMP TO ERROR HANDLER 
E1AC 7EE528           (                    ROMbasic.ASM):01224 LAED7     JMP  LB277          ‘SYNTAX ERROR’ 
E1AF 3552             (                    ROMbasic.ASM):01225 LAEDA     PULS A,X,U          * RESTORE VALUES OF CURRENT LINE NUMBER AND 
E1B1 9F68             (                    ROMbasic.ASM):01226           STX  CURLIN         * BASIC’S INPUT POINTER FOR THIS SUBROUTINE 
E1B3 DF83             (                    ROMbasic.ASM):01227           STU  CHARAD         * AND LOAD ACCA WITH SUB TOKEN ($A6) 
                      (                    ROMbasic.ASM):01228 ;                              
                      (                    ROMbasic.ASM):01229 ; DATA                         
E1B5 8D06             (                    ROMbasic.ASM):01230 DATA      BSR  LAEE8          MOVE INPUT POINTER TO END OF SUBLINE OR LINE 
E1B7 8C               (                    ROMbasic.ASM):01231           FCB  SKP2           SKIP 2 BYTES 
                      (                    ROMbasic.ASM):01232                                
                      (                    ROMbasic.ASM):01233 ; REM, ELSE                      
                      (                    ROMbasic.ASM):01234 ELSE                           
E1B8 8D06             (                    ROMbasic.ASM):01235 REM       BSR  LAEEB          MOVE INPUT POINTER TO END OF LINE 
E1BA 9F83             (                    ROMbasic.ASM):01236           STX  CHARAD         RESET BASIC’S INPUT POINTER 
E1BC 39               (                    ROMbasic.ASM):01237 LAEE7     RTS                  
                      (                    ROMbasic.ASM):01238 ; ADVANCE INPUT POINTER TO END OF SUBLINE OR LINE                      
E1BD C63A             (                    ROMbasic.ASM):01239 LAEE8     LDB  #':            COLON = SUBLINE TERMINATOR CHARACTER 
E1BF 86               (                    ROMbasic.ASM):01240 LAEEA     FCB  SKP1LD         SKPILD SKIP ONE BYTE; LDA #$5F 
                      (                    ROMbasic.ASM):01241 ; ADVANCE BASIC’S INPUT POINTER TO END OF                      
                      (                    ROMbasic.ASM):01242 ; LINE - RETURN ADDRESS OF END OF LINE+1 IN X                      
E1C0 5F               (                    ROMbasic.ASM):01243 LAEEB     CLRB                0 = LINE TERMINATOR CHARACTER 
E1C1 D701             (                    ROMbasic.ASM):01244           STB  CHARAC         TEMP STORE PRIMARY TERMINATOR CHARACTER 
E1C3 5F               (                    ROMbasic.ASM):01245           CLRB                0 (END OF LINE) = ALTERNATE TERM. CHAR. 
E1C4 9E83             (                    ROMbasic.ASM):01246           LDX  CHARAD         LOAD X W/BASIC’S INPUT POINTER 
E1C6 1F98             (                    ROMbasic.ASM):01247 LAEF1     TFR  B,A            * CHANGE TERMINATOR CHARACTER 
E1C8 D601             (                    ROMbasic.ASM):01248           LDB  CHARAC         * FROM ACCB TO CHARAC - SAVE OLD TERMINATOR 
                      (                    ROMbasic.ASM):01249 ;         IN   CHARAC          
E1CA 9701             (                    ROMbasic.ASM):01250           STA  CHARAC         SWAP PRIMARY AND SECONDARY TERMINATORS 
E1CC A684             (                    ROMbasic.ASM):01251 LAEF7     LDA  ,X             GET NEXT INPUT CHARACTER 
E1CE 27EC             (                    ROMbasic.ASM):01252           BEQ  LAEE7          RETURN IF 0 (END OF LINE) 
E1D0 3404             (                    ROMbasic.ASM):01253           PSHS B              SAVE TERMINATOR ON STACK 
E1D2 A1E0             (                    ROMbasic.ASM):01254           CMPA ,S+            COMPARE TO INPUT CHARACTER 
E1D4 27E6             (                    ROMbasic.ASM):01255           BEQ  LAEE7          RETURN IF EQUAL 
E1D6 3001             (                    ROMbasic.ASM):01256           LEAX 1,X            MOVE POINTER UP ONE 
E1D8 8122             (                    ROMbasic.ASM):01257           CMPA #'"            CHECK FOR DOUBLE QUOTES 
E1DA 27EA             (                    ROMbasic.ASM):01258           BEQ  LAEF1          BRANCH IF " - TOGGLE TERMINATOR CHARACTERS 
E1DC 4C               (                    ROMbasic.ASM):01259           INCA                * CHECK FOR $FF AND BRANCH IF 
E1DD 2602             (                    ROMbasic.ASM):01260           BNE  LAF0C          * NOT SECONDARY TOKEN 
E1DF 3001             (                    ROMbasic.ASM):01261           LEAX 1,X            MOVE INPUT POINTER 1 MORE IF SECONDARY 
E1E1 8186             (                    ROMbasic.ASM):01262 LAF0C     CMPA #TOK_IF+1      TOKEN FOR IF? 
E1E3 26E7             (                    ROMbasic.ASM):01263           BNE  LAEF7          NO - GET ANOTHER INPUT CHARACTER 
E1E5 0C04             (                    ROMbasic.ASM):01264           INC  IFCTR          INCREMENT IF COUNTER - KEEP TRACK OF HOW MANY 
                      (                    ROMbasic.ASM):01265 ;                             ‘IF’ STATEMENTS ARE NESTED IN ONE LINE 
E1E7 20E3             (                    ROMbasic.ASM):01266           BRA  LAEF7          GET ANOTHER INPUT CHARACTER 
                      (                    ROMbasic.ASM):01267                                
                      (                    ROMbasic.ASM):01268 ; IF                           
E1E9 BDE3F2           (                    ROMbasic.ASM):01269 IF        JSR  LB141          EVALUATE NUMERIC EXPRESSION 
E1EC 9D82             (                    ROMbasic.ASM):01270           JSR  GETCCH         GET CURRENT INPUT CHARACTER 
E1EE 8181             (                    ROMbasic.ASM):01271           CMPA #TOK_GO        TOKEN FOR GO 
E1F0 2705             (                    ROMbasic.ASM):01272           BEQ  LAF22          TREAT ‘GO’ THE SAME AS ‘THEN’ 
E1F2 C6A2             (                    ROMbasic.ASM):01273           LDB  #TOK_THEN      TOKEN FOR THEN 
E1F4 BDE520           (                    ROMbasic.ASM):01274           JSR  LB26F          DO A SYNTAX CHECK ON ACCB 
E1F7 964F             (                    ROMbasic.ASM):01275 LAF22     LDA  FP0EXP         CHECK FOR TRUE/FALSE - FALSE IF FPA0 EXPONENT = ZERO 
E1F9 2613             (                    ROMbasic.ASM):01276           BNE  LAF39          BRANCH IF CONDITION TRUE 
E1FB 0F04             (                    ROMbasic.ASM):01277           CLR  IFCTR          CLEAR FLAG - KEEP TRACK OF WHICH NESTED ELSE STATEMENT 
                      (                    ROMbasic.ASM):01278 ;                             TO SEARCH FOR IN NESTED ‘IF’ LOOPS 
E1FD 8DB6             (                    ROMbasic.ASM):01279 LAF28     BSR  DATA           MOVE BASIC’S POINTER TO END OF SUBLINE 
E1FF 4D               (                    ROMbasic.ASM):01280           TSTA                * CHECK TO SEE IF END OF LINE OR SUBLINE 
E200 27BA             (                    ROMbasic.ASM):01281           BEQ  LAEE7          * AND RETURN IF END OF LINE 
E202 9D7C             (                    ROMbasic.ASM):01282           JSR  GETNCH         GET AN INPUT CHARACTER FROM BASIC 
E204 8184             (                    ROMbasic.ASM):01283           CMPA #TOK_ELSE      TOKEN FOR ELSE 
E206 26F5             (                    ROMbasic.ASM):01284           BNE  LAF28          IGNORE ALL DATA EXCEPT ‘ELSE’ UNTIL 
                      (                    ROMbasic.ASM):01285 ;                             END OF LINE (ZERO BYTE) 
E208 0A04             (                    ROMbasic.ASM):01286           DEC  IFCTR          CHECK TO SEE IF YOU MUST SEARCH ANOTHER SUBLINE 
E20A 2AF1             (                    ROMbasic.ASM):01287           BPL  LAF28          BRANCH TO SEARCH ANOTHER SUBLINE FOR ‘ELSE’ 
E20C 9D7C             (                    ROMbasic.ASM):01288           JSR  GETNCH         GET AN INPUT CHARACTER FROM BASIC 
E20E 9D82             (                    ROMbasic.ASM):01289 LAF39     JSR  GETCCH         GET CURRENT INPUT CHARACTER 
E210 1025FF65         (                    ROMbasic.ASM):01290           LBCS LAEA4          BRANCH TO ‘GOTO’ IF NUMERIC CHARACTER 
E214 7EE09F           (                    ROMbasic.ASM):01291           JMP  LADC6          RETURN TO MAIN INTERPRETATION LOOP 
                      (                    ROMbasic.ASM):01292                                
                      (                    ROMbasic.ASM):01293 ; ON                           
E217 BDE9B7           (                    ROMbasic.ASM):01294 ON        JSR  LB70B          EVALUATE EXPRESSION 
E21A C681             (                    ROMbasic.ASM):01295           LDB  #TOK_GO        TOKEN FOR GO 
E21C BDE520           (                    ROMbasic.ASM):01296           JSR  LB26F          SYNTAX CHECK FOR GO 
E21F 3402             (                    ROMbasic.ASM):01297           PSHS A              SAVE NEW TOKEN (TO,SUB) 
E221 81A1             (                    ROMbasic.ASM):01298           CMPA #TOK_SUB       TOKEN FOR SUB? 
E223 2704             (                    ROMbasic.ASM):01299           BEQ  LAF54          YES 
E225 81A0             (                    ROMbasic.ASM):01300           CMPA #TOK_TO        TOKEN FOR TO? 
E227 2683             (                    ROMbasic.ASM):01301 LAF52     BNE  LAED7          ‘SYNTAX’ ERROR IF NOT ‘SUB’ OR ‘TO’ 
E229 0A53             (                    ROMbasic.ASM):01302 LAF54     DEC  FPA0+3         DECREMENT IS BYTE OF MANTISSA OF FPA0 - THIS 
                      (                    ROMbasic.ASM):01303 ;                             IS THE ARGUMENT OF THE ‘ON’ STATEMENT 
E22B 2605             (                    ROMbasic.ASM):01304           BNE  LAF5D          BRANCH IF NOT AT THE PROPER GOTO OR GOSUB LINE NUMBER 
E22D 3504             (                    ROMbasic.ASM):01305           PULS B              GET BACK THE TOKEN FOLLOWING ‘GO’ 
E22F 7EE15D           (                    ROMbasic.ASM):01306           JMP  LAE88          GO DO A ‘GOTO’ OR ‘GOSUB’ 
E232 9D7C             (                    ROMbasic.ASM):01307 LAF5D     JSR  GETNCH         GET A CHARACTER FROM BASIC 
E234 8D06             (                    ROMbasic.ASM):01308           BSR  LAF67          CONVERT BASIC LINE NUMBER TO BINARY 
E236 812C             (                    ROMbasic.ASM):01309           CMPA #',            IS CHARACTER FOLLOWING LINE NUMBER A COMMA? 
E238 27EF             (                    ROMbasic.ASM):01310           BEQ  LAF54          YES 
E23A 3584             (                    ROMbasic.ASM):01311           PULS B,PC           IF NOT, FALL THROUGH TO NEXT COMMAND 
E23C 9E74             (                    ROMbasic.ASM):01312 LAF67     LDX  ZERO           DEFAULT LINE NUMBER OF ZERO 
E23E 9F2B             (                    ROMbasic.ASM):01313           STX  BINVAL         SAVE IT IN BINVAL 
                      (                    ROMbasic.ASM):01314 ;                              
                      (                    ROMbasic.ASM):01315 ; CONVERT LINE NUMBER TO BINARY - RETURN VALUE IN BINVAL                      
                      (                    ROMbasic.ASM):01316 ;                              
E240 2461             (                    ROMbasic.ASM):01317 LAF6B     BCC  LAFCE          RETURN IF NOT NUMERIC CHARACTER 
E242 8030             (                    ROMbasic.ASM):01318           SUBA #'0            MASK OFF ASCII 
E244 9701             (                    ROMbasic.ASM):01319           STA  CHARAC         SAVE DIGIT IN VO1 
E246 DC2B             (                    ROMbasic.ASM):01320           LDD  BINVAL         GET ACCUMULATED LINE NUMBER VALUE 
E248 8118             (                    ROMbasic.ASM):01321           CMPA #24            LARGEST LINE NUMBER IS $F9FF (63999) - 
                      (                    ROMbasic.ASM):01322 ;         (24*256+255)*10+9                 
E24A 22DB             (                    ROMbasic.ASM):01323           BHI  LAF52          ‘SYNTAX’ ERROR IF TOO BIG 
                      (                    ROMbasic.ASM):01324 ; MULT ACCD X 10                      
E24C 58               (                    ROMbasic.ASM):01325           ASLB                * 
E24D 49               (                    ROMbasic.ASM):01326           ROLA                * TIMES 2 
E24E 58               (                    ROMbasic.ASM):01327           ASLB                = 
E24F 49               (                    ROMbasic.ASM):01328           ROLA                = TIMES 4 
E250 D32B             (                    ROMbasic.ASM):01329           ADDD BINVAL         ADD 1 = TIMES 5 
E252 58               (                    ROMbasic.ASM):01330           ASLB                * 
E253 49               (                    ROMbasic.ASM):01331           ROLA                * TIMES 10 
E254 DB01             (                    ROMbasic.ASM):01332           ADDB CHARAC         ADD NEXT DIGIT 
E256 8900             (                    ROMbasic.ASM):01333           ADCA #0             PROPAGATE CARRY 
E258 DD2B             (                    ROMbasic.ASM):01334           STD  BINVAL         SAVE NEW ACCUMULATED LINE NUMBER 
E25A 9D7C             (                    ROMbasic.ASM):01335           JSR  GETNCH         GET NEXT CHARACTER FROM BASIC 
E25C 20E2             (                    ROMbasic.ASM):01336           BRA  LAF6B          LOOP- PROCESS NEXT DIGIT 
                      (                    ROMbasic.ASM):01337 ;                              
                      (                    ROMbasic.ASM):01338 ; LET (EXBAS)                      
                      (                    ROMbasic.ASM):01339 ; EVALUATE A NON-TOKEN EXPRESSION                      
                      (                    ROMbasic.ASM):01340 ; TARGET = REPLACEMENT                      
E25E BDE603           (                    ROMbasic.ASM):01341 LET       JSR  LB357          FIND TARGET VARIABLE DESCRIPTOR 
E261 9F3B             (                    ROMbasic.ASM):01342           STX  VARDES         SAVE DESCRIPTOR ADDRESS OF 1ST EXPRESSION 
E263 C6AE             (                    ROMbasic.ASM):01343           LDB  #TOK_EQUALS    TOKEN FOR "=" 
E265 BDE520           (                    ROMbasic.ASM):01344           JSR  LB26F          DO A SYNTAX CHECK FOR ‘=‘ 
E268 9606             (                    ROMbasic.ASM):01345           LDA  VALTYP         * GET VARIABLE TYPE AND 
E26A 3402             (                    ROMbasic.ASM):01346           PSHS A              * SAVE ON THE STACK 
E26C BDE407           (                    ROMbasic.ASM):01347           JSR  LB156          EVALUATE EXPRESSION 
E26F 3502             (                    ROMbasic.ASM):01348           PULS A              * REGET VARIABLE TYPE OF 1ST EXPRESSION AND 
E271 46               (                    ROMbasic.ASM):01349           RORA                * SET CARRY IF STRING 
E272 BDE3F9           (                    ROMbasic.ASM):01350           JSR  LB148          TYPE CHECK-TM ERROR IF VARIABLE TYPES ON 
                      (                    ROMbasic.ASM):01351 ;                             BOTH SIDES OF EQUALS SIGN NOT THE SAME 
E275 10270C2B         (                    ROMbasic.ASM):01352           LBEQ LBC33          GO PUT FPA0 INTO VARIABLE DESCRIPTOR IF NUMERIC 
                      (                    ROMbasic.ASM):01353 ; MOVE A STRING WHOSE DESCRIPTOR IS LOCATED AT                      
                      (                    ROMbasic.ASM):01354 ; FPA0+2 INTO THE STRING SPACE. TRANSFER THE                      
                      (                    ROMbasic.ASM):01355 ; DESCRIPTOR ADDRESS TO THE ADDRESS IN VARDES                      
                      (                    ROMbasic.ASM):01356 ; DON’T MOVE THE STRING IF IT IS ALREADY IN THE                      
                      (                    ROMbasic.ASM):01357 ; STRING SPACE. REMOVE DESCRIPTOR FROM STRING                      
                      (                    ROMbasic.ASM):01358 ; STACK IF IT IS LAST ONE ON THE STACK                      
E279 9E52             (                    ROMbasic.ASM):01359 LAFA4     LDX  FPA0+2         POINT X TO DESCRIPTOR OF REPLACEMENT STRING 
E27B DC21             (                    ROMbasic.ASM):01360           LDD  FRETOP         LOAD ACCD WITH START OF STRING SPACE 
E27D 10A302           (                    ROMbasic.ASM):01361           CMPD 2,X            IS THE STRING IN STRING SPACE? 
E280 2411             (                    ROMbasic.ASM):01362           BCC  LAFBE          BRANCH IF IT’S NOT IN THE STRING SPACE 
E282 9C1B             (                    ROMbasic.ASM):01363           CMPX VARTAB         COMPARE DESCRIPTOR ADDRESS TO START OF VARIABLES 
E284 250D             (                    ROMbasic.ASM):01364           BCS  LAFBE          BRANCH IF DESCRIPTOR ADDRESS NOT IN VARIABLES 
E286 E684             (                    ROMbasic.ASM):01365 LAFB1     LDB  ,X             GET LENGTH OF REPLACEMENT STRING 
E288 BDE7B9           (                    ROMbasic.ASM):01366           JSR  LB50D          RESERVE ACCB BYTES OF STRING SPACE 
E28B 9E4D             (                    ROMbasic.ASM):01367           LDX  V4D            GET DESCRIPTOR ADDRESS BACK 
E28D BDE8EF           (                    ROMbasic.ASM):01368           JSR  LB643          MOVE STRING INTO STRING SPACE 
E290 8E0056           (                    ROMbasic.ASM):01369           LDX  #STRDES        POINT X TO TEMP STRING DESCRIPTOR ADDRESS 
E293 9F4D             (                    ROMbasic.ASM):01370 LAFBE     STX  V4D            SAVE STRING DESCRIPTOR ADDRESS IN V4D 
E295 BDE921           (                    ROMbasic.ASM):01371           JSR  LB675          REMOVE STRING DESCRIPTOR IF LAST ONE 
                      (                    ROMbasic.ASM):01372 ;                             ON STRING STACK  
E298 DE4D             (                    ROMbasic.ASM):01373           LDU  V4D            POINT U TO REPLACEMENT DESCRIPTOR ADDRESS 
E29A 9E3B             (                    ROMbasic.ASM):01374           LDX  VARDES         GET TARGET DESCRIPTOR ADDRESS 
E29C 3726             (                    ROMbasic.ASM):01375           PULU A,B,Y          GET LENGTH AND START OF REPLACEMENT STRING 
E29E A784             (                    ROMbasic.ASM):01376           STA  ,X             * SAVE STRING LENGTH AND START IN 
E2A0 10AF02           (                    ROMbasic.ASM):01377           STY  2,X            * TARGET DESCRIPTOR LOCATION 
E2A3 39               (                    ROMbasic.ASM):01378 LAFCE     RTS                  
                      (                    ROMbasic.ASM):01379                                
E2A4 3F5245444F       (                    ROMbasic.ASM):01380 LAFCF     FCC  "?REDO"        ?REDO MESSAGE 
E2A9 0D00             (                    ROMbasic.ASM):01381           FCB  CR,$00          
                      (                    ROMbasic.ASM):01382                                
                      (                    ROMbasic.ASM):01383 LAFD6                          
E2AB 7EDF2B           (                    ROMbasic.ASM):01384 LAFDC     JMP  LAC46          JMP TO ERROR HANDLER 
E2AE 9609             (                    ROMbasic.ASM):01385 LAFDF     LDA  INPFLG         = GET THE INPUT FLAG AND BRANCH 
E2B0 2707             (                    ROMbasic.ASM):01386           BEQ  LAFEA          = IF ‘INPUT’ 
E2B2 9E31             (                    ROMbasic.ASM):01387           LDX  DATTXT         * GET LINE NUMBER WHERE THE ERROR OCCURRED 
E2B4 9F68             (                    ROMbasic.ASM):01388           STX  CURLIN         * AND USE IT AS THE CURRENT LINE NUMBER 
E2B6 7EE528           (                    ROMbasic.ASM):01389           JMP  LB277          ‘SYNTAX ERROR’ 
E2B9 8EE2A3           (                    ROMbasic.ASM):01390 LAFEA     LDX  #LAFCF-1       * POINT X TO ‘?REDO’ AND PRINT 
E2BC BDEC0D           (                    ROMbasic.ASM):01391           JSR  LB99C          * IT ON THE SCREEN 
E2BF 9E2F             (                    ROMbasic.ASM):01392           LDX  TINPTR         = GET THE SAVED ABSOLUTE ADDRESS OF 
E2C1 9F83             (                    ROMbasic.ASM):01393           STX  CHARAD         = INPUT POINTER AND RESTORE IT 
E2C3 39               (                    ROMbasic.ASM):01394           RTS                  
                      (                    ROMbasic.ASM):01395 ;                              
                      (                    ROMbasic.ASM):01396 ; INPUT                        
E2C4 C616             (                    ROMbasic.ASM):01397 INPUT     LDB  #11*2          ‘ID’ ERROR 
E2C6 9E68             (                    ROMbasic.ASM):01398           LDX  CURLIN         GET CURRENT LINE NUMBER 
E2C8 3001             (                    ROMbasic.ASM):01399           LEAX 1,X            ADD ONE 
E2CA 27DF             (                    ROMbasic.ASM):01400           BEQ  LAFDC          ‘ID’ ERROR BRANCH IF DIRECT MODE 
E2CC 8D01             (                    ROMbasic.ASM):01401           BSR  LB00F          GET SOME INPUT DATA - WAS LB002 
E2CE 39               (                    ROMbasic.ASM):01402           RTS                  
E2CF 8122             (                    ROMbasic.ASM):01403 LB00F     CMPA #'"            CHECK FOR PROMPT STRING DELIMITER 
E2D1 260B             (                    ROMbasic.ASM):01404           BNE  LB01E          BRANCH IF NO PROMPT STRING 
E2D3 BDE4F5           (                    ROMbasic.ASM):01405           JSR  LB244          PUT PROMPT STRING ON STRING STACK 
E2D6 C63B             (                    ROMbasic.ASM):01406           LDB  #';            * 
E2D8 BDE520           (                    ROMbasic.ASM):01407           JSR  LB26F          * DO A SYNTAX CHECK FOR SEMICOLON 
E2DB BDEC10           (                    ROMbasic.ASM):01408           JSR  LB99F          PRINT MESSAGE TO CONSOLE OUT 
E2DE 8E00F3           (                    ROMbasic.ASM):01409 LB01E     LDX  #LINBUF        POINT TO BASIC’S LINE BUFFER 
E2E1 6F84             (                    ROMbasic.ASM):01410           CLR  ,X             CLEAR 1ST BYTE - FLAG TO INDICATE NO DATA 
                      (                    ROMbasic.ASM):01411 ;              IN LINE BUFFER  
E2E3 8D06             (                    ROMbasic.ASM):01412           BSR  LB02F          INPUT A STRING TO LINE BUFFER 
E2E5 C62C             (                    ROMbasic.ASM):01413           LDB  #',            * INSERT A COMMA AT THE END 
E2E7 E784             (                    ROMbasic.ASM):01414           STB  ,X             * OF THE LINE INPUT BUFFER 
E2E9 2016             (                    ROMbasic.ASM):01415           BRA  LB049           
                      (                    ROMbasic.ASM):01416 ; FILL BASIC’S LINE INPUT BUFFER CONSOLE IN                      
E2EB BDEC20           (                    ROMbasic.ASM):01417 LB02F     JSR  LB9AF          SEND A "?" TO CONSOLE OUT 
E2EE BDEC1D           (                    ROMbasic.ASM):01418           JSR  LB9AC          SEND A ‘SPACE’ TO CONSOLE OUT 
E2F1 BDDC66           (                    ROMbasic.ASM):01419 LB035     JSR  LA390          GO READ IN A BASIC LINE 
E2F4 2405             (                    ROMbasic.ASM):01420           BCC  LB03F          BRANCH IF ENTER KEY ENDED ENTRY 
E2F6 3264             (                    ROMbasic.ASM):01421           LEAS 4,S            PURGE TWO RETURN ADDRESSES OFF THE STACK 
E2F8 7EE0EE           (                    ROMbasic.ASM):01422           JMP  LAE11          GO DO A ‘STOP’ IF BREAK KEY ENDED LINE ENTRY 
E2FB C62E             (                    ROMbasic.ASM):01423 LB03F     LDB  #2*23          ‘INPUT PAST END OF FILE’ ERROR 
E2FD 39               (                    ROMbasic.ASM):01424           RTS                  
                      (                    ROMbasic.ASM):01425 ;                              
                      (                    ROMbasic.ASM):01426 ; READ                         
E2FE 9E33             (                    ROMbasic.ASM):01427 READ      LDX  DATPTR         GET ‘READ’ START ADDRESS 
E300 86               (                    ROMbasic.ASM):01428           FCB  SKP1LD         SKIP ONE BYTE - LDA #*$4F 
E301 4F               (                    ROMbasic.ASM):01429 LB049     CLRA                ‘INPUT’ ENTRY POINT: INPUT FLAG = 0 
E302 9709             (                    ROMbasic.ASM):01430           STA  INPFLG         SET INPUT FLAG; 0 = INPUT: <> 0 = READ 
E304 9F35             (                    ROMbasic.ASM):01431           STX  DATTMP         SAVE ‘READ’ START ADDRESS/’INPUT’ BUFFER START 
E306 BDE603           (                    ROMbasic.ASM):01432 LB04E     JSR  LB357          EVALUATE A VARIABLE 
E309 9F3B             (                    ROMbasic.ASM):01433           STX  VARDES         SAVE DESCRIPTOR ADDRESS 
E30B 9E83             (                    ROMbasic.ASM):01434           LDX  CHARAD         * GET BASIC’S INPUT POINTER 
E30D 9F2B             (                    ROMbasic.ASM):01435           STX  BINVAL         * AND SAVE IT 
E30F 9E35             (                    ROMbasic.ASM):01436           LDX  DATTMP         GET ‘READ’ ADDRESS START/’INPUT’ BUFFER POINTER 
E311 A684             (                    ROMbasic.ASM):01437           LDA  ,X             GET A CHARACTER FROM THE BASIC PROGRAM 
E313 2609             (                    ROMbasic.ASM):01438           BNE  LB069          BRANCH IF NOT END OF LINE 
E315 9609             (                    ROMbasic.ASM):01439           LDA  INPFLG         * CHECK INPUT FLAG AND BRANCH 
E317 2651             (                    ROMbasic.ASM):01440           BNE  LB0B9          * IF LOOKING FOR DATA (READ) 
                      (                    ROMbasic.ASM):01441 ; NO DATA IN ‘INPUT’ LINE BUFFER AND/OR INPUT                      
                      (                    ROMbasic.ASM):01442 ; NOT COMING FROM SCREEN                      
E319 BDEC20           (                    ROMbasic.ASM):01443           JSR  LB9AF          SEND A '?' TO CONSOLE OUT 
E31C 8DCD             (                    ROMbasic.ASM):01444           BSR  LB02F          FILL INPUT BUFFER FROM CONSOLE IN 
E31E 9F83             (                    ROMbasic.ASM):01445 LB069     STX  CHARAD         RESET BASIC’S INPUT POINTER 
E320 9D7C             (                    ROMbasic.ASM):01446           JSR  GETNCH         GET A CHARACTER FROM BASIC 
E322 D606             (                    ROMbasic.ASM):01447           LDB  VALTYP         * CHECK VARIABLE TYPE AND 
E324 2723             (                    ROMbasic.ASM):01448           BEQ  LB098          * BRANCH IF NUMERIC 
                      (                    ROMbasic.ASM):01449 ; READ/INPUT A STRING VARIABLE                      
E326 9E83             (                    ROMbasic.ASM):01450           LDX  CHARAD         LOAD X WITH CURRENT BASIC INPUT POINTER 
E328 9701             (                    ROMbasic.ASM):01451           STA  CHARAC         SAVE CURRENT INPUT CHARACTER 
E32A 8122             (                    ROMbasic.ASM):01452           CMPA #'"            CHECK FOR STRING DELIMITER 
E32C 270E             (                    ROMbasic.ASM):01453           BEQ  LB08B          BRANCH IF STRING DELIMITER 
E32E 301F             (                    ROMbasic.ASM):01454           LEAX -1,X           BACK UP POINTER 
E330 4F               (                    ROMbasic.ASM):01455           CLRA                * ZERO = END OF LINE CHARACTER 
E331 9701             (                    ROMbasic.ASM):01456           STA  CHARAC         * SAVE AS TERMINATOR 
E333 BDDC58           (                    ROMbasic.ASM):01457           JSR  LA35F          SET UP PRINT PARAMETERS 
E336 863A             (                    ROMbasic.ASM):01458           LDA  #':            END OF SUBLINE CHARACTER 
E338 9701             (                    ROMbasic.ASM):01459           STA  CHARAC         SAVE AS TERMINATOR I 
E33A 862C             (                    ROMbasic.ASM):01460           LDA  #',            COMMA 
E33C 9702             (                    ROMbasic.ASM):01461 LB08B     STA  ENDCHR         SAVE AS TERMINATOR 2 
E33E BDE7CA           (                    ROMbasic.ASM):01462           JSR  LB51E          STRIP A STRING FROM THE INPUT BUFFER 
E341 BDE4FA           (                    ROMbasic.ASM):01463           JSR  LB249          MOVE INPUT POINTER TO END OF STRING 
E344 BDE279           (                    ROMbasic.ASM):01464           JSR  LAFA4          PUT A STRING INTO THE STRING SPACE IF NECESSARY 
E347 2006             (                    ROMbasic.ASM):01465           BRA  LB09E          CHECK FOR ANOTHER DATA ITEM 
                      (                    ROMbasic.ASM):01466 ; SAVE A NUMERIC VALUE IN A READ OR INPUT DATA ITEM                      
E349 BDEF83           (                    ROMbasic.ASM):01467 LB098     JSR  LBD12          CONVERT AN ASCII STRING TO FP NUMBER 
E34C BDEEA4           (                    ROMbasic.ASM):01468           JSR  LBC33          PACK FPA0 AND STORE IT IN ADDRESS IN VARDES - 
                      (                    ROMbasic.ASM):01469 ;                             INPUT OR READ DATA ITEM 
E34F 9D82             (                    ROMbasic.ASM):01470 LB09E     JSR  GETCCH         GET CURRENT INPUT CHARACTER 
E351 2706             (                    ROMbasic.ASM):01471           BEQ  LB0A8          BRANCH IF END OF LINE 
E353 812C             (                    ROMbasic.ASM):01472           CMPA #',            CHECK FOR A COMMA 
E355 1026FF52         (                    ROMbasic.ASM):01473           LBNE LAFD6          BAD FILE DATA' ERROR OR RETRY 
E359 9E83             (                    ROMbasic.ASM):01474 LB0A8     LDX  CHARAD         * GET CURRENT INPUT 
E35B 9F35             (                    ROMbasic.ASM):01475           STX  DATTMP         * POINTER (USED AS A DATA POINTER) AND SAVE IT 
E35D 9E2B             (                    ROMbasic.ASM):01476           LDX  BINVAL         * RESET INPUT POINTER TO INPUT OR 
E35F 9F83             (                    ROMbasic.ASM):01477           STX  CHARAD         * READ STATEMENT 
E361 9D82             (                    ROMbasic.ASM):01478           JSR  GETCCH         GET CURRENT CHARACTER FROM BASIC 
E363 2721             (                    ROMbasic.ASM):01479           BEQ  LB0D5          BRANCH IF END OF LINE - EXIT COMMAND 
E365 BDE51E           (                    ROMbasic.ASM):01480           JSR  LB26D          SYNTAX CHECK FOR COMMA 
E368 209C             (                    ROMbasic.ASM):01481           BRA  LB04E          GET ANOTHER INPUT OR READ ITEM 
                      (                    ROMbasic.ASM):01482 ; SEARCH FROM ADDRESS IN X FOR                      
                      (                    ROMbasic.ASM):01483 ; 1ST OCCURENCE OF THE TOKEN FOR DATA                      
E36A 9F83             (                    ROMbasic.ASM):01484 LB0B9     STX  CHARAD         RESET BASIC’S INPUT POINTER 
E36C BDE1BD           (                    ROMbasic.ASM):01485           JSR  LAEE8          SEARCH FOR END OF CURRENT LINE OR SUBLINE 
E36F 3001             (                    ROMbasic.ASM):01486           LEAX 1,X            MOVE X ONE PAST END OF LINE 
E371 4D               (                    ROMbasic.ASM):01487           TSTA                CHECK FOR END OF LINE 
E372 260A             (                    ROMbasic.ASM):01488           BNE  LB0CD          BRANCH IF END OF SUBLINE 
E374 C606             (                    ROMbasic.ASM):01489           LDB  #2*3           ‘OUT OF DATA’ ERROR 
E376 EE81             (                    ROMbasic.ASM):01490           LDU  ,X++           GET NEXT 2 CHARACTERS 
E378 2741             (                    ROMbasic.ASM):01491           BEQ  LB10A          ‘OD’ ERROR IF END OF PROGRAM 
E37A EC81             (                    ROMbasic.ASM):01492           LDD  ,X++           GET BASIC LINE NUMBER AND 
E37C DD31             (                    ROMbasic.ASM):01493           STD  DATTXT         SAVE IT IN DATTXT 
E37E A684             (                    ROMbasic.ASM):01494 LB0CD     LDA  ,X             GET AN INPUT CHARACTER 
E380 8186             (                    ROMbasic.ASM):01495           CMPA #TOK_DATA      DATA TOKEN? 
E382 26E6             (                    ROMbasic.ASM):01496           BNE  LB0B9          NO — KEEP LOOKING 
E384 2098             (                    ROMbasic.ASM):01497           BRA  LB069          YES 
                      (                    ROMbasic.ASM):01498 ; EXIT READ AND INPUT COMMANDS                      
E386 9E35             (                    ROMbasic.ASM):01499 LB0D5     LDX  DATTMP         GET DATA POINTER 
E388 D609             (                    ROMbasic.ASM):01500           LDB  INPFLG         * CHECK INPUT FLAG 
E38A 1026FD3A         (                    ROMbasic.ASM):01501           LBNE LADE8          * SAVE NEW DATA POINTER IF READ 
E38E A684             (                    ROMbasic.ASM):01502           LDA  ,X             = CHECK NEXT CHARACTER IN ‘INPUT’ BUFFER 
E390 2706             (                    ROMbasic.ASM):01503           BEQ  LB0E7          = 
E392 8EE398           (                    ROMbasic.ASM):01504           LDX  #LB0E8-1       POINT X TO ‘?EXTRA IGNORED’ 
E395 7EEC0D           (                    ROMbasic.ASM):01505           JMP  LB99C          PRINT THE MESSAGE 
E398 39               (                    ROMbasic.ASM):01506 LB0E7     RTS                  
                      (                    ROMbasic.ASM):01507                                
E399 3F45585452412049 (                    ROMbasic.ASM):01508 LB0E8     FCC  "?EXTRA IGNORED" ?EXTRA IGNORED MESSAGE 
     474E4F524544
                      (                    ROMbasic.ASM):01509                                
                      (                    ROMbasic.ASM):01510                                
E3A7 0D00             (                    ROMbasic.ASM):01511           FCB  CR,$00          
                      (                    ROMbasic.ASM):01512                                
                      (                    ROMbasic.ASM):01513 ; NEXT                         
E3A9 2604             (                    ROMbasic.ASM):01514 NEXT      BNE  LB0FE          BRANCH IF ARGUMENT GIVEN 
E3AB 9E74             (                    ROMbasic.ASM):01515           LDX  ZERO           X = 0: DEFAULT FOR NO ARGUMENT 
E3AD 2003             (                    ROMbasic.ASM):01516           BRA  LB101           
E3AF BDE603           (                    ROMbasic.ASM):01517 LB0FE     JSR  LB357          EVALUATE AN ALPHA EXPRESSION 
E3B2 9F3B             (                    ROMbasic.ASM):01518 LB101     STX  VARDES         SAVE VARIABLE DESCRIPTOR POINTER 
E3B4 BDDEDE           (                    ROMbasic.ASM):01519           JSR  LABF9          GO SCAN FOR ‘FOR/NEXT’ DATA ON STACK 
E3B7 2704             (                    ROMbasic.ASM):01520           BEQ  LB10C          BRANCH IF DATA FOUND 
E3B9 C600             (                    ROMbasic.ASM):01521           LDB  #0             ‘NEXT WITHOUT FOR’ ERROR (SHOULD BE CLRB) 
E3BB 2047             (                    ROMbasic.ASM):01522 LB10A     BRA  LB153          PROCESS ERROR 
E3BD 1F14             (                    ROMbasic.ASM):01523 LB10C     TFR  X,S            POINT S TO START OF ‘FOR/NEXT’ DATA 
E3BF 3003             (                    ROMbasic.ASM):01524           LEAX 3,X            POINT X TO FP VALUE OF STEP 
E3C1 BDEE85           (                    ROMbasic.ASM):01525           JSR  LBC14          COPY A FP NUMBER FROM (X) TO FPA0 
E3C4 A668             (                    ROMbasic.ASM):01526           LDA  8,S            GET THE DIRECTION OF STEP 
E3C6 9754             (                    ROMbasic.ASM):01527           STA  FP0SGN         SAVE IT AS THE SIGN OF FPA0 
E3C8 9E3B             (                    ROMbasic.ASM):01528           LDX  VARDES         POINT (X) TO INDEX VARIABLE DESCRIPTOR 
E3CA BDEC33           (                    ROMbasic.ASM):01529           JSR  LB9C2          ADD (X) TO FPA0 (STEP TO INDEX) 
E3CD BDEEA4           (                    ROMbasic.ASM):01530           JSR  LBC33          PACK FPA0 AND STORE IT IN ADDRESS 
                      (                    ROMbasic.ASM):01531 ;                             CONTAINED IN VARDES 
E3D0 3069             (                    ROMbasic.ASM):01532           LEAX 9,S            POINT (X) TO TERMINAL VALUE OF INDEX 
E3D2 BDEF07           (                    ROMbasic.ASM):01533           JSR  LBC96          COMPARE CURRENT INDEX VALUE TO TERMINAL VALUE OF INDEX 
E3D5 E068             (                    ROMbasic.ASM):01534           SUBB 8,S            ACCB = 0 IF TERMINAL VALUE=CURRENT VALUE AND STEP=0 OR IF 
                      (                    ROMbasic.ASM):01535 ;                             STEP IS POSITIVE AND CURRENT VALUE>TERMINAL VALUE OR 
                      (                    ROMbasic.ASM):01536 ;                             STEP IS NEGATIVE AND CURRENT VALUE<TERMINAL VALUE 
E3D7 270C             (                    ROMbasic.ASM):01537           BEQ  LB134          BRANCH IF ‘FOR/NEXT’ LOOP DONE 
E3D9 AE6E             (                    ROMbasic.ASM):01538           LDX  14,S           * GET LINE NUMBER AND 
E3DB 9F68             (                    ROMbasic.ASM):01539           STX  CURLIN         * BASIC POINTER OF 
E3DD AEE810           (                    ROMbasic.ASM):01540           LDX  16,S           * STATEMENT FOLLOWING THE 
E3E0 9F83             (                    ROMbasic.ASM):01541           STX  CHARAD         * PROPER FOR STATEMENT 
E3E2 7EE067           (                    ROMbasic.ASM):01542 LB131     JMP  LAD9E          JUMP BACK TO COMMAND INTEPR. LOOP 
E3E5 32E812           (                    ROMbasic.ASM):01543 LB134     LEAS 18,S           PULL THE ‘FOR-NEXT’ DATA OFF THE STACK 
E3E8 9D82             (                    ROMbasic.ASM):01544           JSR  GETCCH         GET CURRENT INPUT CHARACTER 
E3EA 812C             (                    ROMbasic.ASM):01545           CMPA #',            CHECK FOR ANOTHER ARGUMENT 
E3EC 26F4             (                    ROMbasic.ASM):01546           BNE  LB131          RETURN IF NONE 
E3EE 9D7C             (                    ROMbasic.ASM):01547           JSR  GETNCH         GET NEXT CHARACTER FROM BASIC 
E3F0 8DBD             (                    ROMbasic.ASM):01548           BSR  LB0FE          BSR SIMULATES A CALL TO ‘NEXT’ FROM COMMAND LOOP 
                      (                    ROMbasic.ASM):01549                                
                      (                    ROMbasic.ASM):01550                                
E3F2 8D13             (                    ROMbasic.ASM):01551 LB141     BSR  LB156          EVALUATE EXPRESSION AND DO A TYPE CHECK FOR NUMERIC 
E3F4 1CFE             (                    ROMbasic.ASM):01552 LB143     ANDCC #$FE           CLEAR CARRY FLAG 
E3F6 7D               (                    ROMbasic.ASM):01553 LB145     FCB  $7D            OP CODE OF TST $1A01 - SKIP TWO BYTES (DO 
                      (                    ROMbasic.ASM):01554 ;              NOT CHANGE CARRY FLAG)  
E3F7 1A01             (                    ROMbasic.ASM):01555 LB146     ORCC #1             SET CARRY 
                      (                    ROMbasic.ASM):01556                                
                      (                    ROMbasic.ASM):01557 ; STRING TYPE MODE CHECK - IF ENTERED AT LB146 THEN VALTYP PLUS IS 'TM' ERROR                      
                      (                    ROMbasic.ASM):01558 ; NUMERIC TYPE MODE CHECK - IF ENTERED AT LB143 THEN VALTYP MINUS IS 'TM' ERROR                      
                      (                    ROMbasic.ASM):01559 ; IF ENTERED AT LB148, A TYPE CHECK IS DONE ON VALTYP                      
                      (                    ROMbasic.ASM):01560 ; IF ENTERED WITH CARRY SET, THEN 'TM' ERROR IF NUMERIC                      
                      (                    ROMbasic.ASM):01561 ; IF ENTERED WITH CARRY CLEAR, THEN 'TM' ERROR IF STRING.                      
E3F9 0D06             (                    ROMbasic.ASM):01562 LB148     TST  VALTYP         TEST TYPE FLAG; DO NOT CHANGE CARRY 
E3FB 2503             (                    ROMbasic.ASM):01563           BCS  LB14F          BRANCH IF STRING 
E3FD 2A99             (                    ROMbasic.ASM):01564           BPL  LB0E7          RETURN ON PLUS 
E3FF 8C               (                    ROMbasic.ASM):01565           FCB  SKP2           SKIP 2 BYTES - ‘TM’ ERROR 
E400 2B96             (                    ROMbasic.ASM):01566 LB14F     BMI  LB0E7          RETURN ON MINUS 
E402 C618             (                    ROMbasic.ASM):01567           LDB  #12*2          ‘TYPE M1SMATCH’ ERROR 
E404 7EDF2B           (                    ROMbasic.ASM):01568 LB153     JMP  LAC46          PROCESS ERROR 
                      (                    ROMbasic.ASM):01569 ; EVALUATE EXPRESSION                      
E407 8D6E             (                    ROMbasic.ASM):01570 LB156     BSR  LB1C6          BACK UP INPUT POINTER 
E409 4F               (                    ROMbasic.ASM):01571 LB158     CLRA                END OF OPERATION PRECEDENCE FLAG 
E40A 8C               (                    ROMbasic.ASM):01572           FCB  SKP2           SKIP TWO BYTES 
E40B 3404             (                    ROMbasic.ASM):01573 LB15A     PSHS B              SAVE FLAG (RELATIONAL OPERATOR FLAG) 
E40D 3402             (                    ROMbasic.ASM):01574           PSHS A              SAVE FLAG (PRECEDENCE FLAG) 
E40F C601             (                    ROMbasic.ASM):01575           LDB  #1             * 
E411 BDDF18           (                    ROMbasic.ASM):01576           JSR  LAC33          * SEE IF ROOM IN FREE RAM FOR (B) WORDS 
E414 BDE4D4           (                    ROMbasic.ASM):01577           JSR  LB223          GO EVALUATE AN EXPRESSION 
E417 0F3F             (                    ROMbasic.ASM):01578           CLR  TRELFL         RESET RELATIONAL OPERATOR FLAG 
E419 9D82             (                    ROMbasic.ASM):01579 LB168     JSR  GETCCH         GET CURRENT INPUT CHARACTER 
                      (                    ROMbasic.ASM):01580 ; CHECK FOR RELATIONAL OPERATORS                      
E41B 80AD             (                    ROMbasic.ASM):01581 LB16A     SUBA #TOK_GREATER   TOKEN FOR > 
E41D 2513             (                    ROMbasic.ASM):01582           BCS  LB181          BRANCH IF LESS THAN RELATIONAL OPERATORS 
E41F 8103             (                    ROMbasic.ASM):01583           CMPA #3             * 
E421 240F             (                    ROMbasic.ASM):01584           BCC  LB181          * BRANCH IF GREATER THAN RELATIONAL OPERATORS 
E423 8101             (                    ROMbasic.ASM):01585           CMPA #1             SET CARRY IF ‘>‘ 
E425 49               (                    ROMbasic.ASM):01586           ROLA                CARRY TO BIT 0 
E426 983F             (                    ROMbasic.ASM):01587           EORA TRELFL         * CARRY SET IF 
E428 913F             (                    ROMbasic.ASM):01588           CMPA TRELFL         * TRELFL = ACCA 
E42A 2564             (                    ROMbasic.ASM):01589           BCS  LB1DF          BRANCH IF SYNTAX ERROR : == << OR >> 
E42C 973F             (                    ROMbasic.ASM):01590           STA  TRELFL         BIT 0: >, BIT 1 =, BIT 2: < 
E42E 9D7C             (                    ROMbasic.ASM):01591           JSR  GETNCH         GET AN INPUT CHARACTER 
E430 20E9             (                    ROMbasic.ASM):01592           BRA  LB16A          CHECK FOR ANOTHER RELATIONAL OPERATOR 
                      (                    ROMbasic.ASM):01593 ;                              
E432 D63F             (                    ROMbasic.ASM):01594 LB181     LDB  TRELFL         GET RELATIONAL OPERATOR FLAG 
E434 2633             (                    ROMbasic.ASM):01595           BNE  LB1B8          BRANCH IF RELATIONAL COMPARISON 
E436 1024006B         (                    ROMbasic.ASM):01596           LBCC LB1F4          BRANCH IF > RELATIONAL OPERATOR 
E43A 8B07             (                    ROMbasic.ASM):01597           ADDA #7             SEVEN ARITHMETIC/LOGICAL OPERATORS 
E43C 2467             (                    ROMbasic.ASM):01598           BCC  LB1F4          BRANCH IF NOT ARITHMETIC/LOGICAL OPERATOR 
E43E 9906             (                    ROMbasic.ASM):01599           ADCA VALTYP         ADD CARRY, NUMERIC FLAG AND MODIFIED TOKEN NUMBER 
E440 10270477         (                    ROMbasic.ASM):01600           LBEQ LB60F          BRANCH IF VALTYP = FF, AND ACCA = ‘+‘ TOKEN - 
                      (                    ROMbasic.ASM):01601 ;                             CONCATENATE TWO STRINGS 
E444 89FF             (                    ROMbasic.ASM):01602           ADCA #-1            RESTORE ARITHMETIC/LOGICAL OPERATOR NUMBER 
E446 3402             (                    ROMbasic.ASM):01603           PSHS A              * STORE OPERATOR NUMBER ON STACK; MULTIPLY IT BY 2 
E448 48               (                    ROMbasic.ASM):01604           ASLA                * THEN ADD THE STORED STACK DATA = MULTIPLY 
E449 ABE0             (                    ROMbasic.ASM):01605           ADDA ,S+            * X 3; 3 BYTE/TABLE ENTRY 
E44B 8EDD30           (                    ROMbasic.ASM):01606           LDX  #LAA51         JUMP TABLE FOR ARITHMETIC & LOGICAL OPERATORS 
E44E 3086             (                    ROMbasic.ASM):01607           LEAX A,X            POINT X TO PROPER TABLE 
E450 3502             (                    ROMbasic.ASM):01608 LB19F     PULS A              GET PRECEDENCE FLAG FROM STACK 
E452 A184             (                    ROMbasic.ASM):01609           CMPA ,X             COMPARE TO CURRENT OPERATOR 
E454 2455             (                    ROMbasic.ASM):01610           BCC  LB1FA          BRANCH IF STACK OPERATOR > CURRENT OPERATOR 
E456 8D9C             (                    ROMbasic.ASM):01611           BSR  LB143          ‘TM’ ERROR IF VARIABLE TYPE = STRING 
                      (                    ROMbasic.ASM):01612                                
                      (                    ROMbasic.ASM):01613 ; OPERATION BEING PROCESSED IS OF HIGHER PRECEDENCE THAN THE PREVIOUS OPERATION.                      
E458 3402             (                    ROMbasic.ASM):01614 LB1A7     PSHS A              SAVE PRECEDENCE FLAG 
E45A 8D29             (                    ROMbasic.ASM):01615           BSR  LB1D4          PUSH OPERATOR ROUTINE ADDRESS AND FPA0 ONTO STACK 
E45C 9E3D             (                    ROMbasic.ASM):01616           LDX  RELPTR         GET POINTER TO ARITHMETIC/LOGICAL TABLE ENTRY FOR 
                      (                    ROMbasic.ASM):01617 ;                             LAST CALCULATED OPERATION 
E45E 3502             (                    ROMbasic.ASM):01618           PULS A              GET PRECEDENCE FLAG OF PREVIOUS OPERATION 
E460 261D             (                    ROMbasic.ASM):01619           BNE  LB1CE          BRANCH IF NOT END OF OPERATION 
E462 4D               (                    ROMbasic.ASM):01620           TSTA                CHECK TYPE OF PRECEDENCE FLAG 
E463 1027006A         (                    ROMbasic.ASM):01621           LBEQ LB220          BRANCH IF END OF EXPRESSION OR SUB-EXPRESSION 
E467 204B             (                    ROMbasic.ASM):01622           BRA  LB203          EVALUATE AN OPERATION 
                      (                    ROMbasic.ASM):01623                                
E469 0806             (                    ROMbasic.ASM):01624 LB1B8     ASL  VALTYP         BIT 7 OF TYPE FLAG TO CARRY 
E46B 59               (                    ROMbasic.ASM):01625           ROLB                SHIFT RELATIONAL FLAG LEFT - VALTYP TO BIT 0 
E46C 8D09             (                    ROMbasic.ASM):01626           BSR  LB1C6          MOVE THE INPUT POINTER BACK ONE 
E46E 8EE47C           (                    ROMbasic.ASM):01627           LDX  #LB1CB         POINT X TO RELATIONAL COMPARISON JUMP TABLE 
E471 D73F             (                    ROMbasic.ASM):01628           STB  TRELFL         SAVE RELATIONAL COMPARISON DATA 
E473 0F06             (                    ROMbasic.ASM):01629           CLR  VALTYP         SET VARIABLE TYPE TO NUMERIC 
E475 20D9             (                    ROMbasic.ASM):01630           BRA  LB19F          PERFORM OPERATION OR SAVE ON STACK 
                      (                    ROMbasic.ASM):01631                                
E477 9E83             (                    ROMbasic.ASM):01632 LB1C6     LDX  CHARAD         * GET BASIC’S INPUT POINTER AND 
E479 7EE190           (                    ROMbasic.ASM):01633           JMP  LAEBB          * MOVE IT BACK ONE 
                      (                    ROMbasic.ASM):01634 ; RELATIONAL COMPARISON JUMP TABLE                      
E47C 64               (                    ROMbasic.ASM):01635 LB1CB     FCB  $64            RELATIONAL COMPARISON FLAG 
E47D E5A0             (                    ROMbasic.ASM):01636 LB1CC     FDB  LB2F4          JUMP ADDRESS 
                      (                    ROMbasic.ASM):01637                                
E47F A184             (                    ROMbasic.ASM):01638 LB1CE     CMPA ,X             COMPARE PRECEDENCE OF LAST DONE OPERATION TO 
                      (                    ROMbasic.ASM):01639 ;         NEXT TO BE DONE OPERATION  
E481 2431             (                    ROMbasic.ASM):01640           BCC  LB203          EVALUATE OPERATION IF LOWER PRECEDENCE 
E483 20D3             (                    ROMbasic.ASM):01641           BRA  LB1A7          PUSH OPERATION DATA ON STACK IF HIGHER PRECEDENCE 
                      (                    ROMbasic.ASM):01642                                
                      (                    ROMbasic.ASM):01643 ; PUSH OPERATOR EVALUATION ADDRESS AND FPA0 ONTO STACK AND EVALUATE ANOTHER EXPR                      
E485 EC01             (                    ROMbasic.ASM):01644 LB1D4     LDD  1,X            GET ADDRESS OF OPERATOR ROUTINE 
E487 3406             (                    ROMbasic.ASM):01645           PSHS B,A            SAVE IT ON THE STACK 
E489 8D08             (                    ROMbasic.ASM):01646           BSR  LB1E2          PUSH FPA0 ONTO STACK 
E48B D63F             (                    ROMbasic.ASM):01647           LDB  TRELFL         GET BACK RELATIONAL OPERATOR FLAG 
E48D 16FF7B           (                    ROMbasic.ASM):01648           LBRA LB15A          EVALUATE ANOTHER EXPRESSION 
E490 7EE528           (                    ROMbasic.ASM):01649 LB1DF     JMP  LB277          ‘SYNTAX ERROR’ 
                      (                    ROMbasic.ASM):01650 ; PUSH FPA0 ONTO THE STACK. ,S   = EXPONENT      
                      (                    ROMbasic.ASM):01651 ; 1-2,S =HIGH ORDER MANTISSA 3-4,S = LOW ORDER MANTISSA  
                      (                    ROMbasic.ASM):01652 ; 5,S = SIGN RETURN WITH PRECEDENCE CODE IN ACCA  
E493 D654             (                    ROMbasic.ASM):01653 LB1E2     LDB  FP0SGN         GET SIGN OF FPA0 MANTISSA 
E495 A684             (                    ROMbasic.ASM):01654           LDA  ,X             GET PRECEDENCE CODE TO ACCA 
E497 3520             (                    ROMbasic.ASM):01655 LB1E6     PULS Y              GET RETURN ADDRESS FROM STACK & PUT IT IN Y 
E499 3404             (                    ROMbasic.ASM):01656           PSHS B              SAVE ACCB ON STACK 
E49B D64F             (                    ROMbasic.ASM):01657 LB1EA     LDB  FP0EXP         * PUSH FPA0 ONTO THE STACK 
E49D 9E50             (                    ROMbasic.ASM):01658           LDX  FPA0           * 
E49F DE52             (                    ROMbasic.ASM):01659           LDU  FPA0+2         * 
E4A1 3454             (                    ROMbasic.ASM):01660           PSHS U,X,B          * 
E4A3 6EA4             (                    ROMbasic.ASM):01661           JMP  ,Y             JUMP TO ADDRESS IN Y 
                      (                    ROMbasic.ASM):01662                                
                      (                    ROMbasic.ASM):01663 ; BRANCH HERE IF NON-OPERATOR CHARACTER FOUND - USUALLY ‘)‘ OR END OF LINE                      
E4A5 9E74             (                    ROMbasic.ASM):01664 LB1F4     LDX  ZERO           POINT X TO DUMMY VALUE (ZERO) 
E4A7 A6E0             (                    ROMbasic.ASM):01665           LDA  ,S+            GET PRECEDENCE FLAG FROM STACK 
E4A9 2726             (                    ROMbasic.ASM):01666           BEQ  LB220          BRANCH IF END OF EXPRESSION 
E4AB 8164             (                    ROMbasic.ASM):01667 LB1FA     CMPA #$64           * CHECK FOR RELATIONAL COMPARISON FLAG 
E4AD 2703             (                    ROMbasic.ASM):01668           BEQ  LB201          * AND BRANCH IF RELATIONAL COMPARISON 
E4AF BDE3F4           (                    ROMbasic.ASM):01669           JSR  LB143          ‘TM’ ERROR IF VARIABLE TYPE = STRING 
E4B2 9F3D             (                    ROMbasic.ASM):01670 LB201     STX  RELPTR         SAVE POINTER TO OPERATOR ROUTINE 
E4B4 3504             (                    ROMbasic.ASM):01671 LB203     PULS B              GET RELATIONAL OPERATOR FLAG FROM STACK 
E4B6 815A             (                    ROMbasic.ASM):01672           CMPA #$5A           CHECK FOR ‘NOT’ OPERATOR 
E4B8 2719             (                    ROMbasic.ASM):01673           BEQ  LB222          RETURN IF ‘NOT’ - NO RELATIONAL COMPARISON 
E4BA 817D             (                    ROMbasic.ASM):01674           CMPA #$7D           CHECK FOR NEGATION (UNARY) FLAG 
E4BC 2715             (                    ROMbasic.ASM):01675           BEQ  LB222          RETURN IF NEGATION - NO RELATIONAL COMPARISON 
                      (                    ROMbasic.ASM):01676                                
                      (                    ROMbasic.ASM):01677 ; EVALUATE AN OPERATION. EIGHT BYTES WILL BE STORED ON STACK, FIRST SIX BYTES                      
                      (                    ROMbasic.ASM):01678 ; ARE A TEMPORARY FLOATING POINT RESULT THEN THE ADDRESS OF ROUTINE WHICH                      
                      (                    ROMbasic.ASM):01679 ; WILL EVALUATE THE OPERATION. THE RTS AT END OF ROUTINE WILL VECTOR                      
                      (                    ROMbasic.ASM):01680 ; TO EVALUATING ROUTINE.                      
E4BE 54               (                    ROMbasic.ASM):01681           LSRB                = ROTATE VALTYP BIT INTO CARRY 
E4BF D70A             (                    ROMbasic.ASM):01682           STB  RELFLG         = FLAG AND SAVE NEW RELFLG 
E4C1 3552             (                    ROMbasic.ASM):01683           PULS A,X,U          * PULL A FP VALUE OFF OF THE STACK 
E4C3 975C             (                    ROMbasic.ASM):01684           STA  FP1EXP         * AND SAVE IT IN FPA1 
E4C5 9F5D             (                    ROMbasic.ASM):01685           STX  FPA1           * 
E4C7 DF5F             (                    ROMbasic.ASM):01686           STU  FPA1+2         * 
E4C9 3504             (                    ROMbasic.ASM):01687           PULS B              = GET MANTISSA SIGN AND 
E4CB D761             (                    ROMbasic.ASM):01688           STB  FP1SGN         = SAVE IT IN FPA1 
E4CD D854             (                    ROMbasic.ASM):01689           EORB FP0SGN         EOR IT WITH FPA1 MANTISSA SIGN 
E4CF D762             (                    ROMbasic.ASM):01690           STB  RESSGN         SAVE IT IN RESULT SIGN BYTE 
E4D1 D64F             (                    ROMbasic.ASM):01691 LB220     LDB  FP0EXP         GET EXPONENT OF FPA0 
E4D3 39               (                    ROMbasic.ASM):01692 LB222     RTS                  
                      (                    ROMbasic.ASM):01693                                
E4D4 BDF721           (                    ROMbasic.ASM):01694 LB223     JSR  XVEC15         CALL EXTENDED BASIC ADD-IN 
E4D7 0F06             (                    ROMbasic.ASM):01695           CLR  VALTYP         INITIALIZE TYPE FLAG TO NUMERIC 
E4D9 9D7C             (                    ROMbasic.ASM):01696           JSR  GETNCH         GET AN INPUT CHAR 
E4DB 2403             (                    ROMbasic.ASM):01697           BCC  LB22F          BRANCH IF NOT NUMERIC 
E4DD 7EEF83           (                    ROMbasic.ASM):01698 LB22C     JMP  LBD12          CONVERT ASCII STRING TO FLOATING POINT - 
                      (                    ROMbasic.ASM):01699 ;         RETURN RESULT IN FPA0  
                      (                    ROMbasic.ASM):01700 ; PROCESS A NON NUMERIC FIRST CHARACTER                      
E4E0 BDE64E           (                    ROMbasic.ASM):01701 LB22F     JSR  LB3A2          SET CARRY IF NOT ALPHA 
E4E3 2450             (                    ROMbasic.ASM):01702           BCC  LB284          BRANCH IF ALPHA CHARACTER 
E4E5 812E             (                    ROMbasic.ASM):01703           CMPA #'.            IS IT ‘.‘ (DECIMAL POINT)? 
E4E7 27F4             (                    ROMbasic.ASM):01704           BEQ  LB22C          CONVERT ASCII STRING TO FLOATING POINT 
E4E9 81A7             (                    ROMbasic.ASM):01705           CMPA #TOK_MINUS     MINUS TOKEN 
E4EB 2740             (                    ROMbasic.ASM):01706           BEQ  LB27C          YES - GO PROCESS THE MINUS OPERATOR 
E4ED 81A6             (                    ROMbasic.ASM):01707           CMPA #TOK_PLUS      PLUS TOKEN 
E4EF 27E3             (                    ROMbasic.ASM):01708           BEQ  LB223          YES - GET ANOTHER CHARACTER 
E4F1 8122             (                    ROMbasic.ASM):01709           CMPA #'"            STRING DELIMITER? 
E4F3 260A             (                    ROMbasic.ASM):01710           BNE  LB24E          NO 
E4F5 9E83             (                    ROMbasic.ASM):01711 LB244     LDX  CHARAD         CURRENT BASIC POINTER TO X 
E4F7 BDE7C4           (                    ROMbasic.ASM):01712           JSR  LB518          SAVE STRING ON STRING STACK 
E4FA 9E64             (                    ROMbasic.ASM):01713 LB249     LDX  COEFPT         * GET ADDRESS OF END OF STRING AND 
E4FC 9F83             (                    ROMbasic.ASM):01714           STX  CHARAD         * PUT BASIC’S INPUT POINTER THERE 
E4FE 39               (                    ROMbasic.ASM):01715           RTS                  
E4FF 81A3             (                    ROMbasic.ASM):01716 LB24E     CMPA #TOK_NOT       NOT TOKEN? 
E501 260D             (                    ROMbasic.ASM):01717           BNE  LB25F          NO 
                      (                    ROMbasic.ASM):01718 ; PROCESS THE NOT OPERATOR                      
E503 865A             (                    ROMbasic.ASM):01719           LDA  #$5A           ‘NOT’ PRECEDENCE FLAG 
E505 BDE40B           (                    ROMbasic.ASM):01720           JSR  LB15A          PROCESS OPERATION FOLLOWING ‘NOT’ 
E508 BDE699           (                    ROMbasic.ASM):01721           JSR  INTCNV         CONVERT FPA0 TO INTEGER IN ACCD 
E50B 43               (                    ROMbasic.ASM):01722           COMA                * ‘NOT’ THE INTEGER 
E50C 53               (                    ROMbasic.ASM):01723           COMB                * 
E50D 7EE7A0           (                    ROMbasic.ASM):01724           JMP  GIVABF         CONVERT ACCD TO FLOATING POINT (FPA0) 
E510 4C               (                    ROMbasic.ASM):01725 LB25F     INCA                CHECK FOR TOKENS PRECEEDED BY $FF 
E511 272E             (                    ROMbasic.ASM):01726           BEQ  LB290          IT WAS PRECEEDED BY $FF 
E513 8D06             (                    ROMbasic.ASM):01727 LB262     BSR  LB26A          SYNTAX CHECK FOR A ‘(‘ 
E515 BDE407           (                    ROMbasic.ASM):01728           JSR  LB156          EVALUATE EXPRESSIONS WITHIN PARENTHESES AT 
                      (                    ROMbasic.ASM):01729 ;         HIGHEST PRECEDENCE      
E518 C629             (                    ROMbasic.ASM):01730 LB267     LDB  #')            SYNTAX CHECK FOR ‘)‘ 
E51A 8C               (                    ROMbasic.ASM):01731           FCB  SKP2           SKIP 2 BYTES 
E51B C628             (                    ROMbasic.ASM):01732 LB26A     LDB  #'(            SYNTAX CHECK FOR ‘(‘ 
E51D 8C               (                    ROMbasic.ASM):01733           FCB  SKP2           SKIP 2 BYTES 
E51E C62C             (                    ROMbasic.ASM):01734 LB26D     LDB  #',            SYNTAX CHECK FOR COMMA 
E520 E19F0083         (                    ROMbasic.ASM):01735 LB26F     CMPB [CHARAD]       * COMPARE ACCB TO CURRENT INPUT 
E524 2602             (                    ROMbasic.ASM):01736           BNE  LB277          * CHARACTER - SYNTAX ERROR IF NO MATCH 
E526 0E7C             (                    ROMbasic.ASM):01737           JMP  GETNCH         GET A CHARACTER FROM BASIC 
E528 C602             (                    ROMbasic.ASM):01738 LB277     LDB  #2*1           SYNTAX ERROR 
E52A 7EDF2B           (                    ROMbasic.ASM):01739           JMP  LAC46          JUMP TO ERROR HANDLER 
                      (                    ROMbasic.ASM):01740                                
                      (                    ROMbasic.ASM):01741 ; PROCESS THE MINUS (UNARY) OPERATOR                      
E52D 867D             (                    ROMbasic.ASM):01742 LB27C     LDA  #$7D           MINUS (UNARY) PRECEDENCE FLAG 
E52F BDE40B           (                    ROMbasic.ASM):01743           JSR  LB15A          PROCESS OPERATION FOLLOWING ‘UNARY’ NEGATION 
E532 7EF15A           (                    ROMbasic.ASM):01744           JMP  LBEE9          CHANGE SIGN OF FPA0 MANTISSA 
                      (                    ROMbasic.ASM):01745                                
                      (                    ROMbasic.ASM):01746 ; EVALUATE ALPHA EXPRESSION                      
E535 BDE603           (                    ROMbasic.ASM):01747 LB284     JSR  LB357          FIND THE DESCRIPTOR ADDRESS OF A VARIABLE 
E538 9F52             (                    ROMbasic.ASM):01748 LB287     STX  FPA0+2         SAVE DESCRIPTOR ADDRESS IN FPA0 
E53A 9606             (                    ROMbasic.ASM):01749           LDA  VALTYP         TEST VARIABLE TYPE 
E53C 2695             (                    ROMbasic.ASM):01750           BNE  LB222          RETURN IF STRING 
E53E 7EEE85           (                    ROMbasic.ASM):01751           JMP  LBC14          COPY A FP NUMBER FROM (X) TO FPA0 
                      (                    ROMbasic.ASM):01752                                
                      (                    ROMbasic.ASM):01753 ; EVALUATING A SECONDARY TOKEN                      
E541 9D7C             (                    ROMbasic.ASM):01754 LB290     JSR  GETNCH         GET AN INPUT CHARACTER (SECONDARY TOKEN) 
E543 1F89             (                    ROMbasic.ASM):01755           TFR  A,B            SAVE IT IN ACCB 
E545 58               (                    ROMbasic.ASM):01756           ASLB                X2 & BET RID OF BIT 7 
E546 9D7C             (                    ROMbasic.ASM):01757           JSR  GETNCH         GET ANOTHER INPUT CHARACTER 
                      (                    ROMbasic.ASM):01758 ;          CMPB #NUM_SEC_FNS-1*2 29 SECONDARY FUNCTIONS - 1     * original line
E548 C138             (                    ROMbasic.ASM):01759           CMPB #(NUM_SEC_FNS-1)*2       * 29 SECONDARY FUNCTIONS - 1  ; fix for lwtools
E54A 2303             (                    ROMbasic.ASM):01760           BLS  LB29F          BRANCH IF COLOR BASIC TOKEN 
E54C 7EE528           (                    ROMbasic.ASM):01761           JMP  LB277          SYNTAX ERROR 
E54F 3404             (                    ROMbasic.ASM):01762 LB29F     PSHS B              SAVE TOKEN OFFSET ON STACK 
                      (                    ROMbasic.ASM):01763 ;          CMPB #TOK_LEFT-$80*2 CHECK FOR TOKEN WITH AN ARGUMENT * original line  
E551 C12A             (                    ROMbasic.ASM):01764           CMPB #(TOK_LEFT-$80)*2 CHECK FOR TOKEN WITH AN ARGUMENT ; fix for lwtools
E553 251E             (                    ROMbasic.ASM):01765           BCS  LB2C7          DO SECONDARIES STRING$ OR LESS 
                      (                    ROMbasic.ASM):01766 ;          CMPB #TOK_INKEY-$80*2 *                               * original line
E555 C130             (                    ROMbasic.ASM):01767           CMPB #(TOK_INKEY-$80)*2 *                                 ; fix for lwtools
E557 241C             (                    ROMbasic.ASM):01768           BCC  LB2C9          * DO SECONDARIES $92 (INKEY$) OR > 
E559 8DC0             (                    ROMbasic.ASM):01769           BSR  LB26A          SYNTAX CHECK FOR A ‘(‘ 
E55B A6E4             (                    ROMbasic.ASM):01770           LDA  ,S             GET TOKEN NUMBER 
                      (                    ROMbasic.ASM):01771 ; DO SECONDARIES (LEFT$, RIGHT$, MID$)                      
E55D BDE407           (                    ROMbasic.ASM):01772           JSR  LB156          EVALUATE FIRST STRING IN ARGUMENT 
E560 8DBC             (                    ROMbasic.ASM):01773           BSR  LB26D          SYNTAX CHECK FOR A COMMA 
E562 BDE3F7           (                    ROMbasic.ASM):01774           JSR  LB146          ‘TM’ ERROR IF NUMERIC VARiABLE 
E565 3502             (                    ROMbasic.ASM):01775           PULS A              GET TOKEN OFFSET FROM STACK 
E567 DE52             (                    ROMbasic.ASM):01776           LDU  FPA0+2         POINT U TO STRING DESCRIPTOR 
E569 3442             (                    ROMbasic.ASM):01777           PSHS U,A            SAVE TOKEN OFFSET AND DESCRIPTOR ADDRESS 
E56B BDE9B7           (                    ROMbasic.ASM):01778           JSR  LB70B          EVALUATE FIRST NUMERIC ARGUMENT 
E56E 3502             (                    ROMbasic.ASM):01779           PULS A              GET TOKEN OFFSET FROM STACK 
E570 3406             (                    ROMbasic.ASM):01780           PSHS B,A            SAVE TOKEN OFFSET AND NUMERIC ARGUMENT 
E572 8E               (                    ROMbasic.ASM):01781           FCB  $8E            OP CODE OF LDX# - SKlP 2 BYTES 
E573 8D9E             (                    ROMbasic.ASM):01782 LB2C7     BSR  LB262          SYNTAX CHECK FOR A ‘(‘ 
E575 3504             (                    ROMbasic.ASM):01783 LB2C9     PULS B              GET TOKEN OFFSET 
E577 BEDC1D           (                    ROMbasic.ASM):01784           LDX  COMVEC+8       GET SECONDARY FUNCTION JUMP TABLE ADDRESS 
E57A 3A               (                    ROMbasic.ASM):01785 LB2CE     ABX                 ADD IN COMMAND OFFSET 
                      (                    ROMbasic.ASM):01786 ;                              
                      (                    ROMbasic.ASM):01787 ; HERE IS WHERE WE BRANCH TO A SECONDARY FUNCTION                      
E57B AD94             (                    ROMbasic.ASM):01788           JSR  [,X]           GO DO AN SECONDARY FUNCTION 
E57D 7EE3F4           (                    ROMbasic.ASM):01789           JMP  LB143          ‘TM’ ERROR IF VARIABLE TYPE = STRING 
                      (                    ROMbasic.ASM):01790                                
                      (                    ROMbasic.ASM):01791 ; LOGICAL OPERATOR ‘OR’ JUMPS HERE                      
E580 86               (                    ROMbasic.ASM):01792 LB2D4     FCB  SKP1LD         SKIP ONE BYTE - ‘OR’ FLAG = $4F 
                      (                    ROMbasic.ASM):01793                                
                      (                    ROMbasic.ASM):01794 ; LOGICAL OPERATOR ‘AND’ JUMPS HERE                      
E581 4F               (                    ROMbasic.ASM):01795 LB2D5     CLRA                AND FLAG = 0 
E582 9703             (                    ROMbasic.ASM):01796           STA  TMPLOC         AND/OR FLAG 
E584 BDE699           (                    ROMbasic.ASM):01797           JSR  INTCNV         CONVERT FPA0 INTO AN INTEGER IN ACCD 
E587 DD01             (                    ROMbasic.ASM):01798           STD  CHARAC         TEMP SAVE ACCD 
E589 BDEEBB           (                    ROMbasic.ASM):01799           JSR  LBC4A          MOVE FPA1 TO FPA0 
E58C BDE699           (                    ROMbasic.ASM):01800           JSR  INTCNV         CONVERT FPA0 INTO AN INTEGER IN ACCD 
E58F 0D03             (                    ROMbasic.ASM):01801           TST  TMPLOC         CHECK AND/OR FLAG 
E591 2606             (                    ROMbasic.ASM):01802           BNE  LB2ED          BRANCH IF OR 
E593 9401             (                    ROMbasic.ASM):01803           ANDA CHARAC         * ‘AND’ ACCD WITH FPA0 INTEGER 
E595 D402             (                    ROMbasic.ASM):01804           ANDB ENDCHR         * STORED IN ENDCHR 
E597 2004             (                    ROMbasic.ASM):01805           BRA  LB2F1          CONVERT TO FP 
E599 9A01             (                    ROMbasic.ASM):01806 LB2ED     ORA  CHARAC         * ‘OR’ ACCD WITH FPA0 INTEGER 
E59B DA02             (                    ROMbasic.ASM):01807           ORB  ENDCHR         * STORED IN CHARAC 
E59D 7EE7A0           (                    ROMbasic.ASM):01808 LB2F1     JMP  GIVABF         CONVERT THE VALUE IN ACCD INTO A FP NUMBER 
                      (                    ROMbasic.ASM):01809                                
                      (                    ROMbasic.ASM):01810 ; RELATIONAL COMPARISON PROCESS HANDLER                      
E5A0 BDE3F9           (                    ROMbasic.ASM):01811 LB2F4     JSR  LB148          ‘TM’ ERROR IF TYPE MISMATCH 
E5A3 2610             (                    ROMbasic.ASM):01812           BNE  LB309          BRANCH IF STRING VARIABLE 
E5A5 9661             (                    ROMbasic.ASM):01813           LDA  FP1SGN         * ‘PACK’ THE MANTISSA 
E5A7 8A7F             (                    ROMbasic.ASM):01814           ORA  #$7F           * SIGN OF FPA1 INTO 
E5A9 945D             (                    ROMbasic.ASM):01815           ANDA FPA1           * BIT 7 OF THE 
E5AB 975D             (                    ROMbasic.ASM):01816           STA  FPA1           * MANTISSA MS BYTE 
E5AD 8E005C           (                    ROMbasic.ASM):01817           LDX  #FP1EXP        POINT X TO FPA1 
E5B0 BDEF07           (                    ROMbasic.ASM):01818           JSR  LBC96          COMPARE FPA0 TO FPA1 
E5B3 2036             (                    ROMbasic.ASM):01819           BRA  LB33F          CHECK TRUTH OF RELATIONAL COMPARISON 
                      (                    ROMbasic.ASM):01820                                
                      (                    ROMbasic.ASM):01821 ; RELATIONAL COMPARISON OF STRINGS                      
E5B5 0F06             (                    ROMbasic.ASM):01822 LB309     CLR  VALTYP         SET VARIABLE TYPE TO NUMERIC 
E5B7 0A3F             (                    ROMbasic.ASM):01823           DEC  TRELFL         REMOVE STRING TYPE FLAG (BIT0=1 FOR STRINGS) FROM THE 
                      (                    ROMbasic.ASM):01824 ;                             DESIRED RELATIONAL COMPARISON DATA 
E5B9 BDE903           (                    ROMbasic.ASM):01825           JSR  LB657          GET LENGTH AND ADDRESS OF STRING WHOSE 
                      (                    ROMbasic.ASM):01826 ;                             DESCRIPTOR ADDRESS IS IN THE BOTTOM OF FPA0 
E5BC D756             (                    ROMbasic.ASM):01827           STB  STRDES         * SAVE LENGTH AND ADDRESS IN TEMPORARY 
E5BE 9F58             (                    ROMbasic.ASM):01828           STX  STRDES+2       * DESCRIPTOR (STRING B) 
E5C0 9E5F             (                    ROMbasic.ASM):01829           LDX  FPA1+2         = RETURN LENGTH AND ADDRESS OF STRING 
E5C2 BDE905           (                    ROMbasic.ASM):01830           JSR  LB659          = WHOSE DESCRIPTOR ADDRESS IS STORED IN FPA1+2 
E5C5 9656             (                    ROMbasic.ASM):01831           LDA  STRDES         LOAD ACCA WITH LENGTH OF STRING B 
E5C7 3404             (                    ROMbasic.ASM):01832           PSHS B              SAVE LENGTH A ON STACK 
E5C9 A0E0             (                    ROMbasic.ASM):01833           SUBA ,S+            SUBTRACT LENGTH A FROM LENGTH B 
E5CB 2707             (                    ROMbasic.ASM):01834           BEQ  LB328          BRANCH IF STRINGS OF EQUAL LENGTH 
E5CD 8601             (                    ROMbasic.ASM):01835           LDA  #1             TRUE FLAG 
E5CF 2403             (                    ROMbasic.ASM):01836           BCC  LB328          TRUE IF LENGTH B > LENGTH A 
E5D1 D656             (                    ROMbasic.ASM):01837           LDB  STRDES         LOAD ACCB WITH LENGTH B 
E5D3 40               (                    ROMbasic.ASM):01838           NEGA                SET FLAG = FALSE (1FF) 
E5D4 9754             (                    ROMbasic.ASM):01839 LB328     STA  FP0SGN         SAVE TRUE/FALSE FLAG 
E5D6 DE58             (                    ROMbasic.ASM):01840           LDU  STRDES+2       POINT U TO START OF STRING 
E5D8 5C               (                    ROMbasic.ASM):01841           INCB                COMPENSATE FOR THE DECB BELOW 
                      (                    ROMbasic.ASM):01842 ; ENTER WITH ACCB CONTAINING LENGTH OF SHORTER STRING                      
E5D9 5A               (                    ROMbasic.ASM):01843 LB32D     DECB                DECREMENT SHORTER STRING LENGTH 
E5DA 2604             (                    ROMbasic.ASM):01844           BNE  LB334          BRANCH IF ALL OF STRING NOT COMPARED 
E5DC D654             (                    ROMbasic.ASM):01845           LDB  FP0SGN         GET TRUE/FALSE FLAB 
E5DE 200B             (                    ROMbasic.ASM):01846           BRA  LB33F          CHECK TRUTH OF RELATIONAL COMPARISON 
E5E0 A680             (                    ROMbasic.ASM):01847 LB334     LDA  ,X+            GET A BYTE FROM STRING A 
E5E2 A1C0             (                    ROMbasic.ASM):01848           CMPA ,U+            COMPARE TO STRING B 
E5E4 27F3             (                    ROMbasic.ASM):01849           BEQ  LB32D          CHECK ANOTHER CHARACTER IF = 
E5E6 C6FF             (                    ROMbasic.ASM):01850           LDB  #$FF           FALSE FLAG IF STRING A > B 
E5E8 2401             (                    ROMbasic.ASM):01851           BCC  LB33F          BRANCH IF STRING A > STRING B 
E5EA 50               (                    ROMbasic.ASM):01852           NEGB                SET FLAG = TRUE 
                      (                    ROMbasic.ASM):01853                                
                      (                    ROMbasic.ASM):01854 ; DETERMINE TRUTH OF COMPARISON - RETURN RESULT IN FPA0                      
E5EB CB01             (                    ROMbasic.ASM):01855 LB33F     ADDB #1             CONVERT $FF,0,1 TO 0,1,2 
E5ED 59               (                    ROMbasic.ASM):01856           ROLB                NOW IT’S 1,2,4 FOR > = < 
E5EE D40A             (                    ROMbasic.ASM):01857           ANDB RELFLG         ‘AND’ THE ACTUAL COMPARISON WITH THE DESIRED - 
                      (                    ROMbasic.ASM):01858 COMPARISON                      
E5F0 2702             (                    ROMbasic.ASM):01859           BEQ  LB348          BRANCH IF FALSE (NO MATCHING BITS) 
E5F2 C6FF             (                    ROMbasic.ASM):01860           LDB  #$FF           TRUE FLAG 
E5F4 7EEEED           (                    ROMbasic.ASM):01861 LB348     JMP  LBC7C          CONVERT ACCB INTO FP NUMBER IN FPA0 
                      (                    ROMbasic.ASM):01862                                
                      (                    ROMbasic.ASM):01863 ; DIM                          
E5F7 BDE51E           (                    ROMbasic.ASM):01864 LB34B     JSR  LB26D          SYNTAX CHECK FOR COMMA 
E5FA C601             (                    ROMbasic.ASM):01865 DIM       LDB  #1             DIMENSION FLAG 
E5FC 8D08             (                    ROMbasic.ASM):01866           BSR  LB35A          SAVE ARRAY SPACE FOR THIS VARIABLE 
E5FE 9D82             (                    ROMbasic.ASM):01867           JSR  GETCCH         GET CURRENT INPUT CHARACTER 
E600 26F5             (                    ROMbasic.ASM):01868           BNE  LB34B          KEEP DIMENSIONING IF NOT END OF LINE 
E602 39               (                    ROMbasic.ASM):01869           RTS                  
                      (                    ROMbasic.ASM):01870 ; EVALUATE A VARIABLE - RETURN X AND                      
                      (                    ROMbasic.ASM):01871 ; VARPTR POINTING TO VARIABLE DESCRIPTOR                      
                      (                    ROMbasic.ASM):01872 ; EACH VARIABLE REQUIRES 7 BYTES - THE FIRST TWO                      
                      (                    ROMbasic.ASM):01873 ; BYTES ARE THE VARIABLE NAME AND THE NEXT 5                      
                      (                    ROMbasic.ASM):01874 ; BYTES ARE THE DESCRIPTOR. IF BIT 7 OF THE                      
                      (                    ROMbasic.ASM):01875 ; FIRST BYTE OF VARlABLE NAME IS SET, THE                      
                      (                    ROMbasic.ASM):01876 ; VARIABLE IS A DEF FN VARIABLE. IF BIT 7 OF                      
                      (                    ROMbasic.ASM):01877 ; THE SECOND BYTE OF VARIABLE NAME IS SET, THE                      
                      (                    ROMbasic.ASM):01878 ; VARIABLE IS A STRING, OTHERWISE THE VARIABLE                      
                      (                    ROMbasic.ASM):01879 ; IS NUMERIC.                      
                      (                    ROMbasic.ASM):01880 ; IF THE VARIABLE IS NOT FOUND, A ZERO VARIABLE IS                      
                      (                    ROMbasic.ASM):01881 ; INSERTED INTO THE VARIABLE SPACE                      
E603 5F               (                    ROMbasic.ASM):01882 LB357     CLRB                DIMENSION FLAG = 0; DO NOT SET UP AN ARRAY 
E604 9D82             (                    ROMbasic.ASM):01883           JSR  GETCCH         GET CURRENT INPUT CHARACTER 
E606 D705             (                    ROMbasic.ASM):01884 LB35A     STB  DIMFLG         SAVE ARRAY FLAG 
                      (                    ROMbasic.ASM):01885 ; ENTRY POINT FOR DEF FN VARIABLE SEARCH                      
E608 9737             (                    ROMbasic.ASM):01886 LB35C     STA  VARNAM         SAVE INPUT CHARACTER 
E60A 9D82             (                    ROMbasic.ASM):01887           JSR  GETCCH         GET CURRENT INPUT CHARACTER 
E60C 8D40             (                    ROMbasic.ASM):01888           BSR  LB3A2          SET CARRY IF NOT ALPHA 
E60E 1025FF16         (                    ROMbasic.ASM):01889           LBCS LB277          SYNTAX ERROR IF NOT ALPHA 
E612 5F               (                    ROMbasic.ASM):01890           CLRB                DEFAULT 2ND VARIABLE CHARACTER TO ZERO 
E613 D706             (                    ROMbasic.ASM):01891           STB  VALTYP         SET VARIABLE TYPE TO NUMERIC 
E615 9D7C             (                    ROMbasic.ASM):01892           JSR  GETNCH         GET ANOTHER CHARACTER FROM BASIC 
E617 2504             (                    ROMbasic.ASM):01893           BCS  LB371          BRANCH IF NUMERIC (2ND CHARACTER IN 
                      (                    ROMbasic.ASM):01894 ;                             VARIABLE MAY BE NUMERIC) 
E619 8D33             (                    ROMbasic.ASM):01895           BSR  LB3A2          SET CARRY IF NOT ALPHA 
E61B 250A             (                    ROMbasic.ASM):01896           BCS  LB37B          BRANCH IF NOT ALPHA 
E61D 1F89             (                    ROMbasic.ASM):01897 LB371     TFR  A,B            SAVE 2ND CHARACTER IN ACCB 
                      (                    ROMbasic.ASM):01898 ; READ INPUT CHARACTERS UNTIL A NON ALPHA OR                      
                      (                    ROMbasic.ASM):01899 ; NON NUMERIC IS FOUND - IGNORE ALL CHARACTERS                      
                      (                    ROMbasic.ASM):01900 ; IN VARIABLE NAME AFTER THE 1ST TWO                      
E61F 9D7C             (                    ROMbasic.ASM):01901 LB373     JSR  GETNCH         GET AN INPUT CHARACTER 
E621 25FC             (                    ROMbasic.ASM):01902           BCS  LB373          BRANCH IF NUMERIC 
E623 8D29             (                    ROMbasic.ASM):01903           BSR  LB3A2          SET CARRY IF NOT ALPHA 
E625 24F8             (                    ROMbasic.ASM):01904           BCC  LB373          BRANCH IF ALPHA 
E627 8124             (                    ROMbasic.ASM):01905 LB37B     CMPA #'$            CHECK FOR A STRING VARIABLE 
E629 2606             (                    ROMbasic.ASM):01906           BNE  LB385          BRANCH IF IT IS NOT A STRING 
E62B 0306             (                    ROMbasic.ASM):01907           COM  VALTYP         SET VARIABLE TYPE TO STRING 
E62D CB80             (                    ROMbasic.ASM):01908           ADDB #$80           SET BIT 7 OF 2ND CHARACTER (STRING) 
E62F 9D7C             (                    ROMbasic.ASM):01909           JSR  GETNCH         GET AN INPUT CHARACTER 
E631 D738             (                    ROMbasic.ASM):01910 LB385     STB  VARNAM+1       SAVE 2ND CHARACTER IN VARNAM+1 
E633 9A08             (                    ROMbasic.ASM):01911           ORA  ARYDIS         OR IN THE ARRAY DISABLE FLAG - IF = $80, 
                      (                    ROMbasic.ASM):01912 ;              DON’T SEARCH FOR VARIABLES IN THE ARRAYS  
E635 8028             (                    ROMbasic.ASM):01913           SUBA #'(            IS THIS AN ARRAY VARIABLE? 
E637 10270075         (                    ROMbasic.ASM):01914           LBEQ LB404          BRANCH IF IT IS 
E63B 0F08             (                    ROMbasic.ASM):01915           CLR  ARYDIS         RESET THE ARRAY DISABLE FLAG 
E63D 9E1B             (                    ROMbasic.ASM):01916           LDX  VARTAB         POINT X TO THE START OF VARIABLES 
E63F DC37             (                    ROMbasic.ASM):01917           LDD  VARNAM         GET VARIABLE IN QUESTION 
E641 9C1D             (                    ROMbasic.ASM):01918 LB395     CMPX ARYTAB         COMPARE X TO THE END OF VARIABLES 
E643 2712             (                    ROMbasic.ASM):01919           BEQ  LB3AB          BRANCH IF END OF VARIABLES 
E645 10A381           (                    ROMbasic.ASM):01920           CMPD ,X++           * COMPARE VARIABLE IN QUESTION TO CURRENT 
E648 273E             (                    ROMbasic.ASM):01921           BEQ  LB3DC          * VARIABLE AND BRANCH IF MATCH 
E64A 3005             (                    ROMbasic.ASM):01922           LEAX 5,X            = MOVE POINTER TO NEXT VARIABLE AND 
E64C 20F3             (                    ROMbasic.ASM):01923           BRA  LB395          = KEEP LOOKING 
                      (                    ROMbasic.ASM):01924                                
                      (                    ROMbasic.ASM):01925 ; SET CARRY IF NOT UPPER CASE ALPHA                      
E64E 8141             (                    ROMbasic.ASM):01926 LB3A2     CMPA #'A            * CARRY SET IF < ‘A’ 
E650 2504             (                    ROMbasic.ASM):01927           BCS  LB3AA          * 
E652 805B             (                    ROMbasic.ASM):01928           SUBA #'Z+1          = 
                      (                    ROMbasic.ASM):01929 ;         SUBA #-('Z+1)       = CARRY CLEAR IF <= 'Z' 
E654 80A5             (                    ROMbasic.ASM):01930           FCB  $80,$A5         
E656 39               (                    ROMbasic.ASM):01931 LB3AA     RTS                  
                      (                    ROMbasic.ASM):01932 ; PUT A NEW VARIABLE IN TABLE OF VARIABLES                      
E657 8E0074           (                    ROMbasic.ASM):01933 LB3AB     LDX  #ZERO          POINT X TO ZERO LOCATION 
E65A EEE4             (                    ROMbasic.ASM):01934           LDU  ,S             GET CURRENT RETURN ADDRESS 
E65C 1183E538         (                    ROMbasic.ASM):01935           CMPU #LB287         DID WE COME FROM ‘EVALUATE ALPHA EXPR’? 
E660 2728             (                    ROMbasic.ASM):01936           BEQ  LB3DE          YES - RETURN A ZERO VALUE 
E662 DC1F             (                    ROMbasic.ASM):01937           LDD  ARYEND         * GET END OF ARRAYS ADDRESS AND 
E664 DD43             (                    ROMbasic.ASM):01938           STD  V43            * SAVE IT AT V43 
E666 C30007           (                    ROMbasic.ASM):01939           ADDD #7             = ADD 7 TO END OF ARRAYS (EACH 
E669 DD41             (                    ROMbasic.ASM):01940           STD  V41            = VARIABLE = 7 BYTES) AND SAVE AT V41 
E66B 9E1D             (                    ROMbasic.ASM):01941           LDX  ARYTAB         * GET END OF VARIABLES AND SAVE AT V47 
E66D 9F47             (                    ROMbasic.ASM):01942           STX  V47            * 
E66F BDDF03           (                    ROMbasic.ASM):01943           JSR  LAC1E          MAKE A SEVEN BYTE SLOT FOR NEW VARIABLE AT 
                      (                    ROMbasic.ASM):01944 ;         TOP  OF VARIABLES    
E672 9E41             (                    ROMbasic.ASM):01945           LDX  V41            = GET NEW END OF ARRAYS AND SAVE IT 
E674 9F1F             (                    ROMbasic.ASM):01946           STX  ARYEND         = 
E676 9E45             (                    ROMbasic.ASM):01947           LDX  V45            * GET NEW END OF VARIABLES AND SAVE IT 
E678 9F1D             (                    ROMbasic.ASM):01948           STX  ARYTAB         * 
E67A 9E47             (                    ROMbasic.ASM):01949           LDX  V47            GET OLD END OF VARIABLES 
E67C DC37             (                    ROMbasic.ASM):01950           LDD  VARNAM         GET NEW VARIABLE NAME 
E67E ED81             (                    ROMbasic.ASM):01951           STD  ,X++           SAVE VARIABLE NAME 
E680 4F               (                    ROMbasic.ASM):01952           CLRA                * ZERO OUT THE FP VALUE OF THE NUMERIC 
E681 5F               (                    ROMbasic.ASM):01953           CLRB                * VARIABLE OR THE LENGTH AND ADDRESS 
E682 ED84             (                    ROMbasic.ASM):01954           STD  ,X             * OF A STRING VARIABLE 
E684 ED02             (                    ROMbasic.ASM):01955           STD  2,X            * 
E686 A704             (                    ROMbasic.ASM):01956           STA  4,X            * 
E688 9F39             (                    ROMbasic.ASM):01957 LB3DC     STX  VARPTR         STORE ADDRESS OF VARIABLE VALUE 
E68A 39               (                    ROMbasic.ASM):01958 LB3DE     RTS                  
                      (                    ROMbasic.ASM):01959 ;                              
E68B 9080000000       (                    ROMbasic.ASM):01960 LB3DF     FCB  $90,$80,$00,$00,$00 * FLOATING POINT -32768 
                      (                    ROMbasic.ASM):01961 ;                             SMALLEST SIGNED TWO BYTE INTEGER 
                      (                    ROMbasic.ASM):01962 ;                              
E690 9D7C             (                    ROMbasic.ASM):01963 LB3E4     JSR  GETNCH         GET AN INPUT CHARACTER FROM BASIC 
E692 BDE3F2           (                    ROMbasic.ASM):01964 LB3E6     JSR  LB141          GO EVALUATE NUMERIC EXPRESSION 
E695 9654             (                    ROMbasic.ASM):01965 LB3E9     LDA  FP0SGN         GET FPA0 MANTISSA SIGN 
E697 2B5D             (                    ROMbasic.ASM):01966           BMI  LB44A          ‘FC’ ERROR IF NEGATIVE NUMBER 
                      (                    ROMbasic.ASM):01967                                
                      (                    ROMbasic.ASM):01968                                
E699 BDE3F4           (                    ROMbasic.ASM):01969 INTCNV    JSR  LB143          ‘TM’ ERROR IF STRING VARIABLE 
E69C 964F             (                    ROMbasic.ASM):01970           LDA  FP0EXP         GET FPA0 EXPONENT 
E69E 8190             (                    ROMbasic.ASM):01971           CMPA #$90           * COMPARE TO 32768 - LARGEST INTEGER EXPONENT AND 
E6A0 2508             (                    ROMbasic.ASM):01972           BCS  LB3FE          * BRANCH IF FPA0 < 32768 
E6A2 8EE68B           (                    ROMbasic.ASM):01973           LDX  #LB3DF         POINT X TO FP VALUE OF -32768 
E6A5 BDEF07           (                    ROMbasic.ASM):01974           JSR  LBC96          COMPARE -32768 TO FPA0 
E6A8 264C             (                    ROMbasic.ASM):01975           BNE  LB44A          ‘FC’ ERROR IF NOT = 
E6AA BDEF39           (                    ROMbasic.ASM):01976 LB3FE     JSR  LBCC8          CONVERT FPA0 TO A TWO BYTE INTEGER 
E6AD DC52             (                    ROMbasic.ASM):01977           LDD  FPA0+2         GET THE INTEGER 
E6AF 39               (                    ROMbasic.ASM):01978           RTS                  
                      (                    ROMbasic.ASM):01979 ; EVALUATE AN ARRAY VARIABLE                      
E6B0 DC05             (                    ROMbasic.ASM):01980 LB404     LDD  DIMFLG         GET ARRAY FLAG AND VARIABLE TYPE 
E6B2 3406             (                    ROMbasic.ASM):01981           PSHS B,A            SAVE THEM ON STACK 
E6B4 12               (                    ROMbasic.ASM):01982           NOP                 DEAD SPACE CAUSED BY 1.2 REVISION 
E6B5 5F               (                    ROMbasic.ASM):01983           CLRB                RESET DIMENSION COUNTER 
E6B6 9E37             (                    ROMbasic.ASM):01984 LB40A     LDX  VARNAM         GET VARIABLE NAME 
E6B8 3414             (                    ROMbasic.ASM):01985           PSHS X,B            SAVE VARIABLE NAME AND DIMENSION COUNTER 
E6BA 8DD4             (                    ROMbasic.ASM):01986           BSR  LB3E4          EVALUATE EXPRESSION (DIMENSlON LENGTH) 
E6BC 3534             (                    ROMbasic.ASM):01987           PULS B,X,Y          PULL OFF VARIABLE NAME, DIMENSlON COUNTER, 
                      (                    ROMbasic.ASM):01988 ;                             ARRAY FLAG 
E6BE 9F37             (                    ROMbasic.ASM):01989           STX  VARNAM         SAVE VARIABLE NAME AND VARIABLE TYPE 
E6C0 DE52             (                    ROMbasic.ASM):01990           LDU  FPA0+2         GET DIMENSION LENGTH 
E6C2 3460             (                    ROMbasic.ASM):01991           PSHS U,Y            SAVE DIMENSION LENGTH, ARRAY FLAG, VARIABLE TYPE 
E6C4 5C               (                    ROMbasic.ASM):01992           INCB                INCREASE DIMENSION COUNTER 
E6C5 9D82             (                    ROMbasic.ASM):01993           JSR  GETCCH         GET CURRENT INPUT CHARACTER 
E6C7 812C             (                    ROMbasic.ASM):01994           CMPA #',            CHECK FOR ANOTHER DIMENSION 
E6C9 27EB             (                    ROMbasic.ASM):01995           BEQ  LB40A          BRANCH IF MORE 
E6CB D703             (                    ROMbasic.ASM):01996           STB  TMPLOC         SAVE DIMENSION COUNTER 
E6CD BDE518           (                    ROMbasic.ASM):01997           JSR  LB267          SYNTAX CHECK FOR A ‘)‘ 
E6D0 3506             (                    ROMbasic.ASM):01998           PULS A,B            * RESTORE VARIABLE TYPE AND ARRAY 
E6D2 DD05             (                    ROMbasic.ASM):01999           STD  DIMFLG         * FLAG - LEAVE DIMENSION LENGTH ON STACK 
E6D4 9E1D             (                    ROMbasic.ASM):02000           LDX  ARYTAB         GET START OF ARRAYS 
E6D6 9C1F             (                    ROMbasic.ASM):02001 LB42A     CMPX ARYEND         COMPARE TO END OF ARRAYS 
E6D8 2721             (                    ROMbasic.ASM):02002           BEQ  LB44F          BRANCH IF NO MATCH FOUND 
E6DA DC37             (                    ROMbasic.ASM):02003           LDD  VARNAM         GET VARIABLE IN QUESTION 
E6DC 10A384           (                    ROMbasic.ASM):02004           CMPD ,X             COMPARE TO CURRENT VARIABLE 
E6DF 2706             (                    ROMbasic.ASM):02005           BEQ  LB43B          BRANCH IF = 
E6E1 EC02             (                    ROMbasic.ASM):02006           LDD  2,X            GET OFFSET TO NEXT ARRAY VARIABLE 
E6E3 308B             (                    ROMbasic.ASM):02007           LEAX D,X            ADD TO CURRENT POINTER 
E6E5 20EF             (                    ROMbasic.ASM):02008           BRA  LB42A          KEEP SEARCHING 
E6E7 C612             (                    ROMbasic.ASM):02009 LB43B     LDB  #2*9           ‘REDIMENSIONED ARRAY’ ERROR 
E6E9 9605             (                    ROMbasic.ASM):02010           LDA  DIMFLG         * TEST ARRAY FLAG - IF <>0 YOU ARE TRYING 
E6EB 260B             (                    ROMbasic.ASM):02011           BNE  LB44C          * TO REDIMENSION AN ARRAY 
E6ED D603             (                    ROMbasic.ASM):02012           LDB  TMPLOC         GET NUMBER OF DIMENSIONS IN ARRAY 
E6EF E104             (                    ROMbasic.ASM):02013           CMPB 4,X            COMPARE TO THIS ARRAYS DIMENSIONS 
E6F1 2759             (                    ROMbasic.ASM):02014           BEQ  LB4A0          BRANCH IF = 
E6F3 C610             (                    ROMbasic.ASM):02015 LB447     LDB  #8*2           ‘BAD SUBSCRIPT’ 
E6F5 8C               (                    ROMbasic.ASM):02016           FCB  SKP2           SKIP TWO BYTES 
E6F6 C608             (                    ROMbasic.ASM):02017 LB44A     LDB  #4*2           ‘ILLEGAL FUNCTION CALL’ 
E6F8 7EDF2B           (                    ROMbasic.ASM):02018 LB44C     JMP  LAC46          JUMP TO ERROR SERVICING ROUTINE 
                      (                    ROMbasic.ASM):02019                                
                      (                    ROMbasic.ASM):02020 ; INSERT A NEW ARRAY INTO ARRAY VARIABLES                      
                      (                    ROMbasic.ASM):02021 ; EACH SET OF ARRAY VARIABLES IS PRECEEDED BY A DE-                      
                      (                    ROMbasic.ASM):02022 ; SCRIPTOR BLOCK COMPOSED OF 5+2*N BYTES WHERE N IS THE                      
                      (                    ROMbasic.ASM):02023 ; NUMBER OF DIMENSIONS IN THE ARRAY. THE BLOCK IS DEFINED                      
                      (                    ROMbasic.ASM):02024 ; AS FOLLOWS: BYTES 0,1:VARIABLE’S NAME; 2,3:TOTAL LENGTH                      
                      (                    ROMbasic.ASM):02025 ; OF ARRAY ITEMS AND DESCRIPTOR BLOCK; 4:NUMBER OF DIMEN-                      
                      (                    ROMbasic.ASM):02026 ; ISIONS; 5,6:LENGTH OF DIMENSION 1; 7,8:LENGTH OF DIMEN-                      
                      (                    ROMbasic.ASM):02027 ; SION 2;… 4+N,5+N:LENGTH OF DIMENSION N.                      
                      (                    ROMbasic.ASM):02028                                
E6FB CC0005           (                    ROMbasic.ASM):02029 LB44F     LDD  #5             * 5 BYTES/ARRAY ENTRY SAVE AT COEFPT 
E6FE DD64             (                    ROMbasic.ASM):02030           STD  COEFPT         * 
E700 DC37             (                    ROMbasic.ASM):02031           LDD  VARNAM         = GET NAME OF ARRAY AND SAVE IN 
E702 ED84             (                    ROMbasic.ASM):02032           STD  ,X             = FIRST 2 BYTES OF DESCRIPTOR 
E704 D603             (                    ROMbasic.ASM):02033           LDB  TMPLOC         GET NUMBER OF DIMENSIONS AND SAVE IN 
E706 E704             (                    ROMbasic.ASM):02034           STB  4,X            * 5TH BYTE OF DESCRIPTOR 
E708 BDDF18           (                    ROMbasic.ASM):02035           JSR  LAC33          CHECK FOR ROOM FOR DESCRIPTOR IN FREE RAM 
E70B 9F41             (                    ROMbasic.ASM):02036           STX  V41            TEMPORARILY SAVE DESCRIPTOR ADDRESS 
E70D C60B             (                    ROMbasic.ASM):02037 LB461     LDB  #11            * DEFAULT DIMENSION VALUE:X(10) 
E70F 4F               (                    ROMbasic.ASM):02038           CLRA                * 
E710 0D05             (                    ROMbasic.ASM):02039           TST  DIMFLG         = CHECK ARRAY FLAG AND BRANCH IF 
E712 2705             (                    ROMbasic.ASM):02040           BEQ  LB46D          = NOT DIMENSIONING AN ARRAY 
E714 3506             (                    ROMbasic.ASM):02041           PULS A,B            GET DIMENSION LENGTH 
E716 C30001           (                    ROMbasic.ASM):02042           ADDD #1             ADD ONE (X(0) HAS A LENGTH OF ONE) 
E719 ED05             (                    ROMbasic.ASM):02043 LB46D     STD  5,X            SAVE LENGTH OF ARRAY DIMENSION 
E71B 8D5D             (                    ROMbasic.ASM):02044           BSR  LB4CE          MULTIPLY ACCUM ARRAY SIZE NUMBER LENGTH 
                      (                    ROMbasic.ASM):02045 ;                             OF NEW DIMENSION 
E71D DD64             (                    ROMbasic.ASM):02046           STD  COEFPT         TEMP STORE NEW CURRENT ACCUMULATED ARRAY SIZE 
E71F 3002             (                    ROMbasic.ASM):02047           LEAX 2,X            BUMP POINTER UP TWO 
E721 0A03             (                    ROMbasic.ASM):02048           DEC  TMPLOC         * DECREMENT DIMENSION COUNTER AND BRANCH IF 
E723 26E8             (                    ROMbasic.ASM):02049           BNE  LB461          * NOT DONE WITH ALL DIMENSIONS 
E725 9F0F             (                    ROMbasic.ASM):02050           STX  TEMPTR         SAVE ADDRESS OF (END OF ARRAY DESCRIPTOR - 5) 
E727 D30F             (                    ROMbasic.ASM):02051           ADDD TEMPTR         ADD TOTAL SIZE OF NEW ARRAY 
E729 1025F7FC         (                    ROMbasic.ASM):02052           LBCS LAC44          ‘OM’ ERROR IF > $FFFF 
E72D 1F01             (                    ROMbasic.ASM):02053           TFR  D,X            SAVE END OF ARRAY IN X 
E72F BDDF1C           (                    ROMbasic.ASM):02054           JSR  LAC37          MAKE SURE THERE IS ENOUGH FREE RAM FOR ARRAY 
E732 830035           (                    ROMbasic.ASM):02055           SUBD #STKBUF-5      SUBTRACT OUT THE (STACK BUFFER - 5) 
E735 DD1F             (                    ROMbasic.ASM):02056           STD  ARYEND         SAVE NEW END OF ARRAYS 
E737 4F               (                    ROMbasic.ASM):02057           CLRA                ZERO = TERMINATOR BYTE 
E738 301F             (                    ROMbasic.ASM):02058 LB48C     LEAX -1,X           * STORE TWO TERMINATOR BYTES AT 
E73A A705             (                    ROMbasic.ASM):02059           STA  5,X            * THE END OF THE ARRAY DESCRIPTOR 
E73C 9C0F             (                    ROMbasic.ASM):02060           CMPX TEMPTR         * 
E73E 26F8             (                    ROMbasic.ASM):02061           BNE  LB48C          * 
E740 9E41             (                    ROMbasic.ASM):02062           LDX  V41            GET ADDRESS OF START OF DESCRIPTOR 
E742 961F             (                    ROMbasic.ASM):02063           LDA  ARYEND         GET MSB OF END OF ARRAYS; LSB ALREADY THERE 
E744 9341             (                    ROMbasic.ASM):02064           SUBD V41            SUBTRACT OUT ADDRESS OF START OF DESCRIPTOR 
E746 ED02             (                    ROMbasic.ASM):02065           STD  2,X            SAVE LENGTH OF (ARRAY AND DESCRIPTOR) 
E748 9605             (                    ROMbasic.ASM):02066           LDA  DIMFLG         * GET ARRAY FLAG AND BRANCH 
E74A 262D             (                    ROMbasic.ASM):02067           BNE  LB4CD          * BACK IF DIMENSIONING 
                      (                    ROMbasic.ASM):02068 ; CALCULATE POINTER TO CORRECT ELEMENT                      
E74C E604             (                    ROMbasic.ASM):02069 LB4A0     LDB  4,X            GET THE NUMBER OF DIMENSIONS 
E74E D703             (                    ROMbasic.ASM):02070           STB  TMPLOC         TEMPORARILY SAVE 
E750 4F               (                    ROMbasic.ASM):02071           CLRA                * INITIALIZE POINTER 
E751 5F               (                    ROMbasic.ASM):02072           CLRB                * TO ZERO 
E752 DD64             (                    ROMbasic.ASM):02073 LB4A6     STD  COEFPT         SAVE ACCUMULATED POINTER 
E754 3506             (                    ROMbasic.ASM):02074           PULS A,B            * PULL DIMENSION ARGUMENT OFF THE 
E756 DD52             (                    ROMbasic.ASM):02075           STD  FPA0+2         * STACK AND SAVE IT 
E758 10A305           (                    ROMbasic.ASM):02076           CMPD 5,X            COMPARE TO STORED ‘DIM’ ARGUMENT 
E75B 243A             (                    ROMbasic.ASM):02077           BCC  LB4EB          ‘BS’ ERROR IF > = "DIM" ARGUMENT 
E75D DE64             (                    ROMbasic.ASM):02078           LDU  COEFPT         * GET ACCUMULATED POINTER AND 
E75F 2704             (                    ROMbasic.ASM):02079           BEQ  LB4B9          * BRANCH IF 1ST DIMENSION 
E761 8D17             (                    ROMbasic.ASM):02080           BSR  LB4CE          = MULTIPLY ACCUMULATED POINTER AND DIMENSION 
E763 D352             (                    ROMbasic.ASM):02081           ADDD FPA0+2         = LENGTH AND ADD TO CURRENT ARGUMENT 
E765 3002             (                    ROMbasic.ASM):02082 LB4B9     LEAX 2,X            MOVE POINTER TO NEXT DIMENSION 
E767 0A03             (                    ROMbasic.ASM):02083           DEC  TMPLOC         * DECREMENT DIMENSION COUNTER AND 
E769 26E7             (                    ROMbasic.ASM):02084           BNE  LB4A6          * BRANCH IF ANY DIMENSIONS LEFT 
                      (                    ROMbasic.ASM):02085 ; MULTIPLY ACCD BY 5 - 5 BYTES/ARRAY VALUE                      
E76B EDE3             (                    ROMbasic.ASM):02086           STD  ,--S            
E76D 58               (                    ROMbasic.ASM):02087           ASLB                 
E76E 49               (                    ROMbasic.ASM):02088           ROLA                TIMES 2 
E76F 58               (                    ROMbasic.ASM):02089           ASLB                 
E770 49               (                    ROMbasic.ASM):02090           ROLA                TIMES 4 
E771 E3E1             (                    ROMbasic.ASM):02091           ADDD ,S++           TIMES 5 
E773 308B             (                    ROMbasic.ASM):02092           LEAX D,X            ADD OFFSET TO START OF ARRAY 
E775 3005             (                    ROMbasic.ASM):02093           LEAX 5,X            ADJUST POINTER FOR SIZE OF DESCRIPTOR 
E777 9F39             (                    ROMbasic.ASM):02094           STX  VARPTR         SAVE POINTER TO ARRAY VALUE 
E779 39               (                    ROMbasic.ASM):02095 LB4CD     RTS                  
                      (                    ROMbasic.ASM):02096 ; MULTIPLY 2 BYTE NUMBER IN 5,X BY THE 2 BYTE NUMBER                      
                      (                    ROMbasic.ASM):02097 ; IN COEFPT. RETURN RESULT IN ACCD, BS ERROR IF > $FFFF                      
E77A 8610             (                    ROMbasic.ASM):02098 LB4CE     LDA  #16            16 SHIFTS TO DO A MULTIPLY 
E77C 9745             (                    ROMbasic.ASM):02099           STA  V45            SHIFT COUNTER 
E77E EC05             (                    ROMbasic.ASM):02100           LDD  5,X            * GET SIZE OF DIMENSION 
E780 DD17             (                    ROMbasic.ASM):02101           STD  BOTSTK         * AND SAVE IT 
E782 4F               (                    ROMbasic.ASM):02102           CLRA                * ZERO 
E783 5F               (                    ROMbasic.ASM):02103           CLRB                * ACCD 
E784 58               (                    ROMbasic.ASM):02104 LB4D8     ASLB                = SHIFT ACCB LEFT 
E785 49               (                    ROMbasic.ASM):02105           ROLA                = ONE BIT 
E786 250F             (                    ROMbasic.ASM):02106           BCS  LB4EB          BS' ERROR IF CARRY 
E788 0865             (                    ROMbasic.ASM):02107           ASL  COEFPT+1       * SHIFT MULTIPLICAND LEFT ONE 
E78A 0964             (                    ROMbasic.ASM):02108           ROL  COEFPT         * BIT - ADD MULTIPLIER TO ACCUMULATOR 
E78C 2404             (                    ROMbasic.ASM):02109           BCC  LB4E6          * IF CARRY <> 0 
E78E D317             (                    ROMbasic.ASM):02110           ADDD BOTSTK         ADD MULTIPLIER TO ACCD 
E790 2505             (                    ROMbasic.ASM):02111           BCS  LB4EB          BS' ERROR IF CARRY (>$FFFF) 
E792 0A45             (                    ROMbasic.ASM):02112 LB4E6     DEC  V45            * DECREMENT SHIFT COUNTER 
E794 26EE             (                    ROMbasic.ASM):02113           BNE  LB4D8          * IF NOT DONE 
E796 39               (                    ROMbasic.ASM):02114           RTS                  
E797 7EE6F3           (                    ROMbasic.ASM):02115 LB4EB     JMP  LB447          BS' ERROR 
                      (                    ROMbasic.ASM):02116 ;                              
                      (                    ROMbasic.ASM):02117 ; MEM                          
                      (                    ROMbasic.ASM):02118 ; THIS IS NOT A TRUE INDICATOR OF FREE MEMORY BECAUSE                      
                      (                    ROMbasic.ASM):02119 ; BASIC REQUIRES A STKBUF SIZE BUFFER FOR THE STACK                      
                      (                    ROMbasic.ASM):02120 ; FOR WHICH MEM DOES NOT ALLOW.                      
                      (                    ROMbasic.ASM):02121 ;                              
E79A 1F40             (                    ROMbasic.ASM):02122 MEM       TFR  S,D            PUT STACK POINTER INTO ACCD 
E79C 931F             (                    ROMbasic.ASM):02123           SUBD ARYEND         SUBTRACT END OF ARRAYS 
E79E 21               (                    ROMbasic.ASM):02124           FCB  SKP1           SKIP ONE BYTE 
                      (                    ROMbasic.ASM):02125 ;CONVERT THE VALUE IN ACCB INTO A FP NUMBER IN FPA0                      
E79F 4F               (                    ROMbasic.ASM):02126 LB4F3     CLRA                CLEAR MS BYTE OF ACCD 
                      (                    ROMbasic.ASM):02127 ; CONVERT THE VALUE IN ACCD INTO A FLOATING POINT NUMBER IN FPA0                      
E7A0 0F06             (                    ROMbasic.ASM):02128 GIVABF    CLR  VALTYP         SET VARIABLE TYPE TO NUMERIC 
E7A2 DD50             (                    ROMbasic.ASM):02129           STD  FPA0           SAVE ACCD IN TOP OF FACA 
E7A4 C690             (                    ROMbasic.ASM):02130           LDB  #$90           EXPONENT REQUIRED IF THE TOP TWO BYTES 
                      (                    ROMbasic.ASM):02131 ;         OF   FPA0 ARE TO BE TREATED AS AN INTEGER IN FPA0  
E7A6 7EEEF3           (                    ROMbasic.ASM):02132           JMP  LBC82          CONVERT THE REST OF FPA0 TO AN INTEGER 
                      (                    ROMbasic.ASM):02133                                
                      (                    ROMbasic.ASM):02134 ; STR$                         
E7A9 BDE3F4           (                    ROMbasic.ASM):02135 STR       JSR  LB143          TM' ERROR IF STRING VARIABLE 
E7AC CE01F0           (                    ROMbasic.ASM):02136           LDU  #STRBUF+2      *CONVERT FP NUMBER TO ASCII STRING IN 
E7AF BDF04D           (                    ROMbasic.ASM):02137           JSR  LBDDC          *THE STRING BUFFER 
E7B2 3262             (                    ROMbasic.ASM):02138           LEAS 2,S            PURGE THE RETURN ADDRESS FROM THE STACK 
E7B4 8E01EF           (                    ROMbasic.ASM):02139           LDX  #STRBUF+1      *POINT X TO STRING BUFFER AND SAVE 
E7B7 200B             (                    ROMbasic.ASM):02140           BRA  LB518          *THE STRING IN THE STRING SPACE 
                      (                    ROMbasic.ASM):02141 ; RESERVE ACCB BYTES OF STRING SPACE. RETURN START                      
                      (                    ROMbasic.ASM):02142 ; ADDRESS IN (X) AND FRESPC                      
E7B9 9F4D             (                    ROMbasic.ASM):02143 LB50D     STX  V4D            SAVE X IN V4D 
E7BB 8D5C             (                    ROMbasic.ASM):02144 LB50F     BSR  LB56D          RESERVE ACCB BYTES IN STRING SPACE 
E7BD 9F58             (                    ROMbasic.ASM):02145 LB511     STX  STRDES+2       SAVE NEW STRING ADDRESS 
E7BF D756             (                    ROMbasic.ASM):02146           STB  STRDES         SAVE LENGTH OF RESERVED BLOCK 
E7C1 39               (                    ROMbasic.ASM):02147           RTS                  
E7C2 301F             (                    ROMbasic.ASM):02148 LB516     LEAX -1,X           MOVE POINTER BACK ONE 
                      (                    ROMbasic.ASM):02149 ; SCAN A LINE FROM (X) UNTIL AN END OF LINE FLAG (ZERO) OR                      
                      (                    ROMbasic.ASM):02150 ; EITHER OF THE TWO TERMINATORS STORED IN CHARAC OR ENDCHR IS MATCHED.                      
                      (                    ROMbasic.ASM):02151 ; THE RESULTING STRING IS STORED IN THE STRING SPACE                      
                      (                    ROMbasic.ASM):02152 ; ONLY IF THE START OF THE STRING IS <= STRBUF+2                      
E7C4 8622             (                    ROMbasic.ASM):02153 LB518     LDA  #'"            * INITIALIZE 
E7C6 9701             (                    ROMbasic.ASM):02154           STA  CHARAC         * TERMINATORS 
E7C8 9702             (                    ROMbasic.ASM):02155 LB51A     STA  ENDCHR         * TO " 
E7CA 3001             (                    ROMbasic.ASM):02156 LB51E     LEAX 1,X            MOVE POINTER UP ONE 
E7CC 9F62             (                    ROMbasic.ASM):02157           STX  RESSGN         TEMPORARILY SAVE START OF STRING 
E7CE 9F58             (                    ROMbasic.ASM):02158           STX  STRDES+2       SAVE START OF STRING IN TEMP DESCRIPTOR 
E7D0 C6FF             (                    ROMbasic.ASM):02159           LDB  #-1            INITIALIZE CHARACTER COUNTER TO - 1 
E7D2 5C               (                    ROMbasic.ASM):02160 LB526     INCB                INCREMENT CHARACTER COUNTER 
E7D3 A680             (                    ROMbasic.ASM):02161           LDA  ,X+            GET CHARACTER 
E7D5 270C             (                    ROMbasic.ASM):02162           BEQ  LB537          BRANCH IF END OF LINE 
E7D7 9101             (                    ROMbasic.ASM):02163           CMPA CHARAC         * CHECK FOR TERMINATORS 
E7D9 2704             (                    ROMbasic.ASM):02164           BEQ  LB533          * IN CHARAC AND ENDCHR 
E7DB 9102             (                    ROMbasic.ASM):02165           CMPA ENDCHR         * DON’T MOVE POINTER BACK 
E7DD 26F3             (                    ROMbasic.ASM):02166           BNE  LB526          * ONE IF TERMINATOR IS "MATCHED" 
E7DF 8122             (                    ROMbasic.ASM):02167 LB533     CMPA #'"            = COMPARE CHARACTER TO STRING DELIMITER 
E7E1 2702             (                    ROMbasic.ASM):02168           BEQ  LB539          = & DON’T MOVE POINTER BACK IF SO 
E7E3 301F             (                    ROMbasic.ASM):02169 LB537     LEAX -1,X           MOVE POINTER BACK ONE 
E7E5 9F64             (                    ROMbasic.ASM):02170 LB539     STX  COEFPT         SAVE END OF STRING ADDRESS 
E7E7 D756             (                    ROMbasic.ASM):02171           STB  STRDES         SAVE STRING LENGTH IN TEMP DESCRIPTOR 
E7E9 DE62             (                    ROMbasic.ASM):02172           LDU  RESSGN         GET INITlAL STRING START 
E7EB 118301F0         (                    ROMbasic.ASM):02173           CMPU #STRBUF+2      COMPARE TO START OF STRING BUFFER 
E7EF 2207             (                    ROMbasic.ASM):02174 LB543     BHI  LB54C          BRANCH IF > START OF STRING BUFFER 
E7F1 8DC6             (                    ROMbasic.ASM):02175           BSR  LB50D          GO RESERVE SPACE FOR THE STRING 
E7F3 9E62             (                    ROMbasic.ASM):02176           LDX  RESSGN         POINT X TO THE BEGINNING OF THE STRING 
E7F5 BDE8F1           (                    ROMbasic.ASM):02177           JSR  LB645          MOVE (B) BYTES FROM (X) TO 
                      (                    ROMbasic.ASM):02178 ;                             [FRESPC] - MOVE STRING DATA 
                      (                    ROMbasic.ASM):02179 ; PUT DIRECT PAGE STRING DESCRIPTOR BUFFER DATA                      
                      (                    ROMbasic.ASM):02180 ; ON THE STRING STACK. SET VARIABLE TYPE TO STRING                      
E7F8 9E0B             (                    ROMbasic.ASM):02181 LB54C     LDX  TEMPPT         GET NEXT AVAILABLE STRING STACK DESCRIPTOR 
E7FA 8C00F1           (                    ROMbasic.ASM):02182           CMPX #LINHDR        COMPARE TO TOP OF STRING DESCRIPTOR STACK - WAS #CFNBUF 
E7FD 2605             (                    ROMbasic.ASM):02183           BNE  LB558          FORMULA O.K. 
E7FF C61E             (                    ROMbasic.ASM):02184           LDB  #15*2          STRING FORMULA TOO COMPLEX' ERROR 
E801 7EDF2B           (                    ROMbasic.ASM):02185 LB555     JMP  LAC46          JUMP TO ERROR SERVICING ROUTINE 
E804 9656             (                    ROMbasic.ASM):02186 LB558     LDA  STRDES         * GET LENGTH OF STRING AND SAVE IT 
                      (                    ROMbasic.ASM):02187 ;         STA  ,X             * IN BYTE 0 OF DESCRIPTOR 
E806 A700             (                    ROMbasic.ASM):02188           FCB  $A7,$00         
E808 DC58             (                    ROMbasic.ASM):02189           LDD  STRDES+2       = GET START ADDRESS OF ACTUAL STRING 
E80A ED02             (                    ROMbasic.ASM):02190           STD  2,X            = AND SAVE IN BYTES 2,3 OF DESCRIPTOR 
E80C 86FF             (                    ROMbasic.ASM):02191           LDA  #$FF           * VARIABLE TYPE = STRING 
E80E 9706             (                    ROMbasic.ASM):02192           STA  VALTYP         * SAVE IN VARIABLE TYPE FLAG 
E810 9F0D             (                    ROMbasic.ASM):02193           STX  LASTPT         = SAVE START OF DESCRIPTOR 
E812 9F52             (                    ROMbasic.ASM):02194           STX  FPA0+2         = ADDRESS IN LASTPT AND FPA0 
E814 3005             (                    ROMbasic.ASM):02195           LEAX 5,X            5 BYTES/STRING DESCRIPTOR 
E816 9F0B             (                    ROMbasic.ASM):02196           STX  TEMPPT         NEXT AVAILABLE STRING VARIABLE DESCRIPTOR 
E818 39               (                    ROMbasic.ASM):02197           RTS                  
                      (                    ROMbasic.ASM):02198 ; RESERVE ACCB BYTES IN STRING STORAGE SPACE                      
                      (                    ROMbasic.ASM):02199 ; RETURN WITH THE STARTING ADDRESS OF THE                      
                      (                    ROMbasic.ASM):02200 ; RESERVED STRING SPACE IN (X) AND FRESPC                      
E819 0F07             (                    ROMbasic.ASM):02201 LB56D     CLR  GARBFL         CLEAR STRING REORGANIZATION FLAG 
E81B 4F               (                    ROMbasic.ASM):02202 LB56F     CLRA                * PUSH THE LENGTH OF THE 
E81C 3406             (                    ROMbasic.ASM):02203           PSHS B,A            * STRING ONTO THE STACK 
E81E DC23             (                    ROMbasic.ASM):02204           LDD  STRTAB         GET START OF STRING VARIABLES 
E820 A3E0             (                    ROMbasic.ASM):02205           SUBD ,S+            SUBTRACT STRING LENGTH 
E822 109321           (                    ROMbasic.ASM):02206           CMPD FRETOP         COMPARE TO START OF STRING STORAGE 
E825 250A             (                    ROMbasic.ASM):02207           BCS  LB585          IF BELOW START, THEN REORGANIZE 
E827 DD23             (                    ROMbasic.ASM):02208           STD  STRTAB         SAVE NEW START OF STRING VARIABLES 
E829 9E23             (                    ROMbasic.ASM):02209           LDX  STRTAB         GET START OF STRING VARIABLES 
E82B 3001             (                    ROMbasic.ASM):02210           LEAX 1,X            ADD ONE 
E82D 9F25             (                    ROMbasic.ASM):02211           STX  FRESPC         SAVE START ADDRESS OF NEWLY RESERVED SPACE 
E82F 3584             (                    ROMbasic.ASM):02212           PULS B,PC           RESTORE NUMBER OF BYTES RESERVED AND RETURN 
E831 C61A             (                    ROMbasic.ASM):02213 LB585     LDB  #2*13          OUT OF STRING SPACE' ERROR 
E833 0307             (                    ROMbasic.ASM):02214           COM  GARBFL         TOGGLE REORGANIZATiON FLAG 
E835 27CA             (                    ROMbasic.ASM):02215           BEQ  LB555          ERROR IF FRESHLY REORGANIZED 
E837 8D04             (                    ROMbasic.ASM):02216           BSR  LB591          GO REORGANIZE STRING SPACE 
E839 3504             (                    ROMbasic.ASM):02217           PULS B              GET BACK THE NUMBER OF BYTES TO RESERVE 
E83B 20DE             (                    ROMbasic.ASM):02218           BRA  LB56F          TRY TO RESERVE ACCB BYTES AGAIN 
                      (                    ROMbasic.ASM):02219 ; REORGANIZE THE STRING SPACE                      
E83D 9E27             (                    ROMbasic.ASM):02220 LB591     LDX  MEMSIZ         GET THE TOP OF STRING SPACE 
E83F 9F23             (                    ROMbasic.ASM):02221 LB593     STX  STRTAB         SAVE TOP OF UNORGANIZED STRING SPACE 
E841 4F               (                    ROMbasic.ASM):02222           CLRA                * ZERO OUT ACCD 
E842 5F               (                    ROMbasic.ASM):02223           CLRB                * AND RESET VARIABLE 
E843 DD4B             (                    ROMbasic.ASM):02224           STD  V4B            * POINTER TO 0 
E845 9E21             (                    ROMbasic.ASM):02225           LDX  FRETOP         POINT X TO START OF STRING SPACE 
E847 9F47             (                    ROMbasic.ASM):02226           STX  V47            SAVE POINTER IN V47 
E849 8E00C9           (                    ROMbasic.ASM):02227           LDX  #STRSTK        POINT X TO START OF STRING DESCRIPTOR STACK 
E84C 9C0B             (                    ROMbasic.ASM):02228 LB5A0     CMPX TEMPPT         COMPARE TO ADDRESS OF NEXT AVAILABLE DESCRIPTOR 
E84E 2704             (                    ROMbasic.ASM):02229           BEQ  LB5A8          BRANCH IF TOP OF STRING STACK 
E850 8D32             (                    ROMbasic.ASM):02230           BSR  LB5D8          CHECK FOR STRING IN UNORGANIZED STRING SPACE 
E852 20F8             (                    ROMbasic.ASM):02231           BRA  LB5A0          KEEP CHECKING 
E854 9E1B             (                    ROMbasic.ASM):02232 LB5A8     LDX  VARTAB         GET THE END OF BASIC PROGRAM 
E856 9C1D             (                    ROMbasic.ASM):02233 LB5AA     CMPX ARYTAB         COMPARE TO END OF VARIABLES 
E858 2704             (                    ROMbasic.ASM):02234           BEQ  LB5B2          BRANCH IF AT TOP OF VARIABLES 
E85A 8D22             (                    ROMbasic.ASM):02235           BSR  LB5D2          CHECK FOR STRING IN UNORGANIZED STRING SPACE 
E85C 20F8             (                    ROMbasic.ASM):02236           BRA  LB5AA          KEEP CHECKING VARIABLES 
E85E 9F41             (                    ROMbasic.ASM):02237 LB5B2     STX  V41            SAVE ADDRESS OF THE END OF VARIABLES 
E860 9E41             (                    ROMbasic.ASM):02238 LB5B4     LDX  V41            GET CURRENT ARRAY POINTER 
E862 9C1F             (                    ROMbasic.ASM):02239 LB5B6     CMPX ARYEND         COMPARE TO THE END OF ARRAYS 
E864 2735             (                    ROMbasic.ASM):02240           BEQ  LB5EF          BRANCH IF AT END OF ARRAYS 
E866 EC02             (                    ROMbasic.ASM):02241           LDD  2,X            GET LENGTH OF ARRAY AND DESCRIPTOR 
E868 D341             (                    ROMbasic.ASM):02242           ADDD V41            * ADD TO CURRENT ARRAY POINTER 
E86A DD41             (                    ROMbasic.ASM):02243           STD  V41            * AND SAVE IT 
E86C A601             (                    ROMbasic.ASM):02244           LDA  1,X            GET 1ST CHARACTER OF VARIABLE NAME 
E86E 2AF0             (                    ROMbasic.ASM):02245           BPL  LB5B4          BRANCH IF NUMERIC ARRAY 
E870 E604             (                    ROMbasic.ASM):02246           LDB  4,X            GET THE NUMBER OF DIMENSIONS IN THIS ARRAY 
E872 58               (                    ROMbasic.ASM):02247           ASLB                MULTIPLY BY 2 
E873 CB05             (                    ROMbasic.ASM):02248           ADDB #5             ADD FIVE BYTES (VARIABLE NAME, ARRAY 
                      (                    ROMbasic.ASM):02249 ;                             LENGTH, NUMBER DIMENSIONS) 
E875 3A               (                    ROMbasic.ASM):02250           ABX                 X NOW POINTS TO START OF ARRAY ELEMENTS 
E876 9C41             (                    ROMbasic.ASM):02251 LB5CA     CMPX V41            AT END OF THIS ARRAY? 
E878 27E8             (                    ROMbasic.ASM):02252           BEQ  LB5B6          YES - CHECK FOR ANOTHER 
E87A 8D08             (                    ROMbasic.ASM):02253           BSR  LB5D8          CHECK FOR STRING LOCATED IN 
                      (                    ROMbasic.ASM):02254 ;                             UNORGANIZED STRING SPACE 
E87C 20F8             (                    ROMbasic.ASM):02255           BRA  LB5CA          KEEP CHECKING ELEMENTS IN THIS ARRAY 
E87E A601             (                    ROMbasic.ASM):02256 LB5D2     LDA  1,X            GET F1RST BYTE OF VARIABLE NAME 
E880 3002             (                    ROMbasic.ASM):02257           LEAX 2,X            MOVE POINTER TO DESCRIPTOR 
E882 2A14             (                    ROMbasic.ASM):02258           BPL  LB5EC          BRANCH IF VARIABLE IS NUMERIC 
                      (                    ROMbasic.ASM):02259 ; SEARCH FOR STRING - ENTER WITH X POINTING TO                      
                      (                    ROMbasic.ASM):02260 ; THE STRING DESCRIPTOR. IF STRING IS STORED                      
                      (                    ROMbasic.ASM):02261 ; BETWEEN V47 AND STRTAB, SAVE DESCRIPTOR POINTER                      
                      (                    ROMbasic.ASM):02262 ; IN V4B AND RESET V47 TO STRING ADDRESS                      
E884 E684             (                    ROMbasic.ASM):02263 LB5D8     LDB  ,X             GET THE LENGTH OF THE STRING 
E886 2710             (                    ROMbasic.ASM):02264           BEQ  LB5EC          BRANCH IF NULL - NO STRING 
E888 EC02             (                    ROMbasic.ASM):02265           LDD  2,X            GET STARTING ADDRESS OF THE STRING 
E88A 109323           (                    ROMbasic.ASM):02266           CMPD STRTAB         COMPARE TO THE START OF STRING VARIABLES 
E88D 2209             (                    ROMbasic.ASM):02267           BHI  LB5EC          BRANCH IF THIS STRING IS STORED IN 
                      (                    ROMbasic.ASM):02268 ;              THE STRING VARIABLES  
E88F 109347           (                    ROMbasic.ASM):02269           CMPD V47            COMPARE TO START OF STRING SPACE 
E892 2304             (                    ROMbasic.ASM):02270           BLS  LB5EC          BRANCH IF NOT STORED IN THE STRING SPACE 
E894 9F4B             (                    ROMbasic.ASM):02271           STX  V4B            SAVE VARIABLE POINTER IF STORED IN STRING SPACE 
E896 DD47             (                    ROMbasic.ASM):02272           STD  V47            SAVE STRING STARTING ADDRESS 
E898 3005             (                    ROMbasic.ASM):02273 LB5EC     LEAX 5,X            MOVE TO NEXT VARIABLE DESCRIPTOR 
E89A 39               (                    ROMbasic.ASM):02274 LB5EE     RTS                  
E89B 9E4B             (                    ROMbasic.ASM):02275 LB5EF     LDX  V4B            GET ADDRESS OF THE DESCRIPTOR FOR THE 
                      (                    ROMbasic.ASM):02276 ;              STRING WHICH IS STORED IN THE HIGHEST RAM ADDRESS IN  
                      (                    ROMbasic.ASM):02277 ;              THE UNORGANIZED STRING SPACE  
E89D 27FB             (                    ROMbasic.ASM):02278           BEQ  LB5EE          BRANCH IF NONE FOUND AND REORGANIZATION DONE 
E89F 4F               (                    ROMbasic.ASM):02279           CLRA                CLEAR MS BYTE OF LENGTH 
E8A0 E684             (                    ROMbasic.ASM):02280           LDB  ,X             GET LENGTH OF STRING 
E8A2 5A               (                    ROMbasic.ASM):02281           DECB                SUBTRACT ONE 
E8A3 D347             (                    ROMbasic.ASM):02282           ADDD V47            ADD LENGTH OF STRING TO ITS STARTING ADDRESS 
E8A5 DD43             (                    ROMbasic.ASM):02283           STD  V43            SAVE AS MOVE STARTING ADDRESS 
E8A7 9E23             (                    ROMbasic.ASM):02284           LDX  STRTAB         POINT X TO THE START OF ORGANIZED STRING VARIABLES 
E8A9 9F41             (                    ROMbasic.ASM):02285           STX  V41            SAVE AS MOVE ENDING ADDRESS 
E8AB BDDF05           (                    ROMbasic.ASM):02286           JSR  LAC20          MOVE STRING FROM CURRENT POSITION TO THE 
                      (                    ROMbasic.ASM):02287 ;              TOP OF UNORGANIZED STRING SPACE  
E8AE 9E4B             (                    ROMbasic.ASM):02288           LDX  V4B            POINT X TO STRING DESCRIPTOR 
E8B0 DC45             (                    ROMbasic.ASM):02289           LDD  V45            * GET NEW STARTING ADDRESS OF STRING AND 
E8B2 ED02             (                    ROMbasic.ASM):02290           STD  2,X            * SAVE IT IN DESCRIPTOR 
E8B4 9E45             (                    ROMbasic.ASM):02291           LDX  V45            GET NEW TOP OF UNORGANIZED STRING SPACE 
E8B6 301F             (                    ROMbasic.ASM):02292           LEAX -1,X           MOVE POINTER BACK ONE 
E8B8 7EE83F           (                    ROMbasic.ASM):02293           JMP  LB593          JUMP BACK AND REORGANIZE SOME MORE 
                      (                    ROMbasic.ASM):02294                                
                      (                    ROMbasic.ASM):02295                                
E8BB DC52             (                    ROMbasic.ASM):02296 LB60F     LDD  FPA0+2         * GET DESCRIPTOR ADDRESS OF STRING A 
E8BD 3406             (                    ROMbasic.ASM):02297           PSHS B,A            * AND SAVE IT ON THE STACK 
E8BF BDE4D4           (                    ROMbasic.ASM):02298           JSR  LB223          GET DESCRIPTOR ADDRESS OF STRING B 
E8C2 BDE3F7           (                    ROMbasic.ASM):02299           JSR  LB146          TM' ERROR IF NUMERIC VARIABLE 
E8C5 3510             (                    ROMbasic.ASM):02300           PULS X              * POINT X TO STRING A DESCRIPTOR 
E8C7 9F62             (                    ROMbasic.ASM):02301           STX  RESSGN         * ADDRESS AND SAVE IT IN RESSGN 
E8C9 E684             (                    ROMbasic.ASM):02302           LDB  ,X             GET LENGTH OF STRING A 
E8CB 9E52             (                    ROMbasic.ASM):02303           LDX  FPA0+2         POINT X TO DESCRIPTOR OF STRING B 
E8CD EB84             (                    ROMbasic.ASM):02304           ADDB ,X             ADD LENGTH OF STRING B TO STR1NG A 
E8CF 2405             (                    ROMbasic.ASM):02305           BCC  LB62A          BRANCH IF LENGTH < 256 
E8D1 C61C             (                    ROMbasic.ASM):02306           LDB  #2*14          STRING TOO LONG' ERROR IF LENGTH > 255 
E8D3 7EDF2B           (                    ROMbasic.ASM):02307           JMP  LAC46          JUMP TO ERROR SERVICING ROUTINE 
E8D6 BDE7B9           (                    ROMbasic.ASM):02308 LB62A     JSR  LB50D          RESERVE ROOM IN STRING SPACE FOR NEW STRING 
E8D9 9E62             (                    ROMbasic.ASM):02309           LDX  RESSGN         GET DESCRIPTOR ADDRESS OF STRING A 
E8DB E684             (                    ROMbasic.ASM):02310           LDB  ,X             GET LENGTH OF STRING A 
E8DD 8D10             (                    ROMbasic.ASM):02311           BSR  LB643          MOVE STRING A INTO RESERVED BUFFER IN STRING SPACE 
E8DF 9E4D             (                    ROMbasic.ASM):02312           LDX  V4D            GET DESCRIPTOR ADDRESS OF STRING B 
E8E1 8D22             (                    ROMbasic.ASM):02313           BSR  LB659          GET LENGTH AND ADDRESS OF STRING B 
E8E3 8D0C             (                    ROMbasic.ASM):02314           BSR  LB645          MOVE STRING B INTO REST OF RESERVED BUFFER 
E8E5 9E62             (                    ROMbasic.ASM):02315           LDX  RESSGN         POINT X TO DESCRIPTOR OF STRING A 
E8E7 8D1C             (                    ROMbasic.ASM):02316           BSR  LB659          DELETE STRING A IF LAST STRING ON STRING STACK 
E8E9 BDE7F8           (                    ROMbasic.ASM):02317           JSR  LB54C          PUT STRING DESCRIPTOR ON THE STRING STACK 
E8EC 7EE419           (                    ROMbasic.ASM):02318           JMP  LB168          BRANCH BACK TO EXPRESSION EVALUATION 
                      (                    ROMbasic.ASM):02319                                
                      (                    ROMbasic.ASM):02320 ; MOVE (B) BYTES FROM 2,X TO FRESPC                      
E8EF AE02             (                    ROMbasic.ASM):02321 LB643     LDX  2,X            POINT X TO SOURCE ADDRESS 
E8F1 DE25             (                    ROMbasic.ASM):02322 LB645     LDU  FRESPC         POINT U TO DESTINATION ADDRESS 
E8F3 5C               (                    ROMbasic.ASM):02323           INCB                COMPENSATION FOR THE DECB BELOW 
E8F4 2004             (                    ROMbasic.ASM):02324           BRA  LB64E          GO MOVE THE BYTES 
                      (                    ROMbasic.ASM):02325 ; MOVE B BYTES FROM (X) TO (U)                      
E8F6 A680             (                    ROMbasic.ASM):02326 LB64A     LDA  ,X+            * GET A SOURCE BYTE AND MOVE IT 
E8F8 A7C0             (                    ROMbasic.ASM):02327           STA  ,U+            * TO THE DESTINATION 
E8FA 5A               (                    ROMbasic.ASM):02328 LB64E     DECB                DECREMENT BYTE COUNTER 
E8FB 26F9             (                    ROMbasic.ASM):02329           BNE  LB64A          BRANCH IF ALL BYTES NOT MOVED 
E8FD DF25             (                    ROMbasic.ASM):02330           STU  FRESPC         SAVE ENDING ADDRESS IN FRESPC 
E8FF 39               (                    ROMbasic.ASM):02331           RTS                  
                      (                    ROMbasic.ASM):02332 ; RETURN LENGTH (ACCB) AND ADDRESS (X) OF                      
                      (                    ROMbasic.ASM):02333 ; STRING WHOSE DESCRIPTOR IS IN FPA0+2                      
                      (                    ROMbasic.ASM):02334 ; DELETE THE STRING IF IT IS THE LAST ONE                      
                      (                    ROMbasic.ASM):02335 ; PUT ON THE STRING STACK. REMOVE STRING FROM STRING                      
                      (                    ROMbasic.ASM):02336 ; SPACE IF IT IS AT THE BOTTOM OF STRING VARIABLES.                      
E900 BDE3F7           (                    ROMbasic.ASM):02337 LB654     JSR  LB146          TM' ERROR IF VARIABLE TYPE = NUMERIC 
E903 9E52             (                    ROMbasic.ASM):02338 LB657     LDX  FPA0+2         GET ADDRESS OF SELECTED STRING DESCRIPTOR 
E905 E684             (                    ROMbasic.ASM):02339 LB659     LDB  ,X             GET LENGTH OF STRING 
E907 8D18             (                    ROMbasic.ASM):02340           BSR  LB675          * CHECK TO SEE IF THIS STRING DESCRIPTOR WAS 
E909 2613             (                    ROMbasic.ASM):02341           BNE  LB672          * THE LAST ONE PUT ON THE STRING STACK AND 
                      (                    ROMbasic.ASM):02342 ;                             * BRANCH IF NOT 
E90B AE07             (                    ROMbasic.ASM):02343           LDX  5+2,X          GET START ADDRESS OF STRING JUST REMOVED 
E90D 301F             (                    ROMbasic.ASM):02344           LEAX -1,X           MOVE POINTER DOWN ONE 
E90F 9C23             (                    ROMbasic.ASM):02345           CMPX STRTAB         COMPARE TO START OF STRING VARIABLES 
E911 2608             (                    ROMbasic.ASM):02346           BNE  LB66F          BRANCH IF THIS STRING IS NOT AT THE BOTTOM 
                      (                    ROMbasic.ASM):02347 ;                             OF STRING VARIABLES 
E913 3404             (                    ROMbasic.ASM):02348           PSHS B              SAVE LENGTH; ACCA WAS CLEARED 
E915 D323             (                    ROMbasic.ASM):02349           ADDD STRTAB         * ADD THE LENGTH OF THE JUST REMOVED STRING 
E917 DD23             (                    ROMbasic.ASM):02350           STD  STRTAB         * TO THE START OF STRING VARIABLES - THIS WILL 
                      (                    ROMbasic.ASM):02351 ;                             * REMOVE THE STRING FROM THE STRING SPACE 
E919 3504             (                    ROMbasic.ASM):02352           PULS B              RESTORE LENGTH 
E91B 3001             (                    ROMbasic.ASM):02353 LB66F     LEAX 1,X            ADD ONE TO POINTER 
E91D 39               (                    ROMbasic.ASM):02354           RTS                  
E91E AE02             (                    ROMbasic.ASM):02355 LB672     LDX  2,X            *POINT X TO ADDRESS OF STRING NOT 
E920 39               (                    ROMbasic.ASM):02356           RTS                 *ON THE STRING STACK 
                      (                    ROMbasic.ASM):02357 ; REMOVE STRING FROM STRING STACK. ENTER WITH X                      
                      (                    ROMbasic.ASM):02358 ; POINTING TO A STRING DESCRIPTOR - DELETE THE                      
                      (                    ROMbasic.ASM):02359 ; STRING FROM STACK IF IT IS ON TOP OF THE                      
                      (                    ROMbasic.ASM):02360 ; STACK. IF THE STRING IS DELETED, SET THE ZERO FLAG                      
E921 9C0D             (                    ROMbasic.ASM):02361 LB675     CMPX LASTPT         *COMPARE TO LAST USED DESCRIPTOR ADDRESS 
E923 2607             (                    ROMbasic.ASM):02362           BNE  LB680          *ON THE STRING STACK, RETURN IF DESCRIPTOR 
                      (                    ROMbasic.ASM):02363 ;                             *ADDRESS NOT ON THE STRING STACK 
E925 9F0B             (                    ROMbasic.ASM):02364           STX  TEMPPT         SAVE LAST USED DESCRIPTOR AS NEXT AVAILABLE 
E927 301B             (                    ROMbasic.ASM):02365           LEAX -5,X           * MOVE LAST USED DESCRIPTOR BACK 5 BYTES 
E929 9F0D             (                    ROMbasic.ASM):02366           STX  LASTPT         * AND SAVE AS THE LAST USED DESCRIPTOR ADDR 
E92B 4F               (                    ROMbasic.ASM):02367           CLRA                SET ZERO FLAG 
E92C 39               (                    ROMbasic.ASM):02368 LB680     RTS                  
                      (                    ROMbasic.ASM):02369                                
                      (                    ROMbasic.ASM):02370 ; LEN                          
E92D 8D03             (                    ROMbasic.ASM):02371 LEN       BSR  LB686          POINT X TO PROPER STRING AND GET LENGTH 
E92F 7EE79F           (                    ROMbasic.ASM):02372 LB683     JMP  LB4F3          CONVERT ACCB TO FP NUMBER IN FPA0 
                      (                    ROMbasic.ASM):02373 ; POINT X TO STRING ADDRESS LOAD LENGTH INTO                      
                      (                    ROMbasic.ASM):02374 ; ACCB. ENTER WITH THE STRING DESCRIPTOR IN                      
                      (                    ROMbasic.ASM):02375 ; BOTTOM TWO BYTES OF FPA0                      
E932 8DCC             (                    ROMbasic.ASM):02376 LB686     BSR  LB654          GET LENGTH AND ADDRESS OF STRING 
E934 0F06             (                    ROMbasic.ASM):02377           CLR  VALTYP         SET VARIABLE TYPE TO NUMERIC 
E936 5D               (                    ROMbasic.ASM):02378           TSTB                SET FLAGS ACCORDING TO LENGTH 
E937 39               (                    ROMbasic.ASM):02379           RTS                  
                      (                    ROMbasic.ASM):02380                                
                      (                    ROMbasic.ASM):02381 ; CHR$                         
E938 BDE9BA           (                    ROMbasic.ASM):02382 CHR       JSR  LB70E          CONVERT FPA0 TO AN INTEGER IN ACCD 
E93B C601             (                    ROMbasic.ASM):02383 LB68F     LDB  #1             * RESERVE ONE BYTE IN 
E93D BDE819           (                    ROMbasic.ASM):02384           JSR  LB56D          * THE STRING SPACE 
E940 9653             (                    ROMbasic.ASM):02385           LDA  FPA0+3         GET ASCII STRING VALUE 
E942 BDE7BD           (                    ROMbasic.ASM):02386           JSR  LB511          SAVE RESERVED STRING DESCRIPTOR IN TEMP DESCRIPTOR 
E945 A784             (                    ROMbasic.ASM):02387           STA  ,X             SAVE THE STRING (IT’S ONLY ONE BYTE) 
E947 3262             (                    ROMbasic.ASM):02388 LB69B     LEAS 2,S            PURGE THE RETURN ADDRESS OFF OF THE STACK 
E949 7EE7F8           (                    ROMbasic.ASM):02389 LB69D     JMP  LB54C          PUT TEMP DESCRIPTOR DATA ONTO STRING STACK 
                      (                    ROMbasic.ASM):02390                                
                      (                    ROMbasic.ASM):02391                                
E94C 8D02             (                    ROMbasic.ASM):02392 ASC       BSR  LB6A4          PUT 1ST CHARACTER OF STRING INTO ACCB 
E94E 20DF             (                    ROMbasic.ASM):02393           BRA  LB683          CONVERT ACCB INTO FP NUMBER IN FPA0 
E950 8DE0             (                    ROMbasic.ASM):02394 LB6A4     BSR  LB686          POINT X TO STRING DESCRIPTOR 
E952 275E             (                    ROMbasic.ASM):02395           BEQ  LB706          FC' ERROR IF NULL STRING 
E954 E684             (                    ROMbasic.ASM):02396           LDB  ,X             GET FIRST BYTE OF STRING 
E956 39               (                    ROMbasic.ASM):02397           RTS                  
                      (                    ROMbasic.ASM):02398                                
                      (                    ROMbasic.ASM):02399                                
E957 8D48             (                    ROMbasic.ASM):02400 LEFT      BSR  LB6F5          GET ARGUMENTS FROM STACK 
E959 4F               (                    ROMbasic.ASM):02401 LB6AD     CLRA                CLEAR STRING POINTER OFFSET - OFFSET = 0 FOR LEFT$ 
E95A E184             (                    ROMbasic.ASM):02402 LB6AE     CMPB ,X             * COMPARE LENGTH PARAMETER TO LENGTH OF 
E95C 2303             (                    ROMbasic.ASM):02403           BLS  LB6B5          * STRING AND BRANCH IF LENGTH OF STRING 
                      (                    ROMbasic.ASM):02404 ;                             >= LENGTH PARAMETER 
E95E E684             (                    ROMbasic.ASM):02405           LDB  ,X             USE LENGTH OF STRING OTHERWISE 
E960 4F               (                    ROMbasic.ASM):02406           CLRA                CLEAR STRING POINTER OFFSET (0 FOR LEFT$) 
E961 3406             (                    ROMbasic.ASM):02407 LB6B5     PSHS B,A            PUSH PARAMETERS ONTO STACK 
E963 BDE7BB           (                    ROMbasic.ASM):02408           JSR  LB50F          RESERVE ACCB BYTES IN THE STRING SPACE 
E966 9E4D             (                    ROMbasic.ASM):02409           LDX  V4D            POINT X TO STRING DESCRIPTOR 
E968 8D9B             (                    ROMbasic.ASM):02410           BSR  LB659          GET ADDRESS OF OLD STRING (X=ADDRESS) 
E96A 3504             (                    ROMbasic.ASM):02411           PULS B              * PULL STRING POINTER OFFSET OFF OF THE STACK 
E96C 3A               (                    ROMbasic.ASM):02412           ABX                 * AND ADD IT TO STRING ADDRESS 
E96D 3504             (                    ROMbasic.ASM):02413           PULS B              PULL LENGTH PARAMETER OFF OF THE STACK 
E96F BDE8F1           (                    ROMbasic.ASM):02414           JSR  LB645          MOVE ACCB BYTES FROM (X) TO [FRESPC] 
E972 20D5             (                    ROMbasic.ASM):02415           BRA  LB69D          PUT TEMP STRING DESCRIPTOR ONTO THE STRING STACK 
                      (                    ROMbasic.ASM):02416                                
                      (                    ROMbasic.ASM):02417 ; RIGHT$                       
E974 8D2B             (                    ROMbasic.ASM):02418 RIGHT     BSR  LB6F5          GET ARGUMENTS FROM STACK 
E976 A084             (                    ROMbasic.ASM):02419           SUBA ,X             ACCA=LENGTH PARAMETER - LENGTH OF OLD STRING 
E978 40               (                    ROMbasic.ASM):02420           NEGA                NOW ACCA = LENGTH OF OLD STRING 
E979 20DF             (                    ROMbasic.ASM):02421           BRA  LB6AE          PUT NEW STRING IN THE STRING SPACE 
                      (                    ROMbasic.ASM):02422                                
                      (                    ROMbasic.ASM):02423 ; MID$                         
E97B C6FF             (                    ROMbasic.ASM):02424 MID       LDB  #$FF           * GET DEFAULT VALUE OF LENGTH AND 
E97D D753             (                    ROMbasic.ASM):02425           STB  FPA0+3         * SAVE IT IN FPA0 
E97F 9D82             (                    ROMbasic.ASM):02426           JSR  GETCCH         GET CURRENT CHARACTER FROM BASIC 
E981 8129             (                    ROMbasic.ASM):02427           CMPA #')            ARGUMENT DELIMITER? 
E983 2705             (                    ROMbasic.ASM):02428           BEQ  LB6DE          YES - NO LENGTH PARAMETER GIVEN 
E985 BDE51E           (                    ROMbasic.ASM):02429           JSR  LB26D          SYNTAX CHECK FOR COMMA 
E988 8D2D             (                    ROMbasic.ASM):02430           BSR  LB70B          EVALUATE NUMERIC EXPRESSION (LENGTH) 
E98A 8D15             (                    ROMbasic.ASM):02431 LB6DE     BSR  LB6F5          GET ARGUMENTS FROM STACK 
E98C 2724             (                    ROMbasic.ASM):02432           BEQ  LB706          FC' ERROR IF NULL STRING 
E98E 5F               (                    ROMbasic.ASM):02433           CLRB                CLEAR LENGTH COUNTER (DEFAULT VALUE) 
E98F 4A               (                    ROMbasic.ASM):02434           DECA                *SUOTRACT ONE FROM POSITION PARAMETER (THESE 
E990 A184             (                    ROMbasic.ASM):02435           CMPA ,X             *ROUTINES EXPECT 1ST POSITION TO BE ZERO, NOT ONE) 
                      (                    ROMbasic.ASM):02436 ;                             *AND COMPARE IT TO LENGTH OF OLD STRING 
E992 24CD             (                    ROMbasic.ASM):02437           BCC  LB6B5          IF POSITION > LENGTH OF OLD STRING, THEN NEW 
                      (                    ROMbasic.ASM):02438 ;                             STRING WILL BE A NULL STRING 
E994 1F89             (                    ROMbasic.ASM):02439           TFR  A,B            SAVE ABSOLUTE POSITION PARAMETER IN ACCB 
E996 E084             (                    ROMbasic.ASM):02440           SUBB ,X             ACCB=POSITION-LENGTH OF OLD STRING 
E998 50               (                    ROMbasic.ASM):02441           NEGB                NOW ACCB=LENGTH OF OLDSTRING-POSITION 
E999 D153             (                    ROMbasic.ASM):02442           CMPB FPA0+3         *IF THE AMOUNT OF OLD STRING TO THE RIGHT OF 
E99B 23C4             (                    ROMbasic.ASM):02443           BLS  LB6B5          *POSITION IS <= THE LENGTH PARAMETER, BRANCH AND 
                      (                    ROMbasic.ASM):02444 ; USE ALL OF THE STRING TO THE RIGHT OF THE POSITION                      
                      (                    ROMbasic.ASM):02445 ; INSTEAD OF THE LENGTH PARAMETER                      
E99D D653             (                    ROMbasic.ASM):02446           LDB  FPA0+3         GET LENGTH OF NEW STRING 
E99F 20C0             (                    ROMbasic.ASM):02447           BRA  LB6B5          PUT NEW STRING IN STRING SPACE 
                      (                    ROMbasic.ASM):02448 ; DO A SYNTAX CHECK FOR ")", THEN PULL THE PREVIOUSLY CALCULATED NUMERIC                      
                      (                    ROMbasic.ASM):02449 ; ARGUMENT (ACCD) AND STRING ARGUMENT DESCRIPTOR ADDR OFF OF THE STACK                      
E9A1 BDE518           (                    ROMbasic.ASM):02450 LB6F5     JSR  LB267          SYNTAX CHECK FOR A ")" 
E9A4 EEE4             (                    ROMbasic.ASM):02451           LDU  ,S             LOAD THE RETURN ADDRESS INTO U REGISTER 
E9A6 AE65             (                    ROMbasic.ASM):02452           LDX  5,S            * GET ADDRESS OF STRING AND 
E9A8 9F4D             (                    ROMbasic.ASM):02453           STX  V4D            * SAVE IT IN V4D 
E9AA A664             (                    ROMbasic.ASM):02454           LDA  4,S            = PUT LENGTH OF STRING IN 
E9AC E664             (                    ROMbasic.ASM):02455           LDB  4,S            = BOTH ACCA AND ACCB 
E9AE 3267             (                    ROMbasic.ASM):02456           LEAS 7,S            REMOVE DESCRIPTOR AND RETURN ADDRESS FROM STACK 
E9B0 1F35             (                    ROMbasic.ASM):02457           TFR  U,PC           JUMP TO ADDRESS IN U REGISTER 
E9B2 7EE6F6           (                    ROMbasic.ASM):02458 LB706     JMP  LB44A          ILLEGAL FUNCTION CALL' 
                      (                    ROMbasic.ASM):02459 ; EVALUATE AN EXPRESSION - RETURN AN INTEGER IN                      
                      (                    ROMbasic.ASM):02460 ; ACCB - 'FC' ERROR IF EXPRESSION > 255                      
E9B5 9D7C             (                    ROMbasic.ASM):02461 LB709     JSR  GETNCH         GET NEXT BASIC INPUT CHARACTER 
E9B7 BDE3F2           (                    ROMbasic.ASM):02462 LB70B     JSR  LB141          EVALUATE A NUMERIC EXPRESSION 
E9BA BDE695           (                    ROMbasic.ASM):02463 LB70E     JSR  LB3E9          CONVERT FPA0 TO INTEGER IN ACCD 
E9BD 4D               (                    ROMbasic.ASM):02464           TSTA                TEST MS BYTE OF INTEGER 
E9BE 26F2             (                    ROMbasic.ASM):02465           BNE  LB706          FC' ERROR IF EXPRESSION > 255 
E9C0 0E82             (                    ROMbasic.ASM):02466           JMP  GETCCH         GET CURRENT INPUT CHARACTER FROM BASIC 
                      (                    ROMbasic.ASM):02467                                
                      (                    ROMbasic.ASM):02468 ; VAL                          
E9C2 BDE932           (                    ROMbasic.ASM):02469 VAL       JSR  LB686          POINT X TO STRING ADDRESS 
E9C5 102702E1         (                    ROMbasic.ASM):02470           LBEQ LBA39          IF NULL STRING SET FPA0 
E9C9 DE83             (                    ROMbasic.ASM):02471           LDU  CHARAD         SAVE INPUT POINTER IN REGISTER U 
E9CB 9F83             (                    ROMbasic.ASM):02472           STX  CHARAD         POINT INPUT POINTER TO ADDRESS OF STRING 
E9CD 3A               (                    ROMbasic.ASM):02473           ABX  MOVE POINTER TO END OF STRING TERMINATOR  
E9CE A684             (                    ROMbasic.ASM):02474           LDA  ,X             GET LAST BYTE OF STRING 
E9D0 3452             (                    ROMbasic.ASM):02475           PSHS U,X,A          SAVE INPUT POINTER, STRING TERMINATOR 
                      (                    ROMbasic.ASM):02476 ;         ADDRESS AND CHARACTER   
E9D2 6F84             (                    ROMbasic.ASM):02477           CLR  ,X             CLEAR STRING TERMINATOR : FOR ASCII - FP CONVERSION 
E9D4 9D82             (                    ROMbasic.ASM):02478           JSR  GETCCH         GET CURRENT CHARACTER FROM BASIC 
E9D6 BDEF83           (                    ROMbasic.ASM):02479           JSR  LBD12          CONVERT AN ASCII STRING TO FLOATING POINT 
E9D9 3552             (                    ROMbasic.ASM):02480           PULS A,X,U          RESTORE CHARACTERS AND POINTERS 
E9DB A784             (                    ROMbasic.ASM):02481           STA  ,X             REPLACE STRING TERMINATOR 
E9DD DF83             (                    ROMbasic.ASM):02482           STU  CHARAD         RESTORE INPUT CHARACTER 
E9DF 39               (                    ROMbasic.ASM):02483           RTS                  
                      (                    ROMbasic.ASM):02484                                
E9E0 8D07             (                    ROMbasic.ASM):02485 LB734     BSR  LB73D          * EVALUATE AN EXPRESSION, RETURN 
E9E2 9F2B             (                    ROMbasic.ASM):02486           STX  BINVAL         * THE VALUE IN X; STORE IT IN BINVAL 
E9E4 BDE51E           (                    ROMbasic.ASM):02487 LB738     JSR  LB26D          SYNTAX CHECK FOR A COMMA 
E9E7 20CE             (                    ROMbasic.ASM):02488           BRA  LB70B          EVALUATE EXPRESSION IN RANGE 0 <= X < 256 
                      (                    ROMbasic.ASM):02489 ; EVALUATE EXPRESSION : RETURN INTEGER PORTION IN X - 'FC' ERROR IF                      
                      (                    ROMbasic.ASM):02490                                
E9E9 BDE3F2           (                    ROMbasic.ASM):02491 LB73D     JSR  LB141          EVALUATE NUMERIC EXPRESSION 
E9EC 9654             (                    ROMbasic.ASM):02492 LB740     LDA  FP0SGN         GET SIGN OF FPA0 MANTISSA 
E9EE 2BC2             (                    ROMbasic.ASM):02493           BMI  LB706          ILLEGAL FUNCTION CALL' IF NEGATIVE 
E9F0 964F             (                    ROMbasic.ASM):02494           LDA  FP0EXP         GET EXPONENT OF FPA0 
E9F2 8190             (                    ROMbasic.ASM):02495           CMPA #$90           COMPARE TO LARGEST POSITIVE INTEGER 
E9F4 22BC             (                    ROMbasic.ASM):02496           BHI  LB706          ILLEGAL FUNCTION CALL' IF TOO LARGE 
E9F6 BDEF39           (                    ROMbasic.ASM):02497           JSR  LBCC8          SHIFT BINARY POINT TO EXTREME RIGHT OF FPA0 
E9F9 9E52             (                    ROMbasic.ASM):02498           LDX  FPA0+2         LOAD X WITH LOWER TWO BYTES OF FPA0 
E9FB 39               (                    ROMbasic.ASM):02499           RTS                  
                      (                    ROMbasic.ASM):02500                                
                      (                    ROMbasic.ASM):02501 ; PEEK                         
E9FC 8DEE             (                    ROMbasic.ASM):02502 PEEK      BSR  LB740          CONVERT FPA0 TO INTEGER IN REGISTER X 
E9FE E684             (                    ROMbasic.ASM):02503           LDB  ,X             GET THE VALUE BEING 'PEEK'ED 
EA00 7EE79F           (                    ROMbasic.ASM):02504           JMP  LB4F3          CONVERT ACCB INTO A FP NUMBER 
                      (                    ROMbasic.ASM):02505                                
                      (                    ROMbasic.ASM):02506 ; POKE                         
EA03 8DDB             (                    ROMbasic.ASM):02507 POKE      BSR  LB734          EVALUATE 2 EXPRESSIONS 
EA05 9E2B             (                    ROMbasic.ASM):02508           LDX  BINVAL         GET THE ADDRESS TO BE 'POKE'ED 
EA07 E784             (                    ROMbasic.ASM):02509           STB  ,X             STORE THE DATA IN THAT ADDRESS 
EA09 39               (                    ROMbasic.ASM):02510           RTS                  
                      (                    ROMbasic.ASM):02511                                
                      (                    ROMbasic.ASM):02512                                
                      (                    ROMbasic.ASM):02513 ; LIST                         
EA0A 3401             (                    ROMbasic.ASM):02514 LIST      PSHS CC             SAVE ZERO FLAG ON STACK 
EA0C BDE23C           (                    ROMbasic.ASM):02515           JSR  LAF67          CONVERT DECIMAL LINE NUMBER TO BINARY 
EA0F BDDFCA           (                    ROMbasic.ASM):02516           JSR  LAD01          * FIND RAM ADDRESS OF THAT LINE NUMBER AND 
EA12 9F66             (                    ROMbasic.ASM):02517           STX  LSTTXT         * SAVE IT IN LSTTXT 
EA14 3501             (                    ROMbasic.ASM):02518           PULS CC             GET ZERO FLAG FROM STACK 
EA16 2712             (                    ROMbasic.ASM):02519           BEQ  LB784          BRANCH IF END OF LINE 
EA18 9D82             (                    ROMbasic.ASM):02520           JSR  GETCCH         GET CURRENT CHARACTER FROM BASIC 
EA1A 2713             (                    ROMbasic.ASM):02521           BEQ  LB789          BRANCH IF END OF LINE 
EA1C 81A7             (                    ROMbasic.ASM):02522           CMPA #TOK_MINUS     MINUS TOKEN (IS IT A RANGE OF LINE NUMBERS?) 
EA1E 2609             (                    ROMbasic.ASM):02523           BNE  LB783          NO - RETURN 
EA20 9D7C             (                    ROMbasic.ASM):02524           JSR  GETNCH         GET NEXT CHARACTER FROM BASIC 
EA22 2706             (                    ROMbasic.ASM):02525           BEQ  LB784          BRANCH IF END OF LINE 
EA24 BDE23C           (                    ROMbasic.ASM):02526           JSR  LAF67          GET ENDING LINE NUMBER 
EA27 2706             (                    ROMbasic.ASM):02527           BEQ  LB789          BRANCH IF LEGAL LINE NUMBER 
EA29 39               (                    ROMbasic.ASM):02528 LB783 RTS                      
                      (                    ROMbasic.ASM):02529 ; LIST THE ENTIRE PROGRAM                      
EA2A CEFFFF           (                    ROMbasic.ASM):02530 LB784     LDU  #$FFFF         * SET THE DEFAULT ENDING LINE NUMBER 
EA2D DF2B             (                    ROMbasic.ASM):02531           STU  BINVAL         * TO $FFFF 
EA2F 3262             (                    ROMbasic.ASM):02532 LB789     LEAS 2,S            PURGE RETURN ADDRESS FROM THE STACK 
EA31 9E66             (                    ROMbasic.ASM):02533           LDX  LSTTXT         POINT X TO STARTING LINE ADDRESS 
EA33 BDEBD1           (                    ROMbasic.ASM):02534 LB78D     JSR  LB95C          MOVE CURSOR TO START OF A NEW LINE 
EA36 BDDCBF           (                    ROMbasic.ASM):02535           JSR  LA549          CHECK FOR A BREAK OR PAUSE 
EA39 EC84             (                    ROMbasic.ASM):02536           LDD  ,X             GET ADDRESS OF NEXT BASIC LINE 
EA3B 2603             (                    ROMbasic.ASM):02537           BNE  LB79F          BRANCH IF NOT END OF PROGRAM 
                      (                    ROMbasic.ASM):02538 LB797                          
EA3D 7EDF4A           (                    ROMbasic.ASM):02539           JMP  LAC73          RETURN TO BASIC’S MAIN INPUT LOOP 
EA40 9F66             (                    ROMbasic.ASM):02540 LB79F     STX  LSTTXT         SAVE NEW STARTING LINE ADDRESS 
EA42 EC02             (                    ROMbasic.ASM):02541           LDD  2,X            * GET THE LINE NUMBER OF THIS LINE AND 
EA44 10932B           (                    ROMbasic.ASM):02542           CMPD BINVAL         * COMPARE IT TO ENDING LINE NUMBER 
EA47 22F4             (                    ROMbasic.ASM):02543           BHI  LB797          EXIT IF LINE NUMBER > ENDING LINE NUMBER 
EA49 BDF03D           (                    ROMbasic.ASM):02544           JSR  LBDCC          PRINT THE NUMBER IN ACCD ON SCREEN IN DECIMAL 
EA4C BDEC1D           (                    ROMbasic.ASM):02545           JSR  LB9AC          SEND A SPACE TO CONSOLE OUT 
EA4F 9E66             (                    ROMbasic.ASM):02546           LDX  LSTTXT         GET RAM ADDRESS OF THIS LINE 
EA51 8D10             (                    ROMbasic.ASM):02547           BSR  LB7C2          UNCRUNCH A LINE 
EA53 AE9F0066         (                    ROMbasic.ASM):02548           LDX  [LSTTXT]       POINT X TO START OF NEXT LINE 
EA57 CE00F4           (                    ROMbasic.ASM):02549           LDU  #LINBUF+1      POINT U TO BUFFER FULL OF UNCRUNCHED LINE 
EA5A A6C0             (                    ROMbasic.ASM):02550 LB7B9     LDA  ,U+            GET A BYTE FROM THE BUFFER 
EA5C 27D5             (                    ROMbasic.ASM):02551           BEQ  LB78D          BRANCH IF END OF BUFFER 
EA5E BDEC22           (                    ROMbasic.ASM):02552           JSR  LB9B1          SEND CHARACTER TO CONSOLE OUT 
EA61 20F7             (                    ROMbasic.ASM):02553           BRA  LB7B9          GET ANOTHER CHARACTER 
                      (                    ROMbasic.ASM):02554                                
                      (                    ROMbasic.ASM):02555 ; UNCRUNCH A LINE INTO BASIC’S LINE INPUT BUFFER                      
EA63 3004             (                    ROMbasic.ASM):02556 LB7C2     LEAX 4,X            MOVE POINTER PAST ADDRESS OF NEXT LINE AND LINE NUMBER 
EA65 108E00F4         (                    ROMbasic.ASM):02557           LDY  #LINBUF+1      UNCRUNCH LINE INTO LINE INPUT BUFFER 
EA69 A680             (                    ROMbasic.ASM):02558 LB7CB     LDA  ,X+            GET A CHARACTER 
EA6B 2751             (                    ROMbasic.ASM):02559           BEQ  LB820          BRANCH IF END OF LINE 
EA6D 2B15             (                    ROMbasic.ASM):02560           BMI  LB7E6          BRANCH IF IT’S A TOKEN 
EA6F 813A             (                    ROMbasic.ASM):02561           CMPA #':            CHECK FOR END OF SUB LINE 
EA71 260D             (                    ROMbasic.ASM):02562           BNE  LB7E2          BRNCH IF NOT END OF SUB LINE 
EA73 E684             (                    ROMbasic.ASM):02563           LDB  ,X             GET CHARACTER FOLLOWING COLON 
EA75 C184             (                    ROMbasic.ASM):02564           CMPB #TOK_ELSE      TOKEN FOR ELSE? 
EA77 27F0             (                    ROMbasic.ASM):02565           BEQ  LB7CB          YES - DON’T PUT IT IN BUFFER 
EA79 C183             (                    ROMbasic.ASM):02566           CMPB #TOK_SNGL_Q    TOKEN FOR REMARK? 
EA7B 27EC             (                    ROMbasic.ASM):02567           BEQ  LB7CB          YES - DON’T PUT IT IN BUFFER 
EA7D 8C               (                    ROMbasic.ASM):02568           FCB  SKP2           SKIP TWO BYTES 
EA7E 8621             (                    ROMbasic.ASM):02569 LB7E0     LDA  #'!            EXCLAMATION POINT 
EA80 8D30             (                    ROMbasic.ASM):02570 LB7E2     BSR  LB814          PUT CHARACTER IN BUFFER 
EA82 20E5             (                    ROMbasic.ASM):02571           BRA  LB7CB          GET ANOTHER CHARACTER 
                      (                    ROMbasic.ASM):02572                                
EA84 CEDC0B           (                    ROMbasic.ASM):02573 LB7E6     LDU  #COMVEC-10     FIRST DO COMMANDS 
EA87 81FF             (                    ROMbasic.ASM):02574           CMPA #$FF           CHECK FOR SECONDARY TOKEN 
EA89 2604             (                    ROMbasic.ASM):02575           BNE  LB7F1          BRANCH IF NON SECONDARY TOKEN 
EA8B A680             (                    ROMbasic.ASM):02576           LDA  ,X+            GET SECONDARY TOKEN 
EA8D 3345             (                    ROMbasic.ASM):02577           LEAU 5,U            BUMP IT UP TO SECONDARY FUNCTIONS 
EA8F 847F             (                    ROMbasic.ASM):02578 LB7F1     ANDA #$7F           MASK OFF BIT 7 OF TOKEN 
EA91 334A             (                    ROMbasic.ASM):02579 LB7F3     LEAU 10,U           MOVE TO NEXT COMMAND TABLE 
EA93 6DC4             (                    ROMbasic.ASM):02580           TST  ,U             IS THIS TABLE ENABLED? 
EA95 27E7             (                    ROMbasic.ASM):02581           BEQ  LB7E0          NO - ILLEGAL TOKEN 
EA97 A0C4             (                    ROMbasic.ASM):02582           SUBA ,U             SUBTRACT THE NUMBER OF TOKENS FROM THE CURRENT TOKEN NUMBER 
EA99 2AF6             (                    ROMbasic.ASM):02583           BPL  LB7F3          BRANCH IF TOKEN NOT IN THIS TABLE 
EA9B ABC4             (                    ROMbasic.ASM):02584           ADDA ,U             RESTORE TOKEN NUMBER RELATIVE TO THIS TABLE 
EA9D EE41             (                    ROMbasic.ASM):02585           LDU  1,U            POINT U TO COMMAND DICTIONARY TABLE 
EA9F 4A               (                    ROMbasic.ASM):02586 LB801     DECA                DECREMENT TOKEN NUMBER 
EAA0 2B06             (                    ROMbasic.ASM):02587           BMI  LB80A          BRANCH IF THIS IS THE CORRECT TOKEN 
                      (                    ROMbasic.ASM):02588 ; SKIP THROUGH DICTIONARY TABLE TO START OF NEXT TOKEN                      
EAA2 6DC0             (                    ROMbasic.ASM):02589 LB804     TST  ,U+            GRAB A BYTE 
EAA4 2AFC             (                    ROMbasic.ASM):02590           BPL  LB804          BRANCH IF BIT 7 NOT SET 
EAA6 20F7             (                    ROMbasic.ASM):02591           BRA  LB801          GO SEE IF THIS IS THE CORRECT TOKEN 
EAA8 A6C4             (                    ROMbasic.ASM):02592 LB80A     LDA  ,U             GET A CHARACTER FROM DICTIONARY TABLE 
EAAA 8D06             (                    ROMbasic.ASM):02593           BSR  LB814          PUT CHARACTER IN BUFFER 
EAAC 6DC0             (                    ROMbasic.ASM):02594           TST  ,U+            CHECK FOR START OF NEXT TOKEN 
EAAE 2AF8             (                    ROMbasic.ASM):02595           BPL  LB80A          BRANCH IF NOT DONE WITH THIS TOKEN 
EAB0 20B7             (                    ROMbasic.ASM):02596           BRA  LB7CB          GO GET ANOTHER CHARACTER 
EAB2 108C01ED         (                    ROMbasic.ASM):02597 LB814     CMPY #LINBUF+LBUFMX TEST FOR END OF LINE INPUT BUFFER 
EAB6 2406             (                    ROMbasic.ASM):02598           BCC  LB820          BRANCH IF AT END OF BUFFER 
EAB8 847F             (                    ROMbasic.ASM):02599           ANDA #$7F           MASK OFF BIT 7 
EABA A7A0             (                    ROMbasic.ASM):02600           STA  ,Y+            * SAVE CHARACTER IN BUFFER AND 
EABC 6FA4             (                    ROMbasic.ASM):02601           CLR  ,Y             * CLEAR NEXT CHARACTER SLOT IN BUFFER 
EABE 39               (                    ROMbasic.ASM):02602 LB820     RTS                  
                      (                    ROMbasic.ASM):02603 ;                              
                      (                    ROMbasic.ASM):02604 ; CRUNCH THE LINE THAT THE INPUT POINTER IS                      
                      (                    ROMbasic.ASM):02605 ; POINTING TO INTO THE LINE INPUT BUFFER                      
                      (                    ROMbasic.ASM):02606 ; RETURN LENGTH OF CRUNCHED LINE IN ACCD                      
                      (                    ROMbasic.ASM):02607 ;                              
EABF 9E83             (                    ROMbasic.ASM):02608 LB821     LDX  CHARAD         GET BASIC'S INPUT POINTER ADDRESS 
EAC1 CE00F3           (                    ROMbasic.ASM):02609           LDU  #LINBUF        POINT X TO LINE INPUT BUFFER 
EAC4 0F43             (                    ROMbasic.ASM):02610 LB829     CLR  V43            CLEAR ILLEGAL TOKEN FLAG 
EAC6 0F44             (                    ROMbasic.ASM):02611           CLR  V44            CLEAR DATA FLAG 
EAC8 A680             (                    ROMbasic.ASM):02612 LB82D     LDA  ,X+            GET INPUT CHAR 
EACA 2721             (                    ROMbasic.ASM):02613           BEQ  LB852          BRANCH IF END OF LINE 
EACC 0D43             (                    ROMbasic.ASM):02614           TST  V43            * CHECK ILLEGAL TOKEN FLAG & BRANCH IF NOT 
EACE 270F             (                    ROMbasic.ASM):02615           BEQ  LB844          * PROCESSING AN ILLEGAL TOKEN 
EAD0 BDE64E           (                    ROMbasic.ASM):02616           JSR  LB3A2          SET CARRY IF NOT UPPER CASE ALPHA 
EAD3 2418             (                    ROMbasic.ASM):02617           BCC  LB852          BRANCH IF UPPER CASE ALPHA 
EAD5 8130             (                    ROMbasic.ASM):02618           CMPA #'0            * DON’T CRUNCH ASCII NUMERIC CHARACTERS 
EAD7 2504             (                    ROMbasic.ASM):02619           BLO  LB842          * BRANCH IF NOT NUMERIC 
EAD9 8139             (                    ROMbasic.ASM):02620           CMPA #'9            * 
EADB 2310             (                    ROMbasic.ASM):02621           BLS  LB852          * BRANCH IF NUMERIC 
                      (                    ROMbasic.ASM):02622 ; END UP HERE IF NOT UPPER CASE ALPHA OR NUMERIC                      
EADD 0F43             (                    ROMbasic.ASM):02623 LB842     CLR  V43            CLEAR ILLEGAL TOKEN FLAG 
EADF 8120             (                    ROMbasic.ASM):02624 LB844     CMPA #SPACE         SPACE? 
EAE1 270A             (                    ROMbasic.ASM):02625           BEQ  LB852          DO NOT REMOVE SPACES 
EAE3 9742             (                    ROMbasic.ASM):02626           STA  V42            SAVE INPUT CHARACTER AS SCAN DELIMITER 
EAE5 8122             (                    ROMbasic.ASM):02627           CMPA #'"            CHECK FOR STRING DELIMITER 
EAE7 2738             (                    ROMbasic.ASM):02628           BEQ  LB886          BRANCH IF STRING 
EAE9 0D44             (                    ROMbasic.ASM):02629           TST  V44            * CHECK DATA FLAG AND BRANCH IF CLEAR 
EAEB 2719             (                    ROMbasic.ASM):02630           BEQ  LB86B          * DO NOT CRUNCH DATA 
EAED A7C0             (                    ROMbasic.ASM):02631 LB852     STA  ,U+            SAVE CHARACTER IN BUFFER 
EAEF 2706             (                    ROMbasic.ASM):02632           BEQ  LB85C          BRANCH IF END OF LINE 
EAF1 813A             (                    ROMbasic.ASM):02633           CMPA #':            * CHECK FOR END OF SUBLINE 
EAF3 27CF             (                    ROMbasic.ASM):02634           BEQ  LB829          * AND RESET FLAGS IF END OF SUBLINE 
EAF5 20D1             (                    ROMbasic.ASM):02635 LB85A     BRA  LB82D          GO GET ANOTHER CHARACTER 
EAF7 6FC0             (                    ROMbasic.ASM):02636 LB85C     CLR  ,U+            * DOUBLE ZERO AT END OF LINE 
EAF9 6FC0             (                    ROMbasic.ASM):02637           CLR  ,U+            * 
EAFB 1F30             (                    ROMbasic.ASM):02638           TFR  U,D            SAVE ADDRESS OF END OF LINE IN ACCD 
EAFD 8300F1           (                    ROMbasic.ASM):02639           SUBD #LINHDR        LENGTH OF LINE IN ACCD 
EB00 8E00F2           (                    ROMbasic.ASM):02640           LDX  #LINBUF-1      * SET THE INPUT POINTER TO ONE BEFORE 
EB03 9F83             (                    ROMbasic.ASM):02641           STX  CHARAD         * THE START OF THE CRUNCHED LINE 
EB05 39               (                    ROMbasic.ASM):02642           RTS  EXIT 'CRUNCH'   
EB06 813F             (                    ROMbasic.ASM):02643 LB86B     CMPA #'?            CHECK FOR "?" - PRINT ABBREVIATION 
EB08 2604             (                    ROMbasic.ASM):02644           BNE  LB873          BRANCH IF NOT PRINT ABBREVIATION 
EB0A 8687             (                    ROMbasic.ASM):02645           LDA  #TOK_PRINT     * GET THE PRINT TOKEN AND SAVE IT 
EB0C 20DF             (                    ROMbasic.ASM):02646           BRA  LB852          * IN BUFFER 
EB0E 8127             (                    ROMbasic.ASM):02647 LB873     CMPA #''            APOSTROPHE IS SAME AS REM 
EB10 2613             (                    ROMbasic.ASM):02648           BNE  LB88A          BRANCH IF NOT REMARK 
EB12 CC3A83           (                    ROMbasic.ASM):02649           LDD  #$3A00+TOK_SNGL_Q COLON, REM TOKEN 
EB15 EDC1             (                    ROMbasic.ASM):02650           STD  ,U++           SAVE IN BUFFER 
EB17 0F42             (                    ROMbasic.ASM):02651 LB87C     CLR  V42            SET DELIMITER = 0 (END OF LINE) 
EB19 A680             (                    ROMbasic.ASM):02652 LB87E     LDA  ,X+            SCAN TILL WE MATCH [V42] 
EB1B 27D0             (                    ROMbasic.ASM):02653           BEQ  LB852          BRANCH IF END OF LINE 
EB1D 9142             (                    ROMbasic.ASM):02654           CMPA V42            DELIMITER? 
EB1F 27CC             (                    ROMbasic.ASM):02655           BEQ  LB852          BRANCH OUT IF SO 
EB21 A7C0             (                    ROMbasic.ASM):02656 LB886     STA  ,U+            DON’T CRUNCH REMARKS OR STRINGS 
EB23 20F4             (                    ROMbasic.ASM):02657           BRA  LB87E          GO GET MORE STRING OR REMARK 
EB25 8130             (                    ROMbasic.ASM):02658 LB88A     CMPA #'0            * LESS THAN ASCII ZERO? 
EB27 2504             (                    ROMbasic.ASM):02659           BCS  LB892          * BRANCH IF SO 
EB29 813C             (                    ROMbasic.ASM):02660           CMPA #';+1          = CHECK FOR NUMERIC VALUE, COLON OR SEMICOLON 
EB2B 25C0             (                    ROMbasic.ASM):02661           BCS  LB852          = AND INSERT IN BUFFER IF SO 
EB2D 301F             (                    ROMbasic.ASM):02662 LB892     LEAX -1,X           MOVE INPUT POINTER BACK ONE 
EB2F 3450             (                    ROMbasic.ASM):02663           PSHS U,X            SAVE POINTERS TO INPUT STRING, OUTPUT STRING 
EB31 0F41             (                    ROMbasic.ASM):02664           CLR  V41            TOKEN FLAG 0 = COMMAND, FF = SECONDARY 
EB33 CEDC0B           (                    ROMbasic.ASM):02665           LDU  #COMVEC-10     POINT U TO COMMAND INTERPRETATION 
                      (                    ROMbasic.ASM):02666 ;                             TABLE FOR BASIC - 10 
EB36 0F42             (                    ROMbasic.ASM):02667 LB89B     CLR  V42            INITIALIZE V42 AS TOKEN COUNTER 
EB38 334A             (                    ROMbasic.ASM):02668 LB89D     LEAU 10,U           MOVE TO NEXT COMMAND INTERPRETATION TABLE 
EB3A A6C4             (                    ROMbasic.ASM):02669           LDA  ,U             GET NUMBER OF COMMANDS 
EB3C 2731             (                    ROMbasic.ASM):02670           BEQ  LB8D4          GO DO SECONDARY FUNCTIONS IF NO COMMAND TABLE 
EB3E 10AE41           (                    ROMbasic.ASM):02671           LDY  1,U            POINT Y TO COMMAND DICTIONARY TABLE 
EB41 AEE4             (                    ROMbasic.ASM):02672 LB8A6     LDX  ,S             GET POINTER TO INPUT STRING 
EB43 E6A0             (                    ROMbasic.ASM):02673 LB8A8     LDB  ,Y+            GET A BYTE FROM DICTIONARY TABLE 
EB45 E080             (                    ROMbasic.ASM):02674           SUBB ,X+            SUBTRACT INPUT CHARACTER 
EB47 27FA             (                    ROMbasic.ASM):02675           BEQ  LB8A8          LOOP IF SAME 
EB49 C180             (                    ROMbasic.ASM):02676           CMPB #$80           LAST CHAR IN RESERVED WORD TABLE HAD 
                      (                    ROMbasic.ASM):02677 ;                             BIT 7 SET, SO IF WE HAVE $80 HERE 
                      (                    ROMbasic.ASM):02678 ;                             THEN IT IS A GOOD COMPARE 
EB4B 2638             (                    ROMbasic.ASM):02679           BNE  LB8EA          BRANCH IF NO MATCH - CHECK ANOTHER COMMAND 
EB4D 3262             (                    ROMbasic.ASM):02680           LEAS 2,S            DELETE OLD INPUT POINTER FROM STACK 
EB4F 3540             (                    ROMbasic.ASM):02681           PULS U              GET POINTER TO OUTPUT STRING 
EB51 DA42             (                    ROMbasic.ASM):02682           ORB  V42            OR IN THE TABLE POSITION TO MAKE THE TOKEN 
                      (                    ROMbasic.ASM):02683 ;                             - NOTE THAT B ALREADY HAD $80 IN IT - 
EB53 9641             (                    ROMbasic.ASM):02684           LDA  V41            * CHECK TOKEN FLAG AND BRANCH 
EB55 2606             (                    ROMbasic.ASM):02685           BNE  LB8C2          * IF SECONDARY 
EB57 C184             (                    ROMbasic.ASM):02686           CMPB #TOK_ELSE      IS IT ELSE TOKEN? 
EB59 2606             (                    ROMbasic.ASM):02687           BNE  LB8C6          NO 
EB5B 863A             (                    ROMbasic.ASM):02688           LDA  #':            PUT A COLON (SUBLINE) BEFORE ELSE TOKEN 
EB5D EDC1             (                    ROMbasic.ASM):02689 LB8C2     STD  ,U++           SECONDARY TOKENS PRECEEDED BY $FF 
EB5F 2094             (                    ROMbasic.ASM):02690           BRA  LB85A          GO PROCESS MORE INPUT CHARACTERS 
EB61 E7C0             (                    ROMbasic.ASM):02691 LB8C6     STB  ,U+            SAVE THIS TOKEN 
EB63 C186             (                    ROMbasic.ASM):02692           CMPB #TOK_DATA      DATA TOKEN? 
EB65 2602             (                    ROMbasic.ASM):02693           BNE  LB8CE          NO 
EB67 0C44             (                    ROMbasic.ASM):02694           INC  V44            SET DATA FLAG 
EB69 C182             (                    ROMbasic.ASM):02695 LB8CE     CMPB #TOK_REM       REM TOKEN? 
EB6B 27AA             (                    ROMbasic.ASM):02696           BEQ  LB87C          YES 
EB6D 2086             (                    ROMbasic.ASM):02697 LB8D2     BRA  LB85A          GO PROCESS MORE INPUT CHARACTERS 
                      (                    ROMbasic.ASM):02698 ; CHECK FOR A SECONDARY TOKEN                      
EB6F CEDC10           (                    ROMbasic.ASM):02699 LB8D4     LDU  #COMVEC-5      NOW DO SECONDARY FUNCTIONS 
EB72 0341             (                    ROMbasic.ASM):02700           COM  V41            TOGGLE THE TOKEN FLAG 
EB74 26C0             (                    ROMbasic.ASM):02701           BNE  LB89B          BRANCH IF NOW CHECKING SECONDARY COMMANDS 
                      (                    ROMbasic.ASM):02702                                
                      (                    ROMbasic.ASM):02703 ; THIS CODE WILL PROCESS INPUT DATA WHICH CANNOT BE CRUNCHED AND SO                      
                      (                    ROMbasic.ASM):02704 ; IS ASSUMED TO BE ILLEGAL DATA OR AN ILLEGAL TOKEN                      
EB76 3550             (                    ROMbasic.ASM):02705           PULS X,U            RESTORE INPUT AND OUTPUT POINTERS 
EB78 A680             (                    ROMbasic.ASM):02706           LDA  ,X+            * MOVE THE FIRST CHARACTER OF AN 
EB7A A7C0             (                    ROMbasic.ASM):02707           STA  ,U+            * ILLEGAL TOKEN 
EB7C BDE64E           (                    ROMbasic.ASM):02708           JSR  LB3A2          SET CARRY IF NOT ALPHA 
EB7F 25EC             (                    ROMbasic.ASM):02709           BCS  LB8D2          BRANCH IF NOT ALPHA 
EB81 0343             (                    ROMbasic.ASM):02710           COM  V43            SET ILLEGAL TOKEN FLAG IF UPPER CASE ALPHA 
EB83 20E8             (                    ROMbasic.ASM):02711           BRA  LB8D2          PROCESS MORE INPUT CHARACTERS 
EB85 0C42             (                    ROMbasic.ASM):02712 LB8EA     INC  V42            INCREMENT TOKEN COUNTER 
EB87 4A               (                    ROMbasic.ASM):02713           DECA                DECR COMMAND COUNTER 
EB88 27AE             (                    ROMbasic.ASM):02714           BEQ  LB89D          GET ANOTHER COMMAND TABLE IF DONE W/THIS ONE 
EB8A 313F             (                    ROMbasic.ASM):02715           LEAY -1,Y           MOVE POINTER BACK ONE 
EB8C E6A0             (                    ROMbasic.ASM):02716 LB8F1     LDB  ,Y+            * GET TO NEXT 
EB8E 2AFC             (                    ROMbasic.ASM):02717           BPL  LB8F1          * RESERVED WORD 
EB90 20AF             (                    ROMbasic.ASM):02718           BRA  LB8A6          GO SEE IF THIS WORD IS A MATCH 
                      (                    ROMbasic.ASM):02719                                
                      (                    ROMbasic.ASM):02720 ; PRINT                        
EB92 2739             (                    ROMbasic.ASM):02721 PRINT     BEQ  LB958          BRANCH IF NO ARGUMENT 
EB94 8D01             (                    ROMbasic.ASM):02722           BSR  LB8FE          CHECK FOR ALL PRINT OPTIONS 
EB96 39               (                    ROMbasic.ASM):02723           RTS                  
                      (                    ROMbasic.ASM):02724 LB8FE                          
EB97 BDFAF7           (                    ROMbasic.ASM):02725 LB918     JSR  XVEC9          CALL EXTENDED BASIC ADD-IN 
EB9A 273E             (                    ROMbasic.ASM):02726 LB91B     BEQ  LB965          RETURN IF END OF LINE 
EB9C 819F             (                    ROMbasic.ASM):02727 LB91D     CMPA #TOK_TAB       TOKEN FOR TAB( ? 
EB9E 2753             (                    ROMbasic.ASM):02728           BEQ  LB97E          YES 
EBA0 812C             (                    ROMbasic.ASM):02729           CMPA #',            COMMA? 
EBA2 2737             (                    ROMbasic.ASM):02730           BEQ  LB966          YES - ADVANCE TO NEXT TAB FIELD 
EBA4 813B             (                    ROMbasic.ASM):02731           CMPA #';            SEMICOLON? 
EBA6 2760             (                    ROMbasic.ASM):02732           BEQ  LB997          YES - DO NOT ADVANCE CURSOR 
EBA8 BDE407           (                    ROMbasic.ASM):02733           JSR  LB156          EVALUATE EXPRESSION 
EBAB 9606             (                    ROMbasic.ASM):02734           LDA  VALTYP         * GET VARIABLE TYPE AND 
EBAD 3402             (                    ROMbasic.ASM):02735           PSHS A              * SAVE IT ON THE STACK 
EBAF 2606             (                    ROMbasic.ASM):02736           BNE  LB938          BRANCH IF STRING VARIABLE 
EBB1 BDF04A           (                    ROMbasic.ASM):02737           JSR  LBDD9          CONVERT FP NUMBER TO AN ASCII STRING 
EBB4 BDE7C2           (                    ROMbasic.ASM):02738           JSR  LB516          PARSE A STRING FROM (X-1) AND PUT 
                      (                    ROMbasic.ASM):02739 ;                             DESCRIPTOR ON STRING STACK 
EBB7 8D57             (                    ROMbasic.ASM):02740 LB938     BSR  LB99F          PRINT STRING POINTED TO BY X 
EBB9 3504             (                    ROMbasic.ASM):02741           PULS B              GET VARIABLE TYPE BACK 
EBBB BDDC58           (                    ROMbasic.ASM):02742           JSR  LA35F          SET UP TAB WIDTH ZONE, ETC 
EBBE 5D               (                    ROMbasic.ASM):02743 LB949     TSTB                CHECK CURRENT PRINT POSITION 
EBBF 2608             (                    ROMbasic.ASM):02744           BNE  LB954          BRANCH IF NOT AT START OF LINE 
EBC1 9D82             (                    ROMbasic.ASM):02745           JSR  GETCCH         GET CURRENT INPUT CHARACTER 
EBC3 812C             (                    ROMbasic.ASM):02746           CMPA #',            COMMA? 
EBC5 2714             (                    ROMbasic.ASM):02747           BEQ  LB966          SKIP TO NEXT TAB FIELD 
EBC7 8D54             (                    ROMbasic.ASM):02748           BSR  LB9AC          SEND A SPACE TO CONSOLE OUT 
EBC9 9D82             (                    ROMbasic.ASM):02749 LB954     JSR  GETCCH         GET CURRENT INPUT CHARACTER 
EBCB 26CF             (                    ROMbasic.ASM):02750           BNE  LB91D          BRANCH IF NOT END OF LINE 
EBCD 860D             (                    ROMbasic.ASM):02751 LB958     LDA  #CR            * SEND A CR TO 
EBCF 2051             (                    ROMbasic.ASM):02752           BRA  LB9B1          * CONSOLE OUT 
EBD1 BDDC58           (                    ROMbasic.ASM):02753 LB95C     JSR  LA35F          SET UP TAB WIDTH, ZONE ETC 
EBD4 27F7             (                    ROMbasic.ASM):02754           BEQ  LB958          BRANCH IF WIDTH = ZERO 
EBD6 966C             (                    ROMbasic.ASM):02755           LDA  DEVPOS         GET PRINT POSITION 
EBD8 26F3             (                    ROMbasic.ASM):02756           BNE  LB958          BRANCH IF NOT AT START OF LINE 
EBDA 39               (                    ROMbasic.ASM):02757 LB965     RTS                  
                      (                    ROMbasic.ASM):02758 ; SKIP TO NEXT TAB FIELD                      
EBDB BDDC58           (                    ROMbasic.ASM):02759 LB966     JSR  LA35F          SET UP TAB WIDTH, ZONE ETC 
EBDE 270A             (                    ROMbasic.ASM):02760           BEQ  LB975          BRANCH IF LINE WIDTH = 0 (CASSETTE) 
EBE0 D66C             (                    ROMbasic.ASM):02761           LDB  DEVPOS         GET CURRENT POSITION 
EBE2 D16B             (                    ROMbasic.ASM):02762           CMPB DEVLCF         COMPARE TO LAST TAB ZONE 
EBE4 2506             (                    ROMbasic.ASM):02763           BCS  LB977          BRANCH IF < LAST TAB ZONE 
EBE6 8DE5             (                    ROMbasic.ASM):02764           BSR  LB958          SEND A CARRIAGE RETURN TO CONSOLE OUT 
EBE8 201E             (                    ROMbasic.ASM):02765           BRA  LB997          GET MORE DATA 
EBEA D66C             (                    ROMbasic.ASM):02766 LB975     LDB  DEVPOS         * 
EBEC D06A             (                    ROMbasic.ASM):02767 LB977     SUBB DEVCFW         * SUBTRACT TAB FIELD WIDTH FROM CURRENT 
EBEE 24FC             (                    ROMbasic.ASM):02768           BCC  LB977          * POSITION UNTIL CARRY SET - NEGATING THE 
EBF0 50               (                    ROMbasic.ASM):02769           NEGB                * REMAINDER LEAVES THE NUMBER OF SPACES TO NEXT 
                      (                    ROMbasic.ASM):02770 ;              * TAB ZONE IN ACCB  
EBF1 2010             (                    ROMbasic.ASM):02771           BRA  LB98E          GO ADVANCE TO NEXT TAB ZONE 
                      (                    ROMbasic.ASM):02772                                
                      (                    ROMbasic.ASM):02773 ; PRINT TAB(                      
EBF3 BDE9B5           (                    ROMbasic.ASM):02774 LB97E     JSR  LB709          EVALUATE EXPRESSION - RETURN VALUE IN B 
EBF6 8129             (                    ROMbasic.ASM):02775           CMPA #')            * 'SYNTAX' ERROR IF NOT ')' 
EBF8 1026F92C         (                    ROMbasic.ASM):02776           LBNE LB277          * 
EBFC BDDC58           (                    ROMbasic.ASM):02777           JSR  LA35F          SET UP TAB WIDTH, ZONE ETC 
EBFF D06C             (                    ROMbasic.ASM):02778           SUBB DEVPOS         GET DIFFERENCE OF PRINT POSITION & TAB POSITION 
EC01 2305             (                    ROMbasic.ASM):02779           BLS  LB997          BRANCH IF TAB POSITION < CURRENT POSITION 
                      (                    ROMbasic.ASM):02780 LB98E                          
EC03 8D18             (                    ROMbasic.ASM):02781 LB992     BSR  LB9AC          SEND A SPACE TO CONSOLE OUT 
EC05 5A               (                    ROMbasic.ASM):02782           DECB                DECREMENT DIFFERENCE COUNT 
EC06 26FB             (                    ROMbasic.ASM):02783           BNE  LB992          BRANCH UNTIL CURRENT POSITION = TAB POSITION 
EC08 9D7C             (                    ROMbasic.ASM):02784 LB997     JSR  GETNCH         GET NEXT CHARACTER FROM BASIC 
EC0A 7EEB9A           (                    ROMbasic.ASM):02785           JMP  LB91B          LOOK FOR MORE PRINT DATA 
                      (                    ROMbasic.ASM):02786 ; COPY A STRING FROM (X) TO CONSOLE OUT                      
EC0D BDE7C4           (                    ROMbasic.ASM):02787 LB99C     JSR  LB518          PARSE A STRING FROM X AND PUT 
                      (                    ROMbasic.ASM):02788 ;                                DESCRIPTOR ON STRING STACK  
EC10 BDE903           (                    ROMbasic.ASM):02789 LB99F     JSR  LB657          GET LENGTH OF STRING AND REMOVE 
                      (                    ROMbasic.ASM):02790 ;                                DESCRIPTOR FROM STRING STACK  
EC13 5C               (                    ROMbasic.ASM):02791           INCB                COMPENSATE FOR DECB BELOW 
EC14 5A               (                    ROMbasic.ASM):02792 LB9A3     DECB                DECREMENT COUNTER 
EC15 27C3             (                    ROMbasic.ASM):02793           BEQ  LB965          EXIT ROUTINE 
EC17 A680             (                    ROMbasic.ASM):02794           LDA  ,X+            GET A CHARACTER FROM X 
EC19 8D07             (                    ROMbasic.ASM):02795           BSR  LB9B1          SEND TO CONSOLE OUT 
EC1B 20F7             (                    ROMbasic.ASM):02796           BRA  LB9A3          KEEP LOOPING 
EC1D 8620             (                    ROMbasic.ASM):02797 LB9AC     LDA  #SPACE         SPACE TO CONSOLE OUT 
EC1F 8C               (                    ROMbasic.ASM):02798           FCB  SKP2           SKIP NEXT TWO BYTES 
EC20 863F             (                    ROMbasic.ASM):02799 LB9AF     LDA  #'?            QUESTION MARK TO CONSOLE OUT 
EC22 7EDB17           (                    ROMbasic.ASM):02800 LB9B1     JMP  PUTCHR         JUMP TO CONSOLE OUT 
                      (                    ROMbasic.ASM):02801                                
                      (                    ROMbasic.ASM):02802 ; FLOATING POINT MATH PACKAGE                      
                      (                    ROMbasic.ASM):02803                                
                      (                    ROMbasic.ASM):02804 ; ADD .5 TO FPA0                      
EC25 8EF131           (                    ROMbasic.ASM):02805 LB9B4     LDX  #LBEC0         FLOATING POINT CONSTANT (.5) 
EC28 2009             (                    ROMbasic.ASM):02806           BRA  LB9C2          ADD .5 TO FPA0 
                      (                    ROMbasic.ASM):02807 ; SUBTRACT FPA0 FROM FP NUMBER POINTED                      
                      (                    ROMbasic.ASM):02808 ; TO BY (X), LEAVE RESULT IN FPA0                      
EC2A BDEDA0           (                    ROMbasic.ASM):02809 LB9B9     JSR  LBB2F          COPY PACKED FP DATA FROM (X) TO FPA1 
                      (                    ROMbasic.ASM):02810                                
                      (                    ROMbasic.ASM):02811 ; ARITHMETIC OPERATION (-) JUMPS HERE - SUBTRACT FPA0 FROM FPA1 (ENTER                      
                      (                    ROMbasic.ASM):02812 ; WITH EXPONENT OF FPA0 IN ACCB AND EXPONENT OF FPA1 IN ACCA)                      
EC2D 0354             (                    ROMbasic.ASM):02813 LB9BC     COM  FP0SGN         CHANGE MANTISSA SIGN OF FPA0 
EC2F 0362             (                    ROMbasic.ASM):02814           COM  RESSGN         REVERSE RESULT SIGN FLAG 
EC31 2003             (                    ROMbasic.ASM):02815           BRA  LB9C5          GO ADD FPA1 AND FPA0 
                      (                    ROMbasic.ASM):02816 ; ADD FP NUMBER POINTED TO BY                      
                      (                    ROMbasic.ASM):02817 ; (X) TO FPA0 - LEAVE RESULT IN FPA0                      
EC33 BDEDA0           (                    ROMbasic.ASM):02818 LB9C2     JSR  LBB2F          UNPACK PACKED FP DATA FROM (X) TO 
                      (                    ROMbasic.ASM):02819 ;         FPA1; RETURN EXPONENT OF FPA1 IN ACCA  
                      (                    ROMbasic.ASM):02820                                
                      (                    ROMbasic.ASM):02821 ; ARITHMETIC OPERATION (+) JUMPS HERE - ADD FPA0 TO                      
                      (                    ROMbasic.ASM):02822                                
EC36 5D               (                    ROMbasic.ASM):02823 LB9C5     TSTB                CHECK EXPONENT OF FPA0 
EC37 10270280         (                    ROMbasic.ASM):02824           LBEQ LBC4A          COPY FPA1 TO FPA0 IF FPA0 = 
EC3B 8E005C           (                    ROMbasic.ASM):02825           LDX  #FP1EXP        POINT X TO FPA1 
EC3E 1F89             (                    ROMbasic.ASM):02826 LB9CD     TFR  A,B            PUT EXPONENT OF FPA1 INTO ACCB 
EC40 5D               (                    ROMbasic.ASM):02827           TSTB                CHECK EXPONENT 
EC41 276C             (                    ROMbasic.ASM):02828           BEQ  LBA3E          RETURN IF EXPONENT = 0 (ADDING 0 TO FPA0) 
EC43 D04F             (                    ROMbasic.ASM):02829           SUBB FP0EXP         SUBTRACT EXPONENT OF FPA0 FROM EXPONENT OF FPA1 
EC45 2769             (                    ROMbasic.ASM):02830           BEQ  LBA3F          BRANCH IF EXPONENTS ARE EQUAL 
EC47 250A             (                    ROMbasic.ASM):02831           BCS  LB9E2          BRANCH IF EXPONENT FPA0 > FPA1 
EC49 974F             (                    ROMbasic.ASM):02832           STA  FP0EXP         REPLACE FPA0 EXPONENT WITH FPA1 EXPONENT 
EC4B 9661             (                    ROMbasic.ASM):02833           LDA  FP1SGN         * REPLACE FPA0 MANTISSA SIGN 
EC4D 9754             (                    ROMbasic.ASM):02834           STA  FP0SGN         * WITH FPA1 MANTISSA SIGN 
EC4F 8E004F           (                    ROMbasic.ASM):02835           LDX  #FP0EXP        POINT X TO FPA0 
EC52 50               (                    ROMbasic.ASM):02836           NEGB                NEGATE DIFFERENCE OF EXPONENTS 
EC53 C1F8             (                    ROMbasic.ASM):02837 LB9E2     CMPB #-8            TEST DIFFERENCE OF EXPONENTS 
EC55 2F59             (                    ROMbasic.ASM):02838           BLE  LBA3F          BRANCH IF DIFFERENCE OF EXPONENTS <= 8 
EC57 4F               (                    ROMbasic.ASM):02839           CLRA                CLEAR OVERFLOW BYTE 
EC58 6401             (                    ROMbasic.ASM):02840           LSR  1,X            SHIFT MS BYTE OF MANTISSA; BIT 7 = 0 
EC5A BDED2B           (                    ROMbasic.ASM):02841           JSR  LBABA          GO SHIFT MANTISSA OF (X) TO THE RIGHT (B) TIMES 
EC5D D662             (                    ROMbasic.ASM):02842 LB9EC     LDB  RESSGN         GET SIGN FLAG 
EC5F 2A0B             (                    ROMbasic.ASM):02843           BPL  LB9FB          BRANCH IF FPA0 AND FPA1 SIGNS ARE THE SAME 
EC61 6301             (                    ROMbasic.ASM):02844           COM  1,X            * COMPLEMENT MANTISSA POINTED 
EC63 6302             (                    ROMbasic.ASM):02845           COM  2,X            * TO BY (X) THE 
EC65 6303             (                    ROMbasic.ASM):02846           COM  3,X            * ADCA BELOW WILL 
EC67 6304             (                    ROMbasic.ASM):02847           COM  4,X            * CONVERT THIS OPERATION 
EC69 43               (                    ROMbasic.ASM):02848           COMA                * INTO A NEG (MANTISSA) 
EC6A 8900             (                    ROMbasic.ASM):02849           ADCA #0             ADD ONE TO ACCA - COMA ALWAYS SETS THE CARRY FLAG 
                      (                    ROMbasic.ASM):02850 ; THE PREVIOUS TWO BYTES MAY BE REPLACED BY A NEGA                      
                      (                    ROMbasic.ASM):02851 ;                              
                      (                    ROMbasic.ASM):02852 ; ADD MANTISSAS OF FPA0 AND FPA1, PUT RESULT IN FPA0                      
EC6C 9763             (                    ROMbasic.ASM):02853 LB9FB     STA  FPSBYT         SAVE FPA SUB BYTE 
EC6E 9653             (                    ROMbasic.ASM):02854           LDA  FPA0+3         * ADD LS BYTE 
EC70 9960             (                    ROMbasic.ASM):02855           ADCA FPA1+3         * OF MANTISSA 
EC72 9753             (                    ROMbasic.ASM):02856           STA  FPA0+3         SAVE IN FPA0 LSB 
EC74 9652             (                    ROMbasic.ASM):02857           LDA  FPA0+2         * ADD NEXT BYTE 
EC76 995F             (                    ROMbasic.ASM):02858           ADCA FPA1+2         * OF MANTISSA 
EC78 9752             (                    ROMbasic.ASM):02859           STA  FPA0+2         SAVE IN FPA0 
EC7A 9651             (                    ROMbasic.ASM):02860           LDA  FPA0+1         * ADD NEXT BYTE 
EC7C 995E             (                    ROMbasic.ASM):02861           ADCA FPA1+1         * OF MANTISSA 
EC7E 9751             (                    ROMbasic.ASM):02862           STA  FPA0+1         SAVE IN FPA0 
EC80 9650             (                    ROMbasic.ASM):02863           LDA  FPA0           * ADD MS BYTE 
EC82 995D             (                    ROMbasic.ASM):02864           ADCA FPA1           * OF MANTISSA 
EC84 9750             (                    ROMbasic.ASM):02865           STA  FPA0           SAVE IN FPA0 
EC86 5D               (                    ROMbasic.ASM):02866           TSTB TEST SIGN FLAG  
EC87 2A44             (                    ROMbasic.ASM):02867           BPL  LBA5C          BRANCH IF FPA0 & FPA1 SIGNS WERE ALIKE 
EC89 2502             (                    ROMbasic.ASM):02868 LBA18     BCS  LBA1C          BRANCH IF POSITIVE MANTISSA 
EC8B 8D5D             (                    ROMbasic.ASM):02869           BSR  LBA79          NEGATE FPA0 MANTISSA 
                      (                    ROMbasic.ASM):02870                                
                      (                    ROMbasic.ASM):02871 ; NORMALIZE FPA0                      
EC8D 5F               (                    ROMbasic.ASM):02872 LBA1C     CLRB                CLEAR TEMPORARY EXPONENT ACCUMULATOR 
EC8E 9650             (                    ROMbasic.ASM):02873 LBA1D     LDA  FPA0           TEST MSB OF MANTISSA 
EC90 262E             (                    ROMbasic.ASM):02874           BNE  LBA4F          BRANCH IF <> 0 
EC92 9651             (                    ROMbasic.ASM):02875           LDA  FPA0+1         * IF THE MSB IS 
EC94 9750             (                    ROMbasic.ASM):02876           STA  FPA0           * 0, THEN SHIFT THE 
EC96 9652             (                    ROMbasic.ASM):02877           LDA  FPA0+2         * MANTISSA A WHOLE BYTE 
EC98 9751             (                    ROMbasic.ASM):02878           STA  FPA0+1         * AT A TIME. THIS 
EC9A 9653             (                    ROMbasic.ASM):02879           LDA  FPA0+3         * IS FASTER THAN ONE 
EC9C 9752             (                    ROMbasic.ASM):02880           STA  FPA0+2         * BIT AT A TIME 
EC9E 9663             (                    ROMbasic.ASM):02881           LDA  FPSBYT         * BUT USES MORE MEMORY. 
ECA0 9753             (                    ROMbasic.ASM):02882           STA  FPA0+3         * FPSBYT, THE CARRY IN 
ECA2 0F63             (                    ROMbasic.ASM):02883           CLR  FPSBYT         * BYTE, REPLACES THE MATISSA LSB. 
ECA4 CB08             (                    ROMbasic.ASM):02884           ADDB #8             SHIFTING ONE BYTE = 8 BIT SHIFTS; ADD 8 TO EXPONENT 
ECA6 C128             (                    ROMbasic.ASM):02885           CMPB #5*8           CHECK FOR 5 SHIFTS 
ECA8 2DE4             (                    ROMbasic.ASM):02886           BLT  LBA1D          BRANCH IF < 5 SHIFTS, IF > 5, THEN MANTISSA = 0 
ECAA 4F               (                    ROMbasic.ASM):02887 LBA39     CLRA                A ZERO EXPONENT = 0 FLOATING POINT 
ECAB 974F             (                    ROMbasic.ASM):02888 LBA3A     STA  FP0EXP         ZERO OUT THE EXPONENT 
ECAD 9754             (                    ROMbasic.ASM):02889           STA  FP0SGN         ZERO OUT THE MANTISSA SIGN 
ECAF 39               (                    ROMbasic.ASM):02890 LBA3E     RTS                  
ECB0 8D6D             (                    ROMbasic.ASM):02891 LBA3F     BSR  LBAAE          SHIFT FPA0 MANTISSA TO RIGHT 
ECB2 5F               (                    ROMbasic.ASM):02892           CLRB                CLEAR CARRY FLAG 
ECB3 20A8             (                    ROMbasic.ASM):02893           BRA  LB9EC           
                      (                    ROMbasic.ASM):02894 ; SHIFT FPA0 LEFT ONE BIT UNTIL BIT 7                      
                      (                    ROMbasic.ASM):02895 ; OF MATISSA MS BYTE = 1                      
ECB5 5C               (                    ROMbasic.ASM):02896 LBA44     INCB                ADD ONE TO EXPONENT ACCUMULATOR 
ECB6 0863             (                    ROMbasic.ASM):02897           ASL  FPSBYT         SHIFT SUB BYTE ONE LEFT 
ECB8 0953             (                    ROMbasic.ASM):02898           ROL  FPA0+3         SHIFT LS BYTE 
ECBA 0952             (                    ROMbasic.ASM):02899           ROL  FPA0+2         SHIFT NS BYTE 
ECBC 0951             (                    ROMbasic.ASM):02900           ROL  FPA0+1         SHIFT NS BYTE 
ECBE 0950             (                    ROMbasic.ASM):02901           ROL  FPA0           SHIFT MS BYTE 
ECC0 2AF3             (                    ROMbasic.ASM):02902 LBA4F     BPL  LBA44          BRANCH IF NOT YET NORMALIZED 
ECC2 964F             (                    ROMbasic.ASM):02903           LDA  FP0EXP         GET CURRENT EXPONENT 
ECC4 3404             (                    ROMbasic.ASM):02904           PSHS B              SAVE EXPONENT MODIFIER CAUSED BY NORMALIZATION 
ECC6 A0E0             (                    ROMbasic.ASM):02905           SUBA ,S+            SUBTRACT ACCUMULATED EXPONENT MODIFIER 
ECC8 974F             (                    ROMbasic.ASM):02906           STA  FP0EXP         SAVE AS NEW EXPONENT 
ECCA 23DE             (                    ROMbasic.ASM):02907           BLS  LBA39          SET FPA0 = 0 IF THE NORMALIZATION CAUSED 
                      (                    ROMbasic.ASM):02908 ;         MORE OR EQUAL NUMBER OF LEFT SHIFTS THAN THE  
                      (                    ROMbasic.ASM):02909 ;         SIZE OF THE EXPONENT  
ECCC 8C               (                    ROMbasic.ASM):02910           FCB  SKP2           SKIP 2 BYTES 
ECCD 2508             (                    ROMbasic.ASM):02911 LBA5C     BCS  LBA66          BRANCH IF MANTISSA OVERFLOW 
ECCF 0863             (                    ROMbasic.ASM):02912           ASL  FPSBYT         SUB BYTE BIT 7 TO CARRY - USE AS ROUND-OFF 
                      (                    ROMbasic.ASM):02913 ;                             FLAG (TRUNCATE THE REST OF SUB BYTE) 
ECD1 8600             (                    ROMbasic.ASM):02914           LDA  #0             CLRA, BUT DO NOT CHANGE CARRY FLAG 
ECD3 9763             (                    ROMbasic.ASM):02915           STA  FPSBYT         CLEAR THE SUB BYTE 
ECD5 200C             (                    ROMbasic.ASM):02916           BRA  LBA72          GO ROUND-OFF RESULT 
ECD7 0C4F             (                    ROMbasic.ASM):02917 LBA66     INC  FP0EXP         INCREMENT EXPONENT - MULTIPLY BY 2 
ECD9 2728             (                    ROMbasic.ASM):02918           BEQ  LBA92          OVERFLOW ERROR IF CARRY PAST $FF 
ECDB 0650             (                    ROMbasic.ASM):02919           ROR  FPA0           * SHIFT MANTISSA 
ECDD 0651             (                    ROMbasic.ASM):02920           ROR  FPA0+1         * ONE TO 
ECDF 0652             (                    ROMbasic.ASM):02921           ROR  FPA0+2         * THE RIGHT - 
ECE1 0653             (                    ROMbasic.ASM):02922           ROR  FPA0+3         * DIVIDE BY TWO 
ECE3 2404             (                    ROMbasic.ASM):02923 LBA72     BCC  LBA78          BRANCH IF NO ROUND-OFF NEEDED 
ECE5 8D0D             (                    ROMbasic.ASM):02924           BSR  LBA83          ADD ONE TO MANTISSA - ROUND OFF 
ECE7 27EE             (                    ROMbasic.ASM):02925           BEQ  LBA66          BRANCH iF OVERFLOW - MANTISSA = 0 
ECE9 39               (                    ROMbasic.ASM):02926 LBA78     RTS                  
                      (                    ROMbasic.ASM):02927 ; NEGATE FPA0 MANTISSA                      
ECEA 0354             (                    ROMbasic.ASM):02928 LBA79     COM  FP0SGN         TOGGLE SIGN OF MANTISSA 
ECEC 0350             (                    ROMbasic.ASM):02929 LBA7B     COM  FPA0           * COMPLEMENT ALL 4 MANTISSA BYTES 
ECEE 0351             (                    ROMbasic.ASM):02930           COM  FPA0+1         * 
ECF0 0352             (                    ROMbasic.ASM):02931           COM  FPA0+2         * 
ECF2 0353             (                    ROMbasic.ASM):02932           COM  FPA0+3         * 
                      (                    ROMbasic.ASM):02933 ; ADD ONE TO FPA0 MANTISSA                      
ECF4 9E52             (                    ROMbasic.ASM):02934 LBA83     LDX  FPA0+2         * GET BOTTOM 2 MANTISSA 
ECF6 3001             (                    ROMbasic.ASM):02935           LEAX 1,X            * BYTES, ADD ONE TO 
ECF8 9F52             (                    ROMbasic.ASM):02936           STX  FPA0+2         * THEM AND SAVE THEM 
ECFA 2606             (                    ROMbasic.ASM):02937           BNE  LBA91          BRANCH IF NO OVERFLOW 
ECFC 9E50             (                    ROMbasic.ASM):02938           LDX  FPA0           * IF OVERFLOW ADD ONE 
ECFE 3001             (                    ROMbasic.ASM):02939           LEAX 1,X            * TO TOP 2 MANTISSA 
ED00 9F50             (                    ROMbasic.ASM):02940           STX  FPA0           * BYTES AND SAVE THEM 
ED02 39               (                    ROMbasic.ASM):02941 LBA91     RTS                  
ED03 C60A             (                    ROMbasic.ASM):02942 LBA92     LDB  #2*5           OV' OVERFLOW ERROR 
ED05 7EDF2B           (                    ROMbasic.ASM):02943           JMP  LAC46          PROCESS AN ERROR 
ED08 8E0012           (                    ROMbasic.ASM):02944 LBA97     LDX  #FPA2-1        POINT X TO FPA2 
                      (                    ROMbasic.ASM):02945 ; SHIFT FPA POINTED TO BY (X) TO                      
                      (                    ROMbasic.ASM):02946 ; THE RIGHT -(B) TIMES. EXIT WITH                      
                      (                    ROMbasic.ASM):02947 ; ACCA CONTAINING DATA SHIFTED OUT                      
                      (                    ROMbasic.ASM):02948 ; TO THE RIGHT (SUB BYTE) AND THE DATA                      
                      (                    ROMbasic.ASM):02949 ; SHIFTED IN FROM THE LEFT WILL COME FROM FPCARY                      
ED0B A604             (                    ROMbasic.ASM):02950 LBA9A     LDA  4,X            GET LS BYTE OF MANTISSA (X) 
ED0D 9763             (                    ROMbasic.ASM):02951           STA  FPSBYT         SAVE IN FPA SUB BYTE 
ED0F A603             (                    ROMbasic.ASM):02952           LDA  3,X            * SHIFT THE NEXT THREE BYTES OF THE 
ED11 A704             (                    ROMbasic.ASM):02953           STA  4,X            * MANTISSA RIGHT ONE COMPLETE BYTE. 
ED13 A602             (                    ROMbasic.ASM):02954           LDA  2,X            * 
ED15 A703             (                    ROMbasic.ASM):02955           STA  3,X            * 
ED17 A601             (                    ROMbasic.ASM):02956           LDA  1,X            * 
ED19 A702             (                    ROMbasic.ASM):02957           STA  2,X            * 
ED1B 965B             (                    ROMbasic.ASM):02958           LDA  FPCARY         GET THE CARRY IN BYTE 
ED1D A701             (                    ROMbasic.ASM):02959           STA  1,X            STORE AS THE MS MANTISSA BYTE OF (X) 
ED1F CB08             (                    ROMbasic.ASM):02960 LBAAE     ADDB #8             ADD 8 TO DIFFERENCE OF EXPONENTS 
ED21 2FE8             (                    ROMbasic.ASM):02961           BLE  LBA9A          BRANCH IF EXPONENT DIFFERENCE < -8 
ED23 9663             (                    ROMbasic.ASM):02962           LDA  FPSBYT         GET FPA SUB BYTE 
ED25 C008             (                    ROMbasic.ASM):02963           SUBB #8             CAST OUT THE 8 ADDED IN ABOVE 
ED27 270C             (                    ROMbasic.ASM):02964           BEQ  LBAC4          BRANCH IF EXPONENT DIFFERENCE = 0 
                      (                    ROMbasic.ASM):02965                                
                      (                    ROMbasic.ASM):02966                                
ED29 6701             (                    ROMbasic.ASM):02967 LBAB8     ASR  1,X            * SHIFT MANTISSA AND SUB BYTE ONE BIT TO THE RIGHT 
ED2B 6602             (                    ROMbasic.ASM):02968 LBABA     ROR  2,X            * 
ED2D 6603             (                    ROMbasic.ASM):02969           ROR  3,X            * 
ED2F 6604             (                    ROMbasic.ASM):02970           ROR  4,X            * 
ED31 46               (                    ROMbasic.ASM):02971           RORA                * 
ED32 5C               (                    ROMbasic.ASM):02972           INCB                ADD ONE TO EXPONENT DIFFERENCE 
ED33 26F4             (                    ROMbasic.ASM):02973           BNE  LBAB8          BRANCH IF EXPONENTS NOT = 
ED35 39               (                    ROMbasic.ASM):02974 LBAC4     RTS                  
ED36 8100000000       (                    ROMbasic.ASM):02975 LBAC5     FCB  $81,$00,$00,$00,$00 FLOATING POINT CONSTANT 1.0 
                      (                    ROMbasic.ASM):02976                                
                      (                    ROMbasic.ASM):02977 ; ARITHMETIC OPERATION (*) JUMPS HERE - MULTIPLY                      
                      (                    ROMbasic.ASM):02978 ; FPA0 BY (X) - RETURN PRODUCT IN FPA0                      
ED3B 8D63             (                    ROMbasic.ASM):02979 LBACA     BSR  LBB2F          MOVE PACKED FPA FROM (X) TO FPA1 
ED3D 2760             (                    ROMbasic.ASM):02980 LBACC     BEQ  LBB2E          BRANCH IF EXPONENT OF FPA0 = 0 
ED3F 8D78             (                    ROMbasic.ASM):02981           BSR  LBB48          CALCULATE EXPONENT OF PRODUCT 
                      (                    ROMbasic.ASM):02982 ; MULTIPLY FPA0 MANTISSA BY FPA1. NORMALIZE                      
                      (                    ROMbasic.ASM):02983 ; HIGH ORDER BYTES OF PRODUCT IN FPA0. THE                      
                      (                    ROMbasic.ASM):02984 ; LOW ORDER FOUR BYTES OF THE PRODUCT WILL                      
                      (                    ROMbasic.ASM):02985 ; BE STORED IN VAB-VAE.                      
ED41 8600             (                    ROMbasic.ASM):02986 LBAD0     LDA  #0             * ZERO OUT MANTISSA OF FPA2 
ED43 9713             (                    ROMbasic.ASM):02987           STA  FPA2           * 
ED45 9714             (                    ROMbasic.ASM):02988           STA  FPA2+1         * 
ED47 9715             (                    ROMbasic.ASM):02989           STA  FPA2+2         * 
ED49 9716             (                    ROMbasic.ASM):02990           STA  FPA2+3         * 
ED4B D653             (                    ROMbasic.ASM):02991           LDB  FPA0+3         GET LS BYTE OF FPA0 
ED4D 8D22             (                    ROMbasic.ASM):02992           BSR  LBB00          MULTIPLY BY FPA1 
ED4F D663             (                    ROMbasic.ASM):02993           LDB  FPSBYT         * TEMPORARILY SAVE SUB BYTE 4 
ED51 D78B             (                    ROMbasic.ASM):02994           STB  VAE            * 
ED53 D652             (                    ROMbasic.ASM):02995           LDB  FPA0+2         GET NUMBER 3 MANTISSA BYTE OF FPA0 
ED55 8D1A             (                    ROMbasic.ASM):02996           BSR  LBB00          MULTIPLY BY FPA1 
ED57 D663             (                    ROMbasic.ASM):02997           LDB  FPSBYT         * TEMPORARILY SAVE SUB BYTE 3 
ED59 D78A             (                    ROMbasic.ASM):02998           STB  VAD            * 
ED5B D651             (                    ROMbasic.ASM):02999           LDB  FPA0+1         GET NUMBER 2 MANTISSA BYTE OF FPA0 
ED5D 8D12             (                    ROMbasic.ASM):03000           BSR  LBB00          MULTIPLY BY FPA1 
ED5F D663             (                    ROMbasic.ASM):03001           LDB  FPSBYT         * TEMPORARILY SAVE SUB BYTE 2 
ED61 D789             (                    ROMbasic.ASM):03002           STB  VAC            * 
ED63 D650             (                    ROMbasic.ASM):03003           LDB  FPA0           GET MS BYTE OF FPA0 MANTISSA 
ED65 8D0C             (                    ROMbasic.ASM):03004           BSR  LBB02          MULTIPLY BY FPA1 
ED67 D663             (                    ROMbasic.ASM):03005           LDB  FPSBYT         * TEMPORARILY SAVE SUB BYTE 1 
ED69 D788             (                    ROMbasic.ASM):03006           STB  VAB            * 
ED6B BDEE7C           (                    ROMbasic.ASM):03007           JSR  LBC0B          COPY MANTISSA FROM FPA2 TO FPA0 
ED6E 7EEC8D           (                    ROMbasic.ASM):03008           JMP  LBA1C          NORMALIZE FPA0 
ED71 2795             (                    ROMbasic.ASM):03009 LBB00     BEQ  LBA97          SHIFT FPA2 ONE BYTE TO RIGHT 
ED73 43               (                    ROMbasic.ASM):03010 LBB02     COMA                SET CARRY FLAG 
                      (                    ROMbasic.ASM):03011 ; MULTIPLY FPA1 MANTISSA BY ACCB AND                      
                      (                    ROMbasic.ASM):03012 ; ADD PRODUCT TO FPA2 MANTISSA                      
ED74 9613             (                    ROMbasic.ASM):03013 LBB03     LDA  FPA2           GET FPA2 MS BYTE 
ED76 56               (                    ROMbasic.ASM):03014           RORB ROTATE CARRY FLAG INTO SHIFT COUNTER;  
                      (                    ROMbasic.ASM):03015 ;         DATA BIT INTO CARRY  
ED77 2726             (                    ROMbasic.ASM):03016           BEQ  LBB2E          BRANCH WHEN 8 SHIFTS DONE 
ED79 2416             (                    ROMbasic.ASM):03017           BCC  LBB20          DO NOT ADD FPA1 IF DATA BIT = 0 
ED7B 9616             (                    ROMbasic.ASM):03018           LDA  FPA2+3         * ADD MANTISSA LS BYTE 
ED7D 9B60             (                    ROMbasic.ASM):03019           ADDA FPA1+3         * 
ED7F 9716             (                    ROMbasic.ASM):03020           STA  FPA2+3         * 
ED81 9615             (                    ROMbasic.ASM):03021           LDA  FPA2+2         = ADD MANTISSA NUMBER 3 BYTE 
ED83 995F             (                    ROMbasic.ASM):03022           ADCA FPA1+2         = 
ED85 9715             (                    ROMbasic.ASM):03023           STA  FPA2+2         = 
ED87 9614             (                    ROMbasic.ASM):03024           LDA  FPA2+1         * ADD MANTISSA NUMBER 2 BYTE 
ED89 995E             (                    ROMbasic.ASM):03025           ADCA FPA1+1         * 
ED8B 9714             (                    ROMbasic.ASM):03026           STA  FPA2+1         * 
ED8D 9613             (                    ROMbasic.ASM):03027           LDA  FPA2           = ADD MANTISSA MS BYTE 
ED8F 995D             (                    ROMbasic.ASM):03028           ADCA FPA1           = 
ED91 46               (                    ROMbasic.ASM):03029 LBB20     RORA * ROTATE CARRY INTO MS BYTE  
ED92 9713             (                    ROMbasic.ASM):03030           STA  FPA2           * 
ED94 0614             (                    ROMbasic.ASM):03031           ROR  FPA2+1         = ROTATE FPA2 ONE BIT TO THE RIGHT 
ED96 0615             (                    ROMbasic.ASM):03032           ROR  FPA2+2         = 
ED98 0616             (                    ROMbasic.ASM):03033           ROR  FPA2+3         = 
ED9A 0663             (                    ROMbasic.ASM):03034           ROR  FPSBYT         = 
ED9C 4F               (                    ROMbasic.ASM):03035           CLRA                CLEAR CARRY FLAG 
ED9D 20D5             (                    ROMbasic.ASM):03036           BRA  LBB03          KEEP LOOPING 
ED9F 39               (                    ROMbasic.ASM):03037 LBB2E     RTS                  
                      (                    ROMbasic.ASM):03038 ; UNPACK A FP NUMBER FROM (X) TO FPA1                      
EDA0 EC01             (                    ROMbasic.ASM):03039 LBB2F     LDD  1,X            GET TWO MSB BYTES OF MANTISSA FROM 
                      (                    ROMbasic.ASM):03040 ;         FPA  POINTED TO BY X  
EDA2 9761             (                    ROMbasic.ASM):03041           STA  FP1SGN         SAVE PACKED MANTISSA SIGN BYTE 
EDA4 8A80             (                    ROMbasic.ASM):03042           ORA  #$80           FORCE BIT 7 OF MSB MANTISSA = 1 
EDA6 DD5D             (                    ROMbasic.ASM):03043           STD  FPA1           SAVE 2 MSB BYTES IN FPA1 
EDA8 D661             (                    ROMbasic.ASM):03044           LDB  FP1SGN         * GET PACKED MANTISSA SIGN BYTE. EOR W/FPA0 
EDAA D854             (                    ROMbasic.ASM):03045           EORB FP0SGN         * SIGN - NEW SIGN POSITION IF BOTH OLD SIGNS ALIKE, 
EDAC D762             (                    ROMbasic.ASM):03046           STB  RESSGN         * NEG IF BOTH OLD SIGNS DIFF. SAVE ADJUSTED 
                      (                    ROMbasic.ASM):03047 ;                             * MANTISSA SIGN BYTE 
EDAE EC03             (                    ROMbasic.ASM):03048           LDD  3,X            = GET 2 LSB BYTES OF MANTISSA 
EDB0 DD5F             (                    ROMbasic.ASM):03049           STD  FPA1+2         = AND PUT IN FPA1 
EDB2 A684             (                    ROMbasic.ASM):03050           LDA  ,X             * GET EXPONENT FROM (X) AND 
EDB4 975C             (                    ROMbasic.ASM):03051           STA  FP1EXP         * PUT IN EXPONENT OF FPA1 
EDB6 D64F             (                    ROMbasic.ASM):03052           LDB  FP0EXP         GET EXPONENT OF FPA0 
EDB8 39               (                    ROMbasic.ASM):03053           RTS                  
                      (                    ROMbasic.ASM):03054 ; CALCULATE EXPONENT FOR PRODUCT OF FPA0 & FPA1                      
                      (                    ROMbasic.ASM):03055 ; ENTER WITH EXPONENT OF FPA1 IN ACCA                      
EDB9 4D               (                    ROMbasic.ASM):03056 LBB48     TSTA                TEST EXPONENT OF FPA1 
EDBA 2716             (                    ROMbasic.ASM):03057           BEQ  LBB61          PURGE RETURN ADDRESS & SET FPA0 = 0 
EDBC 9B4F             (                    ROMbasic.ASM):03058           ADDA FP0EXP         ADD FPA1 EXPONENT TO FPA0 EXPONENT 
EDBE 46               (                    ROMbasic.ASM):03059           RORA                ROTATE CARRY INTO BIT 7; BIT 0 INTO CARRY 
EDBF 49               (                    ROMbasic.ASM):03060           ROLA                SET OVERFLOW FLAG 
EDC0 2810             (                    ROMbasic.ASM):03061           BVC  LBB61          BRANCH IF EXPONENT TOO LARGE OR SMALL 
EDC2 8B80             (                    ROMbasic.ASM):03062           ADDA #$80           ADD $80 BIAS TO EXPONENT 
EDC4 974F             (                    ROMbasic.ASM):03063           STA  FP0EXP         SAVE NEW EXPONENT 
EDC6 270C             (                    ROMbasic.ASM):03064           BEQ  LBB63          SET FPA0 
EDC8 9662             (                    ROMbasic.ASM):03065           LDA  RESSGN         GET MANTISSA SIGN 
EDCA 9754             (                    ROMbasic.ASM):03066           STA  FP0SGN         SAVE AS MANTISSA SIGN OF FPA0 
EDCC 39               (                    ROMbasic.ASM):03067           RTS                  
                      (                    ROMbasic.ASM):03068 ; IF FPA0 = POSITIVE THEN 'OV' ERROR IF FPA0                      
                      (                    ROMbasic.ASM):03069 ; = IS NEGATIVE THEN FPA0 = 0                      
EDCD 9654             (                    ROMbasic.ASM):03070 LBB5C     LDA  FP0SGN         GET MANTISSA SIGN OF FPA0 
EDCF 43               (                    ROMbasic.ASM):03071           COMA                CHANGE SIGN OF FPA0 MANTISSA 
EDD0 2002             (                    ROMbasic.ASM):03072           BRA  LBB63           
EDD2 3262             (                    ROMbasic.ASM):03073 LBB61     LEAS 2,S            PURGE RETURN ADDRESS FROM STACK 
EDD4 102AFED2         (                    ROMbasic.ASM):03074 LBB63     LBPL LBA39          ZERO FPA0 MANTISSA SIGN & EXPONENT 
EDD8 7EED03           (                    ROMbasic.ASM):03075 LBB67     JMP  LBA92          OV' OVERFLOW ERROR 
                      (                    ROMbasic.ASM):03076 ; FAST MULTIPLY BY 10 AND LEAVE RESULT IN FPA0                      
EDDB BDEED0           (                    ROMbasic.ASM):03077 LBB6A     JSR  LBC5F          TRANSFER FPA0 TO FPA1 
EDDE 270D             (                    ROMbasic.ASM):03078           BEQ  LBB7C          BRANCH IF EXPONENT = 0 
EDE0 8B02             (                    ROMbasic.ASM):03079           ADDA #2             ADD 2 TO EXPONENT (TIMES 4) 
EDE2 25F4             (                    ROMbasic.ASM):03080           BCS  LBB67          OV' ERROR IF EXPONENT > $FF 
EDE4 0F62             (                    ROMbasic.ASM):03081           CLR  RESSGN         CLEAR RESULT SIGN BYTE 
EDE6 BDEC3E           (                    ROMbasic.ASM):03082           JSR  LB9CD          ADD FPA1 TO FPA0 (TIMES 5) 
EDE9 0C4F             (                    ROMbasic.ASM):03083           INC  FP0EXP         ADD ONE TO EXPONENT (TIMES 10) 
EDEB 27EB             (                    ROMbasic.ASM):03084           BEQ  LBB67          OV' ERROR IF EXPONENT > $FF 
EDED 39               (                    ROMbasic.ASM):03085 LBB7C     RTS                  
EDEE 8420000000       (                    ROMbasic.ASM):03086 LBB7D     FCB  $84,$20,$00,$00,$00 FLOATING POINT CONSTANT 10 
                      (                    ROMbasic.ASM):03087 ; DIVIDE FPA0 BY 10                      
EDF3 BDEED0           (                    ROMbasic.ASM):03088 LBB82     JSR  LBC5F          MOVE FPA0 TO FPA1 
EDF6 8EEDEE           (                    ROMbasic.ASM):03089           LDX  #LBB7D         POINT TO FLOATING POINT CONSTANT 10 
EDF9 5F               (                    ROMbasic.ASM):03090           CLRB                ZERO MANTISSA SIGN BYTE 
EDFA D762             (                    ROMbasic.ASM):03091 LBB89     STB  RESSGN         STORE THE QUOTIENT MANTISSA SIGN BYTE 
EDFC BDEE85           (                    ROMbasic.ASM):03092           JSR  LBC14          UNPACK AN FP NUMBER FROM (X) INTO FPA0 
EDFF 8C               (                    ROMbasic.ASM):03093           FCB  SKP2           SKIP TWO BYTES 
                      (                    ROMbasic.ASM):03094 ; DIVIDE (X) BY FPA0-LEAVE NORMALIZED QUOTIENT IN FPA0                      
EE00 8D9E             (                    ROMbasic.ASM):03095 LBB8F     BSR  LBB2F          GET FP NUMBER FROM (X) TO FPA1 
                      (                    ROMbasic.ASM):03096                                
                      (                    ROMbasic.ASM):03097 ; ARITHMETIC OPERATION (/) JUMPS HERE. DIVIDE FPA1 BY FPA0 (ENTER WITH                      
                      (                    ROMbasic.ASM):03098 ; EXPONENT OF FPA1 IN ACCA AND FLAGS SET BY TSTA)                      
                      (                    ROMbasic.ASM):03099                                
                      (                    ROMbasic.ASM):03100 ; DIVIDE FPA1 BY FPA0                      
EE02 2773             (                    ROMbasic.ASM):03101 LBB91     BEQ  LBC06          /0' DIVIDE BY ZERO ERROR 
EE04 004F             (                    ROMbasic.ASM):03102           NEG  FP0EXP         GET EXPONENT OF RECIPROCAL OF DIVISOR 
EE06 8DB1             (                    ROMbasic.ASM):03103           BSR  LBB48          CALCULATE EXPONENT OF QUOTIENT 
EE08 0C4F             (                    ROMbasic.ASM):03104           INC  FP0EXP         INCREMENT EXPONENT 
EE0A 27CC             (                    ROMbasic.ASM):03105           BEQ  LBB67          OV' OVERFLOW ERROR 
EE0C 8E0013           (                    ROMbasic.ASM):03106           LDX  #FPA2          POINT X TO MANTISSA OF FPA2 - HOLD 
                      (                    ROMbasic.ASM):03107 ;                             TEMPORARY QUOTIENT IN FPA2 
EE0F C604             (                    ROMbasic.ASM):03108           LDB  #4             5 BYTE DIVIDE 
EE11 D703             (                    ROMbasic.ASM):03109           STB  TMPLOC         SAVE BYTE COUNTER 
EE13 C601             (                    ROMbasic.ASM):03110           LDB  #1             SHIFT COUNTER-AND TEMPORARY QUOTIENT BYTE 
                      (                    ROMbasic.ASM):03111 ; COMPARE FPA0 MANTISSA TO FPA1 MANTISSA -                      
                      (                    ROMbasic.ASM):03112 ; SET CARRY FLAG IF FPA1 >= FPA0                      
EE15 9650             (                    ROMbasic.ASM):03113 LBBA4     LDA  FPA0           * COMPARE THE TWO MS BYTES 
EE17 915D             (                    ROMbasic.ASM):03114           CMPA FPA1           * OF FPA0 AND FPA1 AND 
EE19 2613             (                    ROMbasic.ASM):03115           BNE  LBBBD          * BRANCH IF <> 
EE1B 9651             (                    ROMbasic.ASM):03116           LDA  FPA0+1         = COMPARE THE NUMBER 2 
EE1D 915E             (                    ROMbasic.ASM):03117           CMPA FPA1+1         = BYTES AND 
EE1F 260D             (                    ROMbasic.ASM):03118           BNE  LBBBD          = BRANCH IF <> 
EE21 9652             (                    ROMbasic.ASM):03119           LDA  FPA0+2         * COMPARE THE NUMBER 3 
EE23 915F             (                    ROMbasic.ASM):03120           CMPA FPA1+2         * BYTES AND 
EE25 2607             (                    ROMbasic.ASM):03121           BNE  LBBBD          * BRANCH IF <> 
EE27 9653             (                    ROMbasic.ASM):03122           LDA  FPA0+3         = COMPARE THE LS BYTES 
EE29 9160             (                    ROMbasic.ASM):03123           CMPA FPA1+3         = AND BRANCH 
EE2B 2601             (                    ROMbasic.ASM):03124           BNE  LBBBD          = IF <> 
EE2D 43               (                    ROMbasic.ASM):03125           COMA                SET CARRY FLAG IF FPA0 = FPA1 
EE2E 1FA8             (                    ROMbasic.ASM):03126 LBBBD     TFR  CC,A           SAVE CARRY FLAG STATUS IN ACCA; CARRY 
                      (                    ROMbasic.ASM):03127 ;         CLEAR IF FPA0 > FPA1  
EE30 59               (                    ROMbasic.ASM):03128           ROLB                ROTATE CARRY INTO TEMPORARY QUOTIENT BYTE 
EE31 240A             (                    ROMbasic.ASM):03129           BCC  LBBCC          CARRY WILL BE SET AFTER 8 SHIFTS 
EE33 E780             (                    ROMbasic.ASM):03130           STB  ,X+            SAVE TEMPORARY QUOTIENT 
EE35 0A03             (                    ROMbasic.ASM):03131           DEC  TMPLOC         DECREMENT BYTE COUNTER 
EE37 2B34             (                    ROMbasic.ASM):03132           BMI  LBBFC          BRANCH IF DONE 
EE39 272E             (                    ROMbasic.ASM):03133           BEQ  LBBF8          BRANCH IF LAST BYTE 
EE3B C601             (                    ROMbasic.ASM):03134           LDB  #1             RESET SHIFT COUNTER AND TEMPORARY QUOTIENT BYTE 
EE3D 1F8A             (                    ROMbasic.ASM):03135 LBBCC     TFR  A,CC           RESTORE CARRY FLAG AND 
EE3F 250E             (                    ROMbasic.ASM):03136           BCS  LBBDE          BRANCH IF FPA0 =< FPA1 
EE41 0860             (                    ROMbasic.ASM):03137 LBBD0     ASL  FPA1+3         * SHIFT FPA1 MANTISSA 1 BIT TO LEFT 
EE43 095F             (                    ROMbasic.ASM):03138           ROL  FPA1+2         * 
EE45 095E             (                    ROMbasic.ASM):03139           ROL  FPA1+1         * 
EE47 095D             (                    ROMbasic.ASM):03140           ROL  FPA1           * 
EE49 25E3             (                    ROMbasic.ASM):03141           BCS  LBBBD          BRANCH IF CARRY - ADD ONE TO PARTIAL QUOTIENT 
EE4B 2BC8             (                    ROMbasic.ASM):03142           BMI  LBBA4          IF MSB OF HIGH ORDER MANTISSA BYTE IS 
                      (                    ROMbasic.ASM):03143 ;         SET, CHECK THE MAGNITUDES OF FPA0, FPA1  
EE4D 20DF             (                    ROMbasic.ASM):03144           BRA  LBBBD          CARRY IS CLEAR, CHECK ANOTHER BIT 
                      (                    ROMbasic.ASM):03145 ; SUBTRACT FPA0 FROM FPA1 - LEAVE RESULT IN FPA1                      
EE4F 9660             (                    ROMbasic.ASM):03146 LBBDE     LDA  FPA1+3         * SUBTRACT THE LS BYTES OF MANTISSA 
EE51 9053             (                    ROMbasic.ASM):03147           SUBA FPA0+3         * 
EE53 9760             (                    ROMbasic.ASM):03148           STA  FPA1+3         * 
EE55 965F             (                    ROMbasic.ASM):03149           LDA  FPA1+2         = THEN THE NEXT BYTE 
EE57 9252             (                    ROMbasic.ASM):03150           SBCA FPA0+2         = 
EE59 975F             (                    ROMbasic.ASM):03151           STA  FPA1+2         = 
EE5B 965E             (                    ROMbasic.ASM):03152           LDA  FPA1+1         * AND THE NEXT 
EE5D 9251             (                    ROMbasic.ASM):03153           SBCA FPA0+1         * 
EE5F 975E             (                    ROMbasic.ASM):03154           STA  FPA1+1         * 
EE61 965D             (                    ROMbasic.ASM):03155           LDA  FPA1           = AND FINALLY, THE MS BYTE OF MANTISSA 
EE63 9250             (                    ROMbasic.ASM):03156           SBCA FPA0           = 
EE65 975D             (                    ROMbasic.ASM):03157           STA  FPA1           = 
EE67 20D8             (                    ROMbasic.ASM):03158           BRA  LBBD0          GO SHIFT FPA1 
EE69 C640             (                    ROMbasic.ASM):03159 LBBF8     LDB  #$40           USE ONLY TWO BITS OF THE LAST BYTE (FIFTH) 
EE6B 20D0             (                    ROMbasic.ASM):03160           BRA  LBBCC          GO SHIFT THE LAST BYTE 
EE6D 56               (                    ROMbasic.ASM):03161 LBBFC     RORB * SHIFT CARRY (ALWAYS SET HERE) INTO  
EE6E 56               (                    ROMbasic.ASM):03162           RORB * BIT 5 AND MOVE  
EE6F 56               (                    ROMbasic.ASM):03163           RORB * BITS 1,0 TO BITS 7,6  
EE70 D763             (                    ROMbasic.ASM):03164           STB  FPSBYT         SAVE SUB BYTE 
EE72 8D08             (                    ROMbasic.ASM):03165           BSR  LBC0B          MOVE MANTISSA OF FPA2 TO FPA0 
EE74 7EEC8D           (                    ROMbasic.ASM):03166           JMP  LBA1C          NORMALIZE FPA0 
EE77 C614             (                    ROMbasic.ASM):03167 LBC06     LDB  #2*10          /0' ERROR 
EE79 7EDF2B           (                    ROMbasic.ASM):03168           JMP  LAC46          PROCESS THE ERROR 
                      (                    ROMbasic.ASM):03169 ; COPY MANTISSA FROM FPA2 TO FPA0                      
EE7C 9E13             (                    ROMbasic.ASM):03170 LBC0B     LDX  FPA2           * MOVE TOP 2 BYTES 
EE7E 9F50             (                    ROMbasic.ASM):03171           STX  FPA0           * 
EE80 9E15             (                    ROMbasic.ASM):03172           LDX  FPA2+2         = MOVE BOTTOM 2 BYTES 
EE82 9F52             (                    ROMbasic.ASM):03173           STX  FPA0+2         = 
EE84 39               (                    ROMbasic.ASM):03174           RTS                  
                      (                    ROMbasic.ASM):03175 ; COPY A PACKED FP NUMBER FROM (X) TO FPA0                      
EE85 3402             (                    ROMbasic.ASM):03176 LBC14     PSHS A              SAVE ACCA 
EE87 EC01             (                    ROMbasic.ASM):03177           LDD  1,X            GET TOP TWO MANTISSA BYTES 
EE89 9754             (                    ROMbasic.ASM):03178           STA  FP0SGN         SAVE MS BYTE OF MANTISSA AS MANTISSA SIGN 
EE8B 8A80             (                    ROMbasic.ASM):03179           ORA  #$80           UNPACK MS BYTE 
EE8D DD50             (                    ROMbasic.ASM):03180           STD  FPA0           SAVE UNPACKED TOP 2 MANTISSA BYTES 
EE8F 0F63             (                    ROMbasic.ASM):03181           CLR  FPSBYT         CLEAR MANTISSA SUB BYTE 
EE91 E684             (                    ROMbasic.ASM):03182           LDB  ,X             GET EXPONENT TO ACCB 
EE93 AE03             (                    ROMbasic.ASM):03183           LDX  3,X            * MOVE LAST 2 
EE95 9F52             (                    ROMbasic.ASM):03184           STX  FPA0+2         * MANTISSA BYTES 
EE97 D74F             (                    ROMbasic.ASM):03185           STB  FP0EXP         SAVE EXPONENT 
EE99 3582             (                    ROMbasic.ASM):03186           PULS A,PC           RESTORE ACCA AND RETURN 
                      (                    ROMbasic.ASM):03187                                
EE9B 8E0045           (                    ROMbasic.ASM):03188 LBC2A     LDX  #V45           POINT X TO MANTISSA OF FPA4 
EE9E 2006             (                    ROMbasic.ASM):03189           BRA  LBC35          MOVE FPA0 TO FPA4 
EEA0 8E0040           (                    ROMbasic.ASM):03190 LBC2F     LDX  #V40           POINT X TO MANTISSA OF FPA3 
EEA3 8C               (                    ROMbasic.ASM):03191           FCB  SKP2           SKIP TWO BYTES 
EEA4 9E3B             (                    ROMbasic.ASM):03192 LBC33     LDX  VARDES         POINT X TO VARIABLE DESCRIPTOR IN VARDES 
                      (                    ROMbasic.ASM):03193 ; PACK FPA0 AND MOVE IT TO ADDRESS IN X                      
EEA6 964F             (                    ROMbasic.ASM):03194 LBC35     LDA  FP0EXP         * COPY EXPONENT 
EEA8 A784             (                    ROMbasic.ASM):03195           STA  ,X             * 
EEAA 9654             (                    ROMbasic.ASM):03196           LDA  FP0SGN         GET MANTISSA SIGN BIT 
EEAC 8A7F             (                    ROMbasic.ASM):03197           ORA  #$7F           MASK THE BOTTOM 7 BITS 
EEAE 9450             (                    ROMbasic.ASM):03198           ANDA FPA0           AND BIT 7 OF MANTISSA SIGN INTO BIT 7 OF MS BYTE 
EEB0 A701             (                    ROMbasic.ASM):03199           STA  1,X            SAVE MS BYTE 
EEB2 9651             (                    ROMbasic.ASM):03200           LDA  FPA0+1         * MOVE 2ND MANTISSA BYTE 
EEB4 A702             (                    ROMbasic.ASM):03201           STA  2,X            * 
EEB6 DE52             (                    ROMbasic.ASM):03202           LDU  FPA0+2         = MOVE BOTTOM 2 MANTISSA BYTES 
EEB8 EF03             (                    ROMbasic.ASM):03203           STU  3,X            = 
EEBA 39               (                    ROMbasic.ASM):03204           RTS                  
                      (                    ROMbasic.ASM):03205 ; MOVE FPA1 TO FPA0 RETURN W/MANTISSA SIGN IN ACCA                      
EEBB 9661             (                    ROMbasic.ASM):03206 LBC4A     LDA  FP1SGN         * COPY MANTISSA SIGN FROM 
EEBD 9754             (                    ROMbasic.ASM):03207 LBC4C     STA  FP0SGN         * FPA1 TO FPA0 
EEBF 9E5C             (                    ROMbasic.ASM):03208           LDX  FP1EXP         = COPY EXPONENT + MS BYTE FROM 
EEC1 9F4F             (                    ROMbasic.ASM):03209           STX  FP0EXP         = FPA1 TO FPA0 
EEC3 0F63             (                    ROMbasic.ASM):03210           CLR  FPSBYT         CLEAR MANTISSA SUB BYTE 
EEC5 965E             (                    ROMbasic.ASM):03211           LDA  FPA1+1         * COPY 2ND MANTISSA BYTE 
EEC7 9751             (                    ROMbasic.ASM):03212           STA  FPA0+1         * FROM FPA1 TO FPA0 
EEC9 9654             (                    ROMbasic.ASM):03213           LDA  FP0SGN         GET MANTISSA SIGN 
EECB 9E5F             (                    ROMbasic.ASM):03214           LDX  FPA1+2         * COPY 3RD AND 4TH MANTISSA BYTE 
EECD 9F52             (                    ROMbasic.ASM):03215           STX  FPA0+2         * FROM FPA1 TO FPA0 
EECF 39               (                    ROMbasic.ASM):03216           RTS                  
                      (                    ROMbasic.ASM):03217 ; TRANSFER FPA0 TO FPA1                      
EED0 DC4F             (                    ROMbasic.ASM):03218 LBC5F     LDD  FP0EXP         * TRANSFER EXPONENT & MS BYTE 
EED2 DD5C             (                    ROMbasic.ASM):03219           STD  FP1EXP         * 
EED4 9E51             (                    ROMbasic.ASM):03220           LDX  FPA0+1         = TRANSFER MIDDLE TWO BYTES 
EED6 9F5E             (                    ROMbasic.ASM):03221           STX  FPA1+1         = 
EED8 9E53             (                    ROMbasic.ASM):03222           LDX  FPA0+3         * TRANSFER BOTTOM TWO BYTES 
EEDA 9F60             (                    ROMbasic.ASM):03223           STX  FPA1+3         * 
EEDC 4D               (                    ROMbasic.ASM):03224           TSTA                SET FLAGS ACCORDING TO EXPONENT 
EEDD 39               (                    ROMbasic.ASM):03225           RTS                  
                      (                    ROMbasic.ASM):03226 ; CHECK FPA0; RETURN ACCB = 0 IF FPA0 = 0,                      
                      (                    ROMbasic.ASM):03227 ; ACCB = $FF IF FPA0 = NEGATIVE, ACCB = 1 IF FPA0 = POSITIVE                      
EEDE D64F             (                    ROMbasic.ASM):03228 LBC6D     LDB  FP0EXP         GET EXPONENT 
EEE0 2708             (                    ROMbasic.ASM):03229           BEQ  LBC79          BRANCH IF FPA0 = 0 
EEE2 D654             (                    ROMbasic.ASM):03230 LBC71     LDB  FP0SGN         GET SIGN OF MANTISSA 
EEE4 59               (                    ROMbasic.ASM):03231 LBC73     ROLB                BIT 7 TO CARRY 
EEE5 C6FF             (                    ROMbasic.ASM):03232           LDB  #$FF           NEGATIVE FLAG 
EEE7 2501             (                    ROMbasic.ASM):03233           BCS  LBC79          BRANCH IF NEGATIVE MANTISSA 
EEE9 50               (                    ROMbasic.ASM):03234           NEGB                ACCB = 1 IF POSITIVE MANTISSA 
EEEA 39               (                    ROMbasic.ASM):03235 LBC79     RTS                  
                      (                    ROMbasic.ASM):03236                                
                      (                    ROMbasic.ASM):03237 ; SGN                          
EEEB 8DF1             (                    ROMbasic.ASM):03238 SGN       BSR  LBC6D          SET ACCB ACCORDING TO SIGN OF FPA0 
                      (                    ROMbasic.ASM):03239 ; CONVERT A SIGNED NUMBER IN ACCB INTO A FLOATING POINT NUMBER                      
EEED D750             (                    ROMbasic.ASM):03240 LBC7C     STB  FPA0           SAVE ACCB IN FPA0 
EEEF 0F51             (                    ROMbasic.ASM):03241           CLR  FPA0+1         CLEAR NUMBER 2 MANTISSA BYTE OF FPA0 
EEF1 C688             (                    ROMbasic.ASM):03242           LDB  #$88           EXPONENT REQUIRED IF FPA0 IS TO BE AN INTEGER 
EEF3 9650             (                    ROMbasic.ASM):03243 LBC82     LDA  FPA0           GET MS BYTE OF MANTISSA 
EEF5 8080             (                    ROMbasic.ASM):03244           SUBA #$80           SET CARRY IF POSITIVE MANTISSA 
EEF7 D74F             (                    ROMbasic.ASM):03245 LBC86     STB  FP0EXP         SAVE EXPONENT 
EEF9 DC74             (                    ROMbasic.ASM):03246           LDD  ZERO           * ZERO OUT ACCD AND 
EEFB DD52             (                    ROMbasic.ASM):03247           STD  FPA0+2         * BOTTOM HALF OF FPA0 
EEFD 9763             (                    ROMbasic.ASM):03248           STA  FPSBYT         CLEAR SUB BYTE 
EEFF 9754             (                    ROMbasic.ASM):03249           STA  FP0SGN         CLEAR SIGN OF FPA0 MANTISSA 
EF01 7EEC89           (                    ROMbasic.ASM):03250           JMP  LBA18          GO NORMALIZE FPA0 
                      (                    ROMbasic.ASM):03251                                
                      (                    ROMbasic.ASM):03252 ; ABS                          
EF04 0F54             (                    ROMbasic.ASM):03253 ABS       CLR  FP0SGN         FORCE MANTISSA SIGN OF FPA0 POSITIVE 
EF06 39               (                    ROMbasic.ASM):03254           RTS                  
                      (                    ROMbasic.ASM):03255 ; COMPARE A PACKED FLOATING POINT NUMBER POINTED TO                      
                      (                    ROMbasic.ASM):03256 ; BY (X) TO AN UNPACKED FP NUMBER IN FPA0. RETURN                      
                      (                    ROMbasic.ASM):03257 ; ZERO FLAG SET AND ACCB = 0, IF EQUAL; ACCB = 1 IF                      
                      (                    ROMbasic.ASM):03258 ; FPA0 > (X); ACCB = $FF IF FPA0 < (X)                      
EF07 E684             (                    ROMbasic.ASM):03259 LBC96     LDB  ,X             CHECK EXPONENT OF (X) 
EF09 27D3             (                    ROMbasic.ASM):03260           BEQ  LBC6D          BRANCH IF FPA = 0 
EF0B E601             (                    ROMbasic.ASM):03261           LDB  1,X            GET MS BYTE OF MANTISSA OF (X) 
EF0D D854             (                    ROMbasic.ASM):03262           EORB FP0SGN         EOR WITH SIGN OF FPA0 
EF0F 2BD1             (                    ROMbasic.ASM):03263           BMI  LBC71          BRANCH IF SIGNS NOT = 
                      (                    ROMbasic.ASM):03264 ; COMPARE FPA0 WITH FP NUMBER POINTED TO BY (X).                      
                      (                    ROMbasic.ASM):03265 ; FPA0 IS NORMALIZED, (X) IS PACKED.                      
EF11 D64F             (                    ROMbasic.ASM):03266 LBCA0     LDB  FP0EXP         * GET EXPONENT OF 
EF13 E184             (                    ROMbasic.ASM):03267           CMPB ,X             * FPA0, COMPARE TO EXPONENT OF 
EF15 261D             (                    ROMbasic.ASM):03268           BNE  LBCC3          * (X) AND BRANCH IF <>. 
EF17 E601             (                    ROMbasic.ASM):03269           LDB  1,X            * GET MS BYTE OF (X), KEEP ONLY 
EF19 CA7F             (                    ROMbasic.ASM):03270           ORB  #$7F           * THE SIGN BIT - 'AND' THE BOTTOM 7 
EF1B D450             (                    ROMbasic.ASM):03271           ANDB FPA0           * BITS OF FPA0 INTO ACCB 
EF1D E101             (                    ROMbasic.ASM):03272           CMPB 1,X            = COMPARE THE BOTTOM 7 BITS OF THE MANTISSA 
EF1F 2613             (                    ROMbasic.ASM):03273           BNE  LBCC3          = MS BYTE AND BRANCH IF <> 
EF21 D651             (                    ROMbasic.ASM):03274           LDB  FPA0+1         * COMPARE 2ND BYTE 
EF23 E102             (                    ROMbasic.ASM):03275           CMPB 2,X            * OF MANTISSA, 
EF25 260D             (                    ROMbasic.ASM):03276           BNE  LBCC3          * BRANCH IF <> 
EF27 D652             (                    ROMbasic.ASM):03277           LDB  FPA0+2         = COMPARE 3RD BYTE 
EF29 E103             (                    ROMbasic.ASM):03278           CMPB 3,X            = OF MANTISSA, 
EF2B 2607             (                    ROMbasic.ASM):03279           BNE  LBCC3          = BRANCH IF <> 
EF2D D653             (                    ROMbasic.ASM):03280           LDB  FPA0+3         * SUBTRACT LS BYTE 
EF2F E004             (                    ROMbasic.ASM):03281           SUBB 4,X            * OF (X) FROM LS BYTE OF 
EF31 2601             (                    ROMbasic.ASM):03282           BNE  LBCC3          * FPA0, BRANCH IF <> 
EF33 39               (                    ROMbasic.ASM):03283           RTS                 RETURN IF FP (X) = FPA0 
EF34 56               (                    ROMbasic.ASM):03284 LBCC3     RORB                SHIFT CARRY TO BIT 7; CARRY SET IF FPA0 < (X) 
EF35 D854             (                    ROMbasic.ASM):03285           EORB FP0SGN         TOGGLE SIZE COMPARISON BIT IF FPA0 IS NEGATIVE 
EF37 20AB             (                    ROMbasic.ASM):03286           BRA  LBC73          GO SET ACCB ACCORDING TO COMPARISON 
                      (                    ROMbasic.ASM):03287 ; DE-NORMALIZE FPA0 : SHIFT THE MANTISSA UNTIL THE BINARY POINT IS TO THE RIGHT                      
                      (                    ROMbasic.ASM):03288 ; OF THE LEAST SIGNIFICANT BYTE OF THE MANTISSA                      
EF39 D64F             (                    ROMbasic.ASM):03289 LBCC8     LDB  FP0EXP         GET EXPONENT OF FPA0 
EF3B 273D             (                    ROMbasic.ASM):03290           BEQ  LBD09          ZERO MANTISSA IF FPA0 = 0 
EF3D C0A0             (                    ROMbasic.ASM):03291           SUBB #$A0           SUBTRACT $A0 FROM FPA0 EXPONENT T THIS WILL YIELD 
                      (                    ROMbasic.ASM):03292 ;                             THE NUMBER OF SHIFTS REQUIRED TO DENORMALIZE FPA0. WHEN 
                      (                    ROMbasic.ASM):03293 ;                             THE EXPONENT OF FPA0 IS = ZERO, THEN THE BINARY POINT 
                      (                    ROMbasic.ASM):03294 ;                             WILL BE TO THE RIGHT OF THE MANTISSA 
EF3F 9654             (                    ROMbasic.ASM):03295           LDA  FP0SGN         TEST SIGN OF FPA0 MANTISSA 
EF41 2A05             (                    ROMbasic.ASM):03296           BPL  LBCD7          BRANCH IF POSITIVE 
EF43 035B             (                    ROMbasic.ASM):03297           COM  FPCARY         COMPLEMENT CARRY IN BYTE 
EF45 BDECEC           (                    ROMbasic.ASM):03298           JSR  LBA7B          NEGATE MANTISSA OF FPA0 
EF48 8E004F           (                    ROMbasic.ASM):03299 LBCD7     LDX  #FP0EXP        POINT X TO FPA0 
EF4B C1F8             (                    ROMbasic.ASM):03300           CMPB #-8            EXPONENT DIFFERENCE < -8? 
EF4D 2E06             (                    ROMbasic.ASM):03301           BGT  LBCE4          YES 
EF4F BDED1F           (                    ROMbasic.ASM):03302           JSR  LBAAE          SHIFT FPA0 RIGHT UNTIL FPA0 EXPONENT = $A0 
EF52 0F5B             (                    ROMbasic.ASM):03303           CLR  FPCARY         CLEAR CARRY IN BYTE 
EF54 39               (                    ROMbasic.ASM):03304           RTS                  
EF55 0F5B             (                    ROMbasic.ASM):03305 LBCE4     CLR  FPCARY         CLEAR CARRY IN BYTE 
EF57 9654             (                    ROMbasic.ASM):03306           LDA  FP0SGN         * GET SIGN OF FPA0 MANTISSA 
EF59 49               (                    ROMbasic.ASM):03307           ROLA                * ROTATE IT INTO THE CARRY FLAG 
EF5A 0650             (                    ROMbasic.ASM):03308           ROR  FPA0           ROTATE CARRY (MANTISSA SIGN) INTO BIT 7 
                      (                    ROMbasic.ASM):03309 ;                             OF LS BYTE OF MANTISSA 
EF5C 7EED2B           (                    ROMbasic.ASM):03310           JMP  LBABA          DE-NORMALIZE FPA0 
                      (                    ROMbasic.ASM):03311                                
                      (                    ROMbasic.ASM):03312 ; INT                          
                      (                    ROMbasic.ASM):03313 ; THE INT STATEMENT WILL "DENORMALIZE" FPA0 - THAT IS IT WILL SHIFT THE BINARY POINT                      
                      (                    ROMbasic.ASM):03314 ; TO THE EXTREME RIGHT OF THE MANTISSA TO FORCE ITS EXPONENT TO BE $AO. ONCE                      
                      (                    ROMbasic.ASM):03315 ; THIS IS DONE THE MANTISSA OF FPA0 WILL CONTAIN THE FOUR LEAST SIGNIFICANT                      
                      (                    ROMbasic.ASM):03316 ; BYTES OF THE INTEGER PORTION OF FPA0. AT THE CONCLUSION OF THE DE-NORMALIZATION                      
                      (                    ROMbasic.ASM):03317 ; ONLY THE INTEGER PORTION OF FPA0 WILL REMAIN.                      
                      (                    ROMbasic.ASM):03318 ;                              
EF5F D64F             (                    ROMbasic.ASM):03319 INT       LDB  FP0EXP         GET EXPONENT OF FPA0 
EF61 C1A0             (                    ROMbasic.ASM):03320           CMPB #$A0           LARGEST POSSIBLE INTEGER EXPONENT 
EF63 241D             (                    ROMbasic.ASM):03321           BCC  LBD11          RETURN IF FPA0 >= 32768 
EF65 8DD2             (                    ROMbasic.ASM):03322           BSR  LBCC8          SHIFT THE BINARY POINT ONE TO THE RIGHT OF THE 
                      (                    ROMbasic.ASM):03323 ;                             LS BYTE OF THE FPA0 MANTISSA 
EF67 D763             (                    ROMbasic.ASM):03324           STB  FPSBYT         ACCB = 0: ZERO OUT THE SUB BYTE 
EF69 9654             (                    ROMbasic.ASM):03325           LDA  FP0SGN         GET MANTISSA SIGN 
EF6B D754             (                    ROMbasic.ASM):03326           STB  FP0SGN         FORCE MANTISSA SIGN TO BE POSITIVE 
EF6D 8080             (                    ROMbasic.ASM):03327           SUBA #$80           SET CARRY IF MANTISSA 
EF6F 86A0             (                    ROMbasic.ASM):03328           LDA  #$A0           * GET DENORMALIZED EXPONENT AND 
EF71 974F             (                    ROMbasic.ASM):03329           STA  FP0EXP         * SAVE IT IN FPA0 EXPONENT 
EF73 9653             (                    ROMbasic.ASM):03330           LDA  FPA0+3         = GET LS BYTE OF FPA0 AND 
EF75 9701             (                    ROMbasic.ASM):03331           STA  CHARAC         = SAVE IT IN CHARAC 
EF77 7EEC89           (                    ROMbasic.ASM):03332           JMP  LBA18          NORMALIZE FPA0 
                      (                    ROMbasic.ASM):03333                                
EF7A D750             (                    ROMbasic.ASM):03334 LBD09     STB  FPA0           * LOAD MANTISSA OF FPA0 WITH CONTENTS OF ACCB 
EF7C D751             (                    ROMbasic.ASM):03335           STB  FPA0+1         * 
EF7E D752             (                    ROMbasic.ASM):03336           STB  FPA0+2         * 
EF80 D753             (                    ROMbasic.ASM):03337           STB  FPA0+3         * 
EF82 39               (                    ROMbasic.ASM):03338 LBD11     RTS                 * 
                      (                    ROMbasic.ASM):03339                                
                      (                    ROMbasic.ASM):03340 ; CONVERT ASCII STRING TO FLOATING POINT                      
EF83 9E74             (                    ROMbasic.ASM):03341 LBD12     LDX  ZERO           (X) = 0 
EF85 9F54             (                    ROMbasic.ASM):03342           STX  FP0SGN         * ZERO OUT FPA0 & THE SIGN FLAG (COEFCT) 
EF87 9F4F             (                    ROMbasic.ASM):03343           STX  FP0EXP         * 
EF89 9F51             (                    ROMbasic.ASM):03344           STX  FPA0+1         * 
EF8B 9F52             (                    ROMbasic.ASM):03345           STX  FPA0+2         * 
EF8D 9F47             (                    ROMbasic.ASM):03346           STX  V47            INITIALIZE EXPONENT & EXPONENT SIGN FLAG TO ZERO 
EF8F 9F45             (                    ROMbasic.ASM):03347           STX  V45            INITIALIZE RIGHT DECIMAL CTR & DECIMAL PT FLAG TO 0 
EF91 2564             (                    ROMbasic.ASM):03348           BCS  LBD86          IF CARRY SET (NUMERIC CHARACTER), ASSUME ACCA CONTAINS FIRST 
                      (                    ROMbasic.ASM):03349 ;         NUMERIC CHAR, SIGN IS POSITIVE AND SKIP THE RAM HOOK  
EF93 BDF6C0           (                    ROMbasic.ASM):03350           JSR  XVEC19         CALL EXTENDED BASIC ADD-IN 
EF96 812D             (                    ROMbasic.ASM):03351 LBD25     CMPA #'-            * CHECK FOR A LEADING MINUS SIGN AND BRANCH 
EF98 2604             (                    ROMbasic.ASM):03352           BNE  LBD2D          * IF NO MINUS SIGN 
EF9A 0355             (                    ROMbasic.ASM):03353           COM  COEFCT         TOGGLE SIGN; 0 = +; FF = - 
EF9C 2004             (                    ROMbasic.ASM):03354           BRA  LBD31          INTERPRET THE REST OF THE STRING 
EF9E 812B             (                    ROMbasic.ASM):03355 LBD2D     CMPA #'+            * CHECK FOR LEADING PLUS SlGN AND BRANCH 
EFA0 2604             (                    ROMbasic.ASM):03356           BNE  LBD35          * IF NOT A PLUS SIGN 
EFA2 9D7C             (                    ROMbasic.ASM):03357 LBD31     JSR  GETNCH         GET NEXT INPUT CHARACTER FROM BASIC 
EFA4 2551             (                    ROMbasic.ASM):03358           BCS  LBD86          BRANCH IF NUMERIC CHARACTER 
EFA6 812E             (                    ROMbasic.ASM):03359 LBD35     CMPA #'.            DECIMAL POlNT? 
EFA8 2728             (                    ROMbasic.ASM):03360           BEQ  LBD61          YES 
EFAA 8145             (                    ROMbasic.ASM):03361           CMPA #'E            "E" SHORTHAND FORM (SCIENTIFIC NOTATION)? 
EFAC 2628             (                    ROMbasic.ASM):03362           BNE  LBD65          NO 
                      (                    ROMbasic.ASM):03363 ; EVALUATE EXPONENT OF EXPONENTIAL FORMAT                      
EFAE 9D7C             (                    ROMbasic.ASM):03364           JSR  GETNCH         GET NEXT INPUT CHARACTER FROM BASIC 
EFB0 2564             (                    ROMbasic.ASM):03365           BCS  LBDA5          BRANCH IF NUMERIC 
EFB2 81A7             (                    ROMbasic.ASM):03366           CMPA #TOK_MINUS     MINUS TOKEN? 
EFB4 270E             (                    ROMbasic.ASM):03367           BEQ  LBD53          YES 
EFB6 812D             (                    ROMbasic.ASM):03368           CMPA #'-            ASCII MINUS? 
EFB8 270A             (                    ROMbasic.ASM):03369           BEQ  LBD53          YES 
EFBA 81A6             (                    ROMbasic.ASM):03370           CMPA #TOK_PLUS      PLUS TOKEN? 
EFBC 2708             (                    ROMbasic.ASM):03371           BEQ  LBD55          YES 
EFBE 812B             (                    ROMbasic.ASM):03372           CMPA #'+            ASCII PLUS? 
EFC0 2704             (                    ROMbasic.ASM):03373           BEQ  LBD55          YES 
EFC2 2006             (                    ROMbasic.ASM):03374           BRA  LBD59          BRANCH IF NO SIGN FOUND 
EFC4 0348             (                    ROMbasic.ASM):03375 LBD53     COM  V48            SET EXPONENT SIGN FLAG TO NEGATIVE 
                      (                    ROMbasic.ASM):03376 ; STRIP A DECIMAL NUMBER FROM BASIC LINE, CONVERT IT TO BINARY IN V47                      
EFC6 9D7C             (                    ROMbasic.ASM):03377 LBD55     JSR  GETNCH         GET NEXT INPUT CHARACTER FROM BASIC 
EFC8 254C             (                    ROMbasic.ASM):03378           BCS  LBDA5          IF NUMERIC CHARACTER, CONVERT TO BINARY 
EFCA 0D48             (                    ROMbasic.ASM):03379 LBD59     TST  V48            * CHECK EXPONENT SIGN FLAG 
EFCC 2708             (                    ROMbasic.ASM):03380           BEQ  LBD65          * AND BRANCH IF POSITIVE 
EFCE 0047             (                    ROMbasic.ASM):03381           NEG  V47            NEGATE VALUE OF EXPONENT 
EFD0 2004             (                    ROMbasic.ASM):03382           BRA  LBD65           
EFD2 0346             (                    ROMbasic.ASM):03383 LBD61     COM  V46            *TOGGLE DECIMAL PT FLAG AND INTERPRET ANOTHER 
EFD4 26CC             (                    ROMbasic.ASM):03384           BNE  LBD31          *CHARACTER IF <> 0 - TERMINATE INTERPRETATION 
                      (                    ROMbasic.ASM):03385 ;         IF   SECOND DECIMAL POINT  
                      (                    ROMbasic.ASM):03386 ; ADJUST FPA0 FOR THE DECIMAL EXPONENT IN V47                      
EFD6 9647             (                    ROMbasic.ASM):03387 LBD65     LDA  V47            * GET EXPONENT, SUBTRACT THE NUMBER OF 
EFD8 9045             (                    ROMbasic.ASM):03388           SUBA V45            * PLACES TO THE RIGHT OF DECIMAL POINT 
EFDA 9747             (                    ROMbasic.ASM):03389           STA  V47            * AND RESAVE IT. 
EFDC 2712             (                    ROMbasic.ASM):03390           BEQ  LBD7F          EXIT ROUTINE IF ADJUSTED EXPONENT = ZERO 
EFDE 2A09             (                    ROMbasic.ASM):03391           BPL  LBD78          BRANCH IF POSITIVE EXPONENT 
EFE0 BDEDF3           (                    ROMbasic.ASM):03392 LBD6F     JSR  LBB82          DIVIDE FPA0 BY 10 
EFE3 0C47             (                    ROMbasic.ASM):03393           INC  V47            INCREMENT EXPONENT COUNTER (MULTIPLY BY 10) 
EFE5 26F9             (                    ROMbasic.ASM):03394           BNE  LBD6F          KEEP MULTIPLYING 
EFE7 2007             (                    ROMbasic.ASM):03395           BRA  LBD7F          EXIT ROUTINE 
EFE9 BDEDDB           (                    ROMbasic.ASM):03396 LBD78     JSR  LBB6A          MULTIPLY FPA0 BY 10 
EFEC 0A47             (                    ROMbasic.ASM):03397           DEC  V47            DECREMENT EXPONENT COUNTER (DIVIDE BY 10) 
EFEE 26F9             (                    ROMbasic.ASM):03398           BNE  LBD78          KEEP MULTIPLYING 
EFF0 9655             (                    ROMbasic.ASM):03399 LBD7F     LDA  COEFCT         GET THE SIGN FLAG 
EFF2 2A8E             (                    ROMbasic.ASM):03400           BPL  LBD11          RETURN IF POSITIVE 
EFF4 7EF15A           (                    ROMbasic.ASM):03401           JMP  LBEE9          TOGGLE MANTISSA SIGN OF FPA0, IF NEGATIVE 
                      (                    ROMbasic.ASM):03402 ;MULTIPLY FPA0 BY TEN AND ADD ACCA TO THE RESULT                      
EFF7 D645             (                    ROMbasic.ASM):03403 LBD86     LDB  V45            *GET THE RIGHT DECIMAL COUNTER AND SUBTRACT 
EFF9 D046             (                    ROMbasic.ASM):03404           SUBB V46            *THE DECIMAL POINT FLAG FROM IT. IF DECIMAL POINT 
EFFB D745             (                    ROMbasic.ASM):03405           STB  V45            *FLAG=0, NOTHING HAPPENS. IF DECIMAL POINT FLAG IS 
                      (                    ROMbasic.ASM):03406 ;                             -1, THEN RIGHT DECIMAL COUNTER IS INCREMENTED BY ONE 
EFFD 3402             (                    ROMbasic.ASM):03407           PSHS A              SAVE NEW DIGIT ON STACK 
EFFF BDEDDB           (                    ROMbasic.ASM):03408           JSR  LBB6A          MULTIPLY FPA0 BY 10 
F002 3504             (                    ROMbasic.ASM):03409           PULS B              GET NEW DIGIT BACK 
F004 C030             (                    ROMbasic.ASM):03410           SUBB #'0            MASK OFF ASCII 
F006 8D02             (                    ROMbasic.ASM):03411           BSR  LBD99          ADD ACCB TO FPA0 
F008 2098             (                    ROMbasic.ASM):03412           BRA  LBD31          GET ANOTHER CHARACTER FROM BASIC 
F00A BDEEA0           (                    ROMbasic.ASM):03413 LBD99     JSR  LBC2F          PACK FPA0 AND SAVE IT IN FPA3 
F00D BDEEED           (                    ROMbasic.ASM):03414           JSR  LBC7C          CONVERT ACCB TO FP NUMBER IN FPA0 
F010 8E0040           (                    ROMbasic.ASM):03415           LDX  #V40           * ADD FPA0 TO 
F013 7EEC33           (                    ROMbasic.ASM):03416           JMP  LB9C2          * FPA3 
                      (                    ROMbasic.ASM):03417                                
                      (                    ROMbasic.ASM):03418                                
F016 D647             (                    ROMbasic.ASM):03419 LBDA5     LDB  V47             
F018 58               (                    ROMbasic.ASM):03420           ASLB                TIMES 2 
F019 58               (                    ROMbasic.ASM):03421           ASLB                TIMES 4 
F01A DB47             (                    ROMbasic.ASM):03422           ADDB V47            ADD 1 = TIMES 5 
F01C 58               (                    ROMbasic.ASM):03423           ASLB                TIMES 10 
F01D 8030             (                    ROMbasic.ASM):03424           SUBA #'0            *MASK OFF ASCII FROM ACCA, PUSH 
F01F 3404             (                    ROMbasic.ASM):03425           PSHS B              *RESULT ONTO THE STACK AND 
F021 ABE0             (                    ROMbasic.ASM):03426           ADDA ,S+            ADD lT TO ACCB 
F023 9747             (                    ROMbasic.ASM):03427           STA  V47            SAVE IN V47 
F025 209F             (                    ROMbasic.ASM):03428           BRA  LBD55          INTERPRET ANOTHER CHARACTER 
                      (                    ROMbasic.ASM):03429 ;                              
F027 9B3EBC1FFD       (                    ROMbasic.ASM):03430 LBDB6     FCB  $9B,$3E,$BC,$1F,$FD * 99999999.9 
F02C 9E6E6B27FD       (                    ROMbasic.ASM):03431 LBDBB     FCB  $9E,$6E,$6B,$27,$FD * 999999999 
F031 9E6E6B2800       (                    ROMbasic.ASM):03432 LBDC0     FCB  $9E,$6E,$6B,$28,$00 * 1E + 09 
                      (                    ROMbasic.ASM):03433 ;                              
F036 8EDECC           (                    ROMbasic.ASM):03434 LBDC5     LDX  #LABE8-1       POINT X TO " IN " MESSAGE 
F039 8D0C             (                    ROMbasic.ASM):03435           BSR  LBDD6          COPY A STRING FROM (X) TO CONSOLE OUT 
F03B DC68             (                    ROMbasic.ASM):03436           LDD  CURLIN         GET CURRENT BASIC LINE NUMBER TO ACCD 
                      (                    ROMbasic.ASM):03437 ; CONVERT VALUE IN ACCD INTO A DECIMAL NUMBER                      
                      (                    ROMbasic.ASM):03438 ; AND PRINT IT TO CONSOLE OUT                      
F03D DD50             (                    ROMbasic.ASM):03439 LBDCC     STD  FPA0           SAVE ACCD IN TOP HALF OF FPA0 
F03F C690             (                    ROMbasic.ASM):03440           LDB  #$90           REQ’D EXPONENT IF TOP HALF OF ACCD = INTEGER 
F041 43               (                    ROMbasic.ASM):03441           COMA                SET CARRY FLAG - FORCE POSITIVE MANTISSA 
F042 BDEEF7           (                    ROMbasic.ASM):03442           JSR  LBC86          ZERO BOTTOM HALF AND SIGN OF FPA0, THEN 
                      (                    ROMbasic.ASM):03443 ;         SAVE EXPONENT AND NORMALIZE IT  
F045 8D03             (                    ROMbasic.ASM):03444           BSR  LBDD9          CONVERT FP NUMBER TO ASCII STRING 
F047 7EEC0D           (                    ROMbasic.ASM):03445 LBDD6     JMP  LB99C          COPY A STRING FROM (X) TO CONSOLE OUT 
                      (                    ROMbasic.ASM):03446                                
                      (                    ROMbasic.ASM):03447 ; CONVERT FP NUMBER TO ASCII STRING                      
F04A CE01F1           (                    ROMbasic.ASM):03448 LBDD9     LDU  #STRBUF+3      POINT U TO BUFFER WHICH WILL NOT CAUSE 
                      (                    ROMbasic.ASM):03449 ;                             THE STRING TO BE STORED IN STRING SPACE 
F04D 8620             (                    ROMbasic.ASM):03450 LBDDC     LDA  #SPACE         SPACE = DEFAULT SIGN FOR POSITIVE # 
F04F D654             (                    ROMbasic.ASM):03451           LDB  FP0SGN         GET SIGN OF FPA0 
F051 2A02             (                    ROMbasic.ASM):03452           BPL  LBDE4          BRANCH IF POSITIVE 
F053 862D             (                    ROMbasic.ASM):03453           LDA  #'-            ASCII MINUS SIGN 
F055 A7C0             (                    ROMbasic.ASM):03454 LBDE4     STA  ,U+            STORE SIGN OF NUMBER 
F057 DF64             (                    ROMbasic.ASM):03455           STU  COEFPT         SAVE BUFFER POINTER 
F059 9754             (                    ROMbasic.ASM):03456           STA  FP0SGN         SAVE SIGN (IN ASCII) 
F05B 8630             (                    ROMbasic.ASM):03457           LDA  #'0            ASCII ZERO IF EXPONENT = 0 
F05D D64F             (                    ROMbasic.ASM):03458           LDB  FP0EXP         GET FPA0 EXPONENT 
F05F 102700C6         (                    ROMbasic.ASM):03459           LBEQ LBEB8          BRANCH IF FPA0 = 0 
F063 4F               (                    ROMbasic.ASM):03460           CLRA                BASE 10 EXPONENT=0 FOR FP NUMBER > 1 
F064 C180             (                    ROMbasic.ASM):03461           CMPB #$80           CHECK EXPONENT 
F066 2208             (                    ROMbasic.ASM):03462           BHI  LBDFF          BRANCH IF FP NUMBER > 1 
                      (                    ROMbasic.ASM):03463 ; IF FPA0 < 1.0, MULTIPLY IT BY 1E+09 TO SPEED UP THE CONVERSION PROCESS                      
F068 8EF031           (                    ROMbasic.ASM):03464           LDX  #LBDC0         POINT X TO FP 1E+09 
F06B BDED3B           (                    ROMbasic.ASM):03465           JSR  LBACA          MULTIPLY FPA0 BY (X) 
F06E 86F7             (                    ROMbasic.ASM):03466           LDA  #-9            BASE 10 EXPONENT = -9 
F070 9745             (                    ROMbasic.ASM):03467 LBDFF     STA  V45            BASE 10 EXPONENT 
                      (                    ROMbasic.ASM):03468 ; PSEUDO - NORMALIZE THE FP NUMBER TO A VALUE IN THE RANGE                      
                      (                    ROMbasic.ASM):03469 ; OF 999,999,999 RO 99,999,999.9 - THIS IS THE LARGEST                      
                      (                    ROMbasic.ASM):03470 ; NUMBER RANGE IN WHICH ALL OF THE DIGITS ARE                      
                      (                    ROMbasic.ASM):03471 ; SIGNIFICANT WHICH CAN BE DISPLAYED WITHOUT USING                      
                      (                    ROMbasic.ASM):03472 ; SCIENTIFIC NOTATION                      
F072 8EF02C           (                    ROMbasic.ASM):03473 LBE01     LDX  #LBDBB         POINT X TO FP 999,999,999 
F075 BDEF11           (                    ROMbasic.ASM):03474           JSR  LBCA0          COMPARE FPA0 TO 999,999,999 
F078 2E0F             (                    ROMbasic.ASM):03475           BGT  LBE18          BRANCH IF > 999,999,999 
F07A 8EF027           (                    ROMbasic.ASM):03476 LBE09     LDX  #LBDB6         POINT X TO FP 99,999,999.9 
F07D BDEF11           (                    ROMbasic.ASM):03477           JSR  LBCA0          COMPARE FPA0 TO 99,999,999.9 
F080 2E0E             (                    ROMbasic.ASM):03478           BGT  LBE1F          BRANCH IF > 99,999,999.9 (IN RANGE) 
F082 BDEDDB           (                    ROMbasic.ASM):03479           JSR  LBB6A          MULTIPLY FPA0 BY 10 
F085 0A45             (                    ROMbasic.ASM):03480           DEC  V45            SUBTRACT ONE FROM DECIMAL OFFSET 
F087 20F1             (                    ROMbasic.ASM):03481           BRA  LBE09          PSEUDO - NORMALIZE SOME MORE 
F089 BDEDF3           (                    ROMbasic.ASM):03482 LBE18     JSR  LBB82          DIVIDE FPA0 BY 10 
F08C 0C45             (                    ROMbasic.ASM):03483           INC  V45            ADD ONE TO BASE 10 EXPONENT 
F08E 20E2             (                    ROMbasic.ASM):03484           BRA  LBE01          PSEUDO - NORMALIZE SOME MORE 
F090 BDEC25           (                    ROMbasic.ASM):03485 LBE1F     JSR  LB9B4          ADD .5 TO FPA0 (ROUND OFF) 
F093 BDEF39           (                    ROMbasic.ASM):03486           JSR  LBCC8          CONVERT FPA0 TO AN INTEGER 
F096 C601             (                    ROMbasic.ASM):03487           LDB  #1             DEFAULT DECIMAL POINT FLAG (FORCE IMMED DECIMAL PT) 
F098 9645             (                    ROMbasic.ASM):03488           LDA  V45            * GET BASE 10 EXPONENT AND ADD TEN TO IT 
F09A 8B0A             (                    ROMbasic.ASM):03489           ADDA #9+1           * (NUMBER ‘NORMALIZED’ TO 9 PLACES & DECIMAL PT) 
F09C 2B09             (                    ROMbasic.ASM):03490           BMI  LBE36          BRANCH IF NUMBER < 1.0 
F09E 810B             (                    ROMbasic.ASM):03491           CMPA #9+2           NINE PLACES MAY BE DISPLAYED WITHOUT 
                      (                    ROMbasic.ASM):03492 ;         USING SCIENTIFIC NOTATION  
F0A0 2405             (                    ROMbasic.ASM):03493           BCC  LBE36          BRANCH IF SCIENTIFIC NOTATION REQUIRED 
F0A2 4A               (                    ROMbasic.ASM):03494           DECA                * SUBTRACT 1 FROM MODIFIED BASE 10 EXPONENT CTR 
F0A3 1F89             (                    ROMbasic.ASM):03495           TFR  A,B            * AND SAVE IT IN ACCB (DECiMAL POINT FLAG) 
F0A5 8602             (                    ROMbasic.ASM):03496           LDA  #2             FORCE EXPONENT = 0 - DON'T USE SCIENTIFIC NOTATION 
F0A7 4A               (                    ROMbasic.ASM):03497 LBE36     DECA                * SUBTRACT TWO (WITHOUT AFFECTING CARRY) 
F0A8 4A               (                    ROMbasic.ASM):03498           DECA                * FROM BASE 10 EXPONENT 
F0A9 9747             (                    ROMbasic.ASM):03499           STA  V47            SAVE EXPONENT - ZERO EXPONENT = DO NOT DISPLAY 
                      (                    ROMbasic.ASM):03500 ;         IN   SCIENTIFIC NOTATION  
F0AB D745             (                    ROMbasic.ASM):03501           STB  V45            DECIMAL POINT FLAG - NUMBER OF PLACES TO 
                      (                    ROMbasic.ASM):03502 ;         LEFT OF DECIMAL POINT  
F0AD 2E0D             (                    ROMbasic.ASM):03503           BGT  LBE4B          BRANCH IF >= 1 
F0AF DE64             (                    ROMbasic.ASM):03504           LDU  COEFPT         POINT U TO THE STRING BUFFER 
F0B1 862E             (                    ROMbasic.ASM):03505           LDA  #'.            * STORE A PERIOD 
F0B3 A7C0             (                    ROMbasic.ASM):03506           STA  ,U+            * IN THE BUFFER 
F0B5 5D               (                    ROMbasic.ASM):03507           TSTB CHECK DECIMAL POINT FLAG  
F0B6 2704             (                    ROMbasic.ASM):03508           BEQ  LBE4B          BRANCH IF NOTHING TO LEFT OF DECIMAL POINT 
F0B8 8630             (                    ROMbasic.ASM):03509           LDA  #'0            * STORE A ZERO 
F0BA A7C0             (                    ROMbasic.ASM):03510           STA  ,U+            * IN THE BUFFER 
                      (                    ROMbasic.ASM):03511                                
                      (                    ROMbasic.ASM):03512 ; CONVERT FPA0 INTO A STRING OF ASCII DIGITS                      
F0BC 8EF136           (                    ROMbasic.ASM):03513 LBE4B     LDX  #LBEC5         POINT X TO FP POWER OF 10 MANTISSA 
F0BF C680             (                    ROMbasic.ASM):03514           LDB  #0+$80         INITIALIZE DIGIT COUNTER TO 0+$80 
                      (                    ROMbasic.ASM):03515 ; BIT 7 SET IS USED TO INDICATE THAT THE POWER OF 10 MANTISSA                      
                      (                    ROMbasic.ASM):03516 ; IS NEGATIVE. WHEN YOU 'ADD' A NEGATIVE MANTISSA, IT IS                      
                      (                    ROMbasic.ASM):03517 ; THE SAME AS SUBTRACTING A POSITIVE ONE AND BIT 7 OF ACCB IS HOW                      
                      (                    ROMbasic.ASM):03518 ; THE ROUTINE KNOWS THAT A 'SUBTRACTION' IS OCCURING.                      
F0C1 9653             (                    ROMbasic.ASM):03519 LBE50     LDA  FPA0+3         * ADD MANTISSA LS 
F0C3 AB03             (                    ROMbasic.ASM):03520           ADDA 3,X            * BYTE OF FPA0 
F0C5 9753             (                    ROMbasic.ASM):03521           STA  FPA0+3         * AND (X) 
F0C7 9652             (                    ROMbasic.ASM):03522           LDA  FPA0+2         = ADD MANTISSA 
F0C9 A902             (                    ROMbasic.ASM):03523           ADCA 2,X            = NUMBER 3 BYTE OF 
F0CB 9752             (                    ROMbasic.ASM):03524           STA  FPA0+2         = FPA0 AND (X) 
F0CD 9651             (                    ROMbasic.ASM):03525           LDA  FPA0+1         * ADD MANTISSA 
F0CF A901             (                    ROMbasic.ASM):03526           ADCA 1,X            * NUMBER 2 BYTE OF 
F0D1 9751             (                    ROMbasic.ASM):03527           STA  FPA0+1         * FPA0 AND (X) 
F0D3 9650             (                    ROMbasic.ASM):03528           LDA  FPA0           = ADD MANTISSA 
F0D5 A984             (                    ROMbasic.ASM):03529           ADCA ,X             = MS BYTE OF 
F0D7 9750             (                    ROMbasic.ASM):03530           STA  FPA0           = FPA0 AND (X) 
F0D9 5C               (                    ROMbasic.ASM):03531           INCB                ADD ONE TO DIGIT COUNTER 
F0DA 56               (                    ROMbasic.ASM):03532           RORB ROTATE CARRY INTO BIT 7  
F0DB 59               (                    ROMbasic.ASM):03533           ROLB                *SET OVERFLOW FLAG AND BRANCH IF CARRY = 1 AND 
F0DC 28E3             (                    ROMbasic.ASM):03534           BVC  LBE50          *POSITIVE MANTISSA OR CARRY = 0 AND NEG MANTISSA 
F0DE 2403             (                    ROMbasic.ASM):03535           BCC  LBE72          BRANCH IF NEGATIVE MANTISSA 
F0E0 C00B             (                    ROMbasic.ASM):03536           SUBB #10+1          * TAKE THE 9’S COMPLEMENT IF 
F0E2 50               (                    ROMbasic.ASM):03537           NEGB                * ADDING MANTISSA 
F0E3 CB2F             (                    ROMbasic.ASM):03538 LBE72     ADDB #'0-1          ADD ASCII OFFSET TO DIGIT 
F0E5 3004             (                    ROMbasic.ASM):03539           LEAX 4,X            MOVE TO NEXT POWER OF 10 MANTISSA 
F0E7 1F98             (                    ROMbasic.ASM):03540           TFR  B,A            SAVE DIGIT IN ACCA 
F0E9 847F             (                    ROMbasic.ASM):03541           ANDA #$7F           MASK OFF BIT 7 (ADD/SUBTRACT FLAG) 
F0EB A7C0             (                    ROMbasic.ASM):03542           STA  ,U+            STORE DIGIT IN STRING BUFFER 
F0ED 0A45             (                    ROMbasic.ASM):03543           DEC  V45            DECREMENT DECIMAL POINT FLAG 
F0EF 2604             (                    ROMbasic.ASM):03544           BNE  LBE84          BRANCH IF NOT TIME FOR DECIMAL POINT 
F0F1 862E             (                    ROMbasic.ASM):03545           LDA  #'.            * STORE DECIMAL POINT IN 
F0F3 A7C0             (                    ROMbasic.ASM):03546           STA  ,U+            * STRING BUFFER 
F0F5 53               (                    ROMbasic.ASM):03547 LBE84     COMB                TOGGLE BIT 7 (ADD/SUBTRACT FLAG) 
F0F6 C480             (                    ROMbasic.ASM):03548           ANDB #$80           MASK OFF ALL BUT ADD/SUBTRACT FLAG 
F0F8 8CF15A           (                    ROMbasic.ASM):03549           CMPX #LBEC5+36      COMPARE X TO END OF MANTISSA TABLE 
F0FB 26C4             (                    ROMbasic.ASM):03550           BNE  LBE50          BRANCH IF NOT AT END OF TABLE 
                      (                    ROMbasic.ASM):03551 ; BLANK TRAILING ZEROS AND STORE EXPONENT IF ANY                      
F0FD A6C2             (                    ROMbasic.ASM):03552 LBE8C     LDA  ,-U            GET THE LAST CHARACTER; MOVE POINTER BACK 
F0FF 8130             (                    ROMbasic.ASM):03553           CMPA #'0            WAS IT A ZERO? 
F101 27FA             (                    ROMbasic.ASM):03554           BEQ  LBE8C          IGNORE TRAILING ZEROS IF SO 
F103 812E             (                    ROMbasic.ASM):03555           CMPA #'.            CHECK FOR DECIMAL POINT 
F105 2602             (                    ROMbasic.ASM):03556           BNE  LBE98          BRANCH IF NOT DECIMAL POINT 
F107 335F             (                    ROMbasic.ASM):03557           LEAU -1,U           STEP OVER THE DECIMAL POINT 
F109 862B             (                    ROMbasic.ASM):03558 LBE98     LDA  #'+            ASCII PLUS SIGN 
F10B D647             (                    ROMbasic.ASM):03559           LDB  V47            GET SCIENTIFIC NOTATION EXPONENT 
F10D 271C             (                    ROMbasic.ASM):03560           BEQ  LBEBA          BRANCH IF NOT SCIENTIFIC NOTATION 
F10F 2A03             (                    ROMbasic.ASM):03561           BPL  LBEA3          BRANCH IF POSITIVE EXPONENT 
F111 862D             (                    ROMbasic.ASM):03562           LDA  #'-            ASCII MINUS SIGN 
F113 50               (                    ROMbasic.ASM):03563           NEGB                NEGATE EXPONENT IF NEGATIVE 
F114 A742             (                    ROMbasic.ASM):03564 LBEA3     STA  2,U            STORE EXPONENT SIGN IN STRING 
F116 8645             (                    ROMbasic.ASM):03565           LDA  #'E            * GET ASCII ‘E’ (SCIENTIFIC NOTATION 
F118 A741             (                    ROMbasic.ASM):03566           STA  1,U            * FLAG) AND SAVE IT IN THE STRING 
F11A 862F             (                    ROMbasic.ASM):03567           LDA  #'0-1          INITIALIZE ACCA TO ASCII ZERO 
                      (                    ROMbasic.ASM):03568                                
                      (                    ROMbasic.ASM):03569                                
F11C 4C               (                    ROMbasic.ASM):03570 LBEAB     INCA                ADD ONE TO 10’S DIGIT OF EXPONENT 
F11D C00A             (                    ROMbasic.ASM):03571           SUBB #10            SUBTRACT 10 FROM ACCB 
F11F 24FB             (                    ROMbasic.ASM):03572           BCC  LBEAB          ADD 1 TO 10’S DIGIT IF NO CARRY 
F121 CB3A             (                    ROMbasic.ASM):03573           ADDB #'9+1          CONVERT UNITS DIGIT TO ASCII 
F123 ED43             (                    ROMbasic.ASM):03574           STD  3,U            SAVE EXPONENT IN STRING 
F125 6F45             (                    ROMbasic.ASM):03575           CLR  5,U            CLEAR LAST BYTE (TERMINATOR) 
F127 2004             (                    ROMbasic.ASM):03576           BRA  LBEBC          GO RESET POINTER 
F129 A7C4             (                    ROMbasic.ASM):03577 LBEB8     STA  ,U             STORE LAST CHARACTER 
F12B 6F41             (                    ROMbasic.ASM):03578 LBEBA     CLR  1,U            CLEAR LAST BYTE (TERMINATOR - REQUIRED BY 
                      (                    ROMbasic.ASM):03579 ;         PRINT SUBROUTINES)    
F12D 8E01F1           (                    ROMbasic.ASM):03580 LBEBC     LDX  #STRBUF+3      RESET POINTER TO START OF BUFFER 
F130 39               (                    ROMbasic.ASM):03581           RTS                  
                      (                    ROMbasic.ASM):03582 ;                              
F131 8000000000       (                    ROMbasic.ASM):03583 LBEC0     FCB  $80,$00,$00,$00,$00 FLOATING POINT .5 
                      (                    ROMbasic.ASM):03584 ;                              
                      (                    ROMbasic.ASM):03585 ;* TABLE OF UNNORMALIZED POWERS OF 10                      
F136 FA0A1F00         (                    ROMbasic.ASM):03586 LBEC5     FCB  $FA,$0A,$1F,$00 -100000000 
F13A 00989680         (                    ROMbasic.ASM):03587 LBEC9     FCB  $00,$98,$96,$80 10000000 
F13E FFF0BDC0         (                    ROMbasic.ASM):03588 LBECD     FCB  $FF,$F0,$BD,$C0 -1000000 
F142 000186A0         (                    ROMbasic.ASM):03589 LBED1     FCB  $00,$01,$86,$A0 100000 
F146 FFFFD8F0         (                    ROMbasic.ASM):03590 LBED5     FCB  $FF,$FF,$D8,$F0 -10000 
F14A 000003E8         (                    ROMbasic.ASM):03591 LBED9     FCB  $00,$00,$03,$E8 1000 
F14E FFFFFF9C         (                    ROMbasic.ASM):03592 LBEDD     FCB  $FF,$FF,$FF,$9C -100 
F152 0000000A         (                    ROMbasic.ASM):03593 LBEE1     FCB  $00,$00,$00,$0A 10 
F156 FFFFFFFF         (                    ROMbasic.ASM):03594 LBEE5     FCB  $FF,$FF,$FF,$FF -1 
                      (                    ROMbasic.ASM):03595 ;                              
                      (                    ROMbasic.ASM):03596 ;                              
F15A 964F             (                    ROMbasic.ASM):03597 LBEE9     LDA  FP0EXP         GET EXPONENT OF FPA0 
F15C 2702             (                    ROMbasic.ASM):03598           BEQ  LBEEF          BRANCH IF FPA0 = 0 
F15E 0354             (                    ROMbasic.ASM):03599           COM  FP0SGN         TOGGLE MANTISSA SIGN OF FPA0 
F160 39               (                    ROMbasic.ASM):03600 LBEEF     RTS                  
                      (                    ROMbasic.ASM):03601 ; EXPAND A POLYNOMIAL OF THE FORM                      
                      (                    ROMbasic.ASM):03602 ; AQ+BQ**3+CQ**5+DQ**7.... WHERE Q = FPA0                      
                      (                    ROMbasic.ASM):03603 ; AND THE X REGISTER POINTS TO A TABLE OF                      
                      (                    ROMbasic.ASM):03604 ; COEFFICIENTS A,B,C,D....                      
F161 9F64             (                    ROMbasic.ASM):03605 LBEF0     STX  COEFPT         SAVE COEFFICIENT TABLE POINTER 
F163 BDEEA0           (                    ROMbasic.ASM):03606           JSR  LBC2F          MOVE FPA0 TO FPA3 
F166 8D05             (                    ROMbasic.ASM):03607           BSR  LBEFC          MULTIPLY FPA3 BY FPA0 
F168 8D08             (                    ROMbasic.ASM):03608           BSR  LBF01          EXPAND POLYNOMIAL 
F16A 8E0040           (                    ROMbasic.ASM):03609           LDX  #V40           POINT X TO FPA3 
F16D 7EED3B           (                    ROMbasic.ASM):03610 LBEFC     JMP  LBACA          MULTIPLY (X) BY FPA0 
                      (                    ROMbasic.ASM):03611                                
                      (                    ROMbasic.ASM):03612 ; CALCULATE THE VALUE OF AN EXPANDED POLYNOMIAL                      
                      (                    ROMbasic.ASM):03613 ; EXPRESSION. ENTER WITH (X) POINTING TO A TABLE                      
                      (                    ROMbasic.ASM):03614 ; OF COEFFICIENTS, THE FIRST BYTE OF WHICH IS THE                      
                      (                    ROMbasic.ASM):03615 ; NUMBER OF (COEFFICIENTS-1) FOLLOWED BY THAT NUMBER                      
                      (                    ROMbasic.ASM):03616 ; OF PACKED FLOATING POINT NUMBERS. THE                      
                      (                    ROMbasic.ASM):03617 ; POLYNOMIAL IS EVALUATED AS FOLLOWS: VALUE =                      
                      (                    ROMbasic.ASM):03618 ; (((FPA0*Y0+Y1)*FPA0+Y2)*FPA0…YN)                      
F170 9F64             (                    ROMbasic.ASM):03619 LBEFF     STX  COEFPT         SAVE COEFFICIENT TABLE POINTER 
F172 BDEE9B           (                    ROMbasic.ASM):03620 LBF01     JSR  LBC2A          MOVE FPA0 TO FPA4 
F175 9E64             (                    ROMbasic.ASM):03621           LDX  COEFPT         GET THE COEFFICIENT POINTER 
F177 E680             (                    ROMbasic.ASM):03622           LDB  ,X+            GET THE TOP OF COEFFICIENT TABLE TO 
F179 D755             (                    ROMbasic.ASM):03623           STB  COEFCT         * USE AND STORE IT IN TEMPORARY COUNTER 
F17B 9F64             (                    ROMbasic.ASM):03624           STX  COEFPT         SAVE NEW COEFFICIENT POINTER 
F17D 8DEE             (                    ROMbasic.ASM):03625 LBF0C     BSR  LBEFC          MULTIPLY (X) BY FPA0 
F17F 9E64             (                    ROMbasic.ASM):03626           LDX  COEFPT         *GET COEFFICIENT POINTER 
F181 3005             (                    ROMbasic.ASM):03627           LEAX 5,X            *MOVE TO NEXT FP NUMBER 
F183 9F64             (                    ROMbasic.ASM):03628           STX  COEFPT         *SAVE NEW COEFFICIENT POINTER 
F185 BDEC33           (                    ROMbasic.ASM):03629           JSR  LB9C2          ADD (X) AND FPA0 
F188 8E0045           (                    ROMbasic.ASM):03630           LDX  #V45           POINT (X) TO FPA4 
F18B 0A55             (                    ROMbasic.ASM):03631           DEC  COEFCT         DECREMENT TEMP COUNTER 
F18D 26EE             (                    ROMbasic.ASM):03632           BNE  LBF0C          BRANCH IF MORE COEFFICIENTS LEFT 
F18F 39               (                    ROMbasic.ASM):03633           RTS                  
                      (                    ROMbasic.ASM):03634                                
                      (                    ROMbasic.ASM):03635 ; RND                          
F190 BDEEDE           (                    ROMbasic.ASM):03636 RND       JSR  LBC6D          TEST FPA0 
F193 2B1F             (                    ROMbasic.ASM):03637           BMI  LBF45          BRANCH IF FPA0 = NEGATIVE 
F195 2715             (                    ROMbasic.ASM):03638           BEQ  LBF3B          BRANCH IF FPA0 = 0 
F197 8D10             (                    ROMbasic.ASM):03639           BSR  LBF38          CONVERT FPA0 TO AN INTEGER 
F199 BDEEA0           (                    ROMbasic.ASM):03640           JSR  LBC2F          PACK FPA0 TO FPA3 
F19C 8D0E             (                    ROMbasic.ASM):03641           BSR  LBF3B          GET A RANDOM NUMBER: FPA0 < 1.0 
F19E 8E0040           (                    ROMbasic.ASM):03642           LDX  #V40           POINT (X) TO FPA3 
F1A1 8DCA             (                    ROMbasic.ASM):03643           BSR  LBEFC          MULTIPLY (X) BY FPA0 
F1A3 8EED36           (                    ROMbasic.ASM):03644           LDX  #LBAC5         POINT (X) TO FP VALUE OF 1.0 
F1A6 BDEC33           (                    ROMbasic.ASM):03645           JSR  LB9C2          ADD 1.0 TO FPA0 
F1A9 7EEF5F           (                    ROMbasic.ASM):03646 LBF38     JMP  INT            CONVERT FPA0 TO AN INTEGER 
                      (                    ROMbasic.ASM):03647 ; CALCULATE A RANDOM NUMBER IN THE RANGE 0.0 < X <= 1.0                      
F1AC 9EB1             (                    ROMbasic.ASM):03648 LBF3B     LDX  RVSEED+1       * MOVE VARIABLE 
F1AE 9F50             (                    ROMbasic.ASM):03649           STX  FPA0           * RANDOM NUMBER 
F1B0 9EB3             (                    ROMbasic.ASM):03650           LDX  RVSEED+3       * SEED TO 
F1B2 9F52             (                    ROMbasic.ASM):03651           STX  FPA0+2         * FPA0 
F1B4 BEF1E1           (                    ROMbasic.ASM):03652 LBF45     LDX  RSEED          = MOVE FIXED 
F1B7 9F5D             (                    ROMbasic.ASM):03653           STX  FPA1           = RANDOM NUMBER 
F1B9 BEF1E3           (                    ROMbasic.ASM):03654           LDX  RSEED+2        = SEED TO 
F1BC 9F5F             (                    ROMbasic.ASM):03655           STX  FPA1+2         = MANTISSA OF FPA0 
F1BE BDED41           (                    ROMbasic.ASM):03656           JSR  LBAD0          MULTIPLY FPA0 X FPA1 
F1C1 DC8A             (                    ROMbasic.ASM):03657           LDD  VAD            GET THE TWO LOWEST ORDER PRODUCT BYTES 
F1C3 C3658B           (                    ROMbasic.ASM):03658           ADDD #$658B         ADD A CONSTANT 
F1C6 DDB3             (                    ROMbasic.ASM):03659           STD  RVSEED+3       SAVE NEW LOW ORDER VARIABLE RANDOM # SEED 
F1C8 DD52             (                    ROMbasic.ASM):03660           STD  FPA0+2         SAVE NEW LOW ORDER BYTES OF FPA0 MANTISSA 
F1CA DC88             (                    ROMbasic.ASM):03661           LDD  VAB            GET 2 MORE LOW ORDER PRODUCT BYTES 
F1CC C9B0             (                    ROMbasic.ASM):03662           ADCB #$B0           ADD A CONSTANT 
F1CE 8905             (                    ROMbasic.ASM):03663           ADCA #5             ADD A CONSTANT 
F1D0 DDB1             (                    ROMbasic.ASM):03664           STD  RVSEED+1       SAVE NEW HIGH ORDER VARIABLE RANDOM # SEED 
F1D2 DD50             (                    ROMbasic.ASM):03665           STD  FPA0           SAVE NEW HIGH ORDER FPA0 MANTISSA 
F1D4 0F54             (                    ROMbasic.ASM):03666           CLR  FP0SGN         FORCE FPA0 MANTISSA = POSITIVE 
F1D6 8680             (                    ROMbasic.ASM):03667           LDA  #$80           * SET FPA0 BIASED EXPONENT 
F1D8 974F             (                    ROMbasic.ASM):03668           STA  FP0EXP         * TO 0 1 < FPA0 < 0 
F1DA 9615             (                    ROMbasic.ASM):03669           LDA  FPA2+2         GET A BYTE FROM FPA2 (MORE RANDOMNESS) 
F1DC 9763             (                    ROMbasic.ASM):03670           STA  FPSBYT         SAVE AS SUB BYTE 
F1DE 7EEC8D           (                    ROMbasic.ASM):03671           JMP  LBA1C          NORMALIZE FPA0 
                      (                    ROMbasic.ASM):03672 ;                              
F1E1 40E6             (                    ROMbasic.ASM):03673 RSEED     FDB  $40E6          *CONSTANT RANDOM NUMBER GENERATOR SEED 
F1E3 4DAB             (                    ROMbasic.ASM):03674           FDB  $4DAB          * 
                      (                    ROMbasic.ASM):03675                                
                      (                    ROMbasic.ASM):03676 ; SIN                          
                      (                    ROMbasic.ASM):03677 ; THE SIN FUNCTION REQUIRES AN ARGUMENT IN RADIANS AND WILL REPEAT ITSELF EVERY                      
                      (                    ROMbasic.ASM):03678 ; 2*PI RADIANS. THE ARGUMENT IS DIVIDED BY 2*PI AND ONLY THE FRACTIONAL PART IS                      
                      (                    ROMbasic.ASM):03679 ; RETAINED. SINCE THE ARGUMENT WAS DIVIDED BY 2*P1, THE COEFFICIENTS MUST BE                      
                      (                    ROMbasic.ASM):03680 ; MULTIPLIED BY THE APPROPRIATE POWER OF 2*PI.                      
                      (                    ROMbasic.ASM):03681                                
                      (                    ROMbasic.ASM):03682 ; SIN IS EVALUATED USING THE TRIGONOMETRIC IDENTITIES BELOW:                      
                      (                    ROMbasic.ASM):03683 ; SIN(X)=SIN(PI-X) & -SIN(PI/2-X)=SIN((3*PI)/2+X)                      
F1E5 BDEED0           (                    ROMbasic.ASM):03684 SIN       JSR  LBC5F          COPY FPA0 TO FPA1 
F1E8 8EF22A           (                    ROMbasic.ASM):03685           LDX  #LBFBD         POINT (X) TO 2*PI 
F1EB D661             (                    ROMbasic.ASM):03686           LDB  FP1SGN         *GET MANTISSA SIGN OF FPA1 
F1ED BDEDFA           (                    ROMbasic.ASM):03687           JSR  LBB89          *AND DIVIDE FPA0 BY 2*PI 
F1F0 BDEED0           (                    ROMbasic.ASM):03688           JSR  LBC5F          COPY FPA0 TO FPA1 
F1F3 8DB4             (                    ROMbasic.ASM):03689           BSR  LBF38          CONVERT FPA0 TO AN INTEGER 
F1F5 0F62             (                    ROMbasic.ASM):03690           CLR  RESSGN         SET RESULT SIGN = POSITIVE 
F1F7 965C             (                    ROMbasic.ASM):03691           LDA  FP1EXP         *GET EXPONENT OF FPA1 
F1F9 D64F             (                    ROMbasic.ASM):03692           LDB  FP0EXP         *GET EXPONENT OF FPA0 
F1FB BDEC2D           (                    ROMbasic.ASM):03693           JSR  LB9BC          *SUBTRACT FPA0 FROM FPA1 
                      (                    ROMbasic.ASM):03694 ; NOW FPA0 CONTAINS ONLY THE FRACTIONAL PART OF ARGUMENT/2*PI                      
F1FE 8EF22F           (                    ROMbasic.ASM):03695           LDX  #LBFC2         POINT X TO FP (.25) 
F201 BDEC2A           (                    ROMbasic.ASM):03696           JSR  LB9B9          SUBTRACT FPA0 FROM .25 (PI/2) 
F204 9654             (                    ROMbasic.ASM):03697           LDA  FP0SGN         GET MANTISSA SIGN OF FPA0 
F206 3402             (                    ROMbasic.ASM):03698           PSHS A              SAVE IT ON STACK 
F208 2A09             (                    ROMbasic.ASM):03699           BPL  LBFA6          BRANCH IF MANTISSA POSITIVE 
F20A BDEC25           (                    ROMbasic.ASM):03700           JSR  LB9B4          ADD .5 (PI) TO FPA0 
F20D 9654             (                    ROMbasic.ASM):03701           LDA  FP0SGN         GET SIGN OF FPA0 
F20F 2B05             (                    ROMbasic.ASM):03702           BMI  LBFA9          BRANCH IF NEGATIVE 
F211 030A             (                    ROMbasic.ASM):03703           COM  RELFLG         COM IF +(3*PI)/2 >= ARGUMENT >+ PI/2 (QUADRANT FLAG) 
F213 BDF15A           (                    ROMbasic.ASM):03704 LBFA6     JSR  LBEE9          TOGGLE MANTISSA SIGN OF FPA0 
F216 8EF22F           (                    ROMbasic.ASM):03705 LBFA9     LDX  #LBFC2         POINT X TO FP (.25) 
F219 BDEC33           (                    ROMbasic.ASM):03706           JSR  LB9C2          ADD .25 (PI/2) TO FPA0 
F21C 3502             (                    ROMbasic.ASM):03707           PULS A              GET OLD MANTISSA SIGN 
F21E 4D               (                    ROMbasic.ASM):03708           TSTA                * BRANCH IF OLD 
F21F 2A03             (                    ROMbasic.ASM):03709           BPL  LBFB7          * SIGN WAS POSITIVE 
F221 BDF15A           (                    ROMbasic.ASM):03710           JSR  LBEE9          TOGGLE MANTISSA SIGN 
F224 8EF234           (                    ROMbasic.ASM):03711 LBFB7     LDX  #LBFC7         POINT X TO TABLE OF COEFFICIENTS 
F227 7EF161           (                    ROMbasic.ASM):03712           JMP  LBEF0          GO CALCULATE POLYNOMIAL VALUE 
                      (                    ROMbasic.ASM):03713                                
F22A 83490FDAA2       (                    ROMbasic.ASM):03714 LBFBD     FCB  $83,$49,$0F,$DA,$A2 6.28318531 (2*PI) 
F22F 7F00000000       (                    ROMbasic.ASM):03715 LBFC2     FCB  $7F,$00,$00,$00,$00 .25 
                      (                    ROMbasic.ASM):03716                                
                      (                    ROMbasic.ASM):03717                                
F234 05               (                    ROMbasic.ASM):03718 LBFC7     FCB  6-1            SIX COEFFICIENTS 
F235 84E61A2D1B       (                    ROMbasic.ASM):03719 LBFC8     FCB  $84,$E6,$1A,$2D,$1B * -((2*PI)**11)/11! 
F23A 862807FBF8       (                    ROMbasic.ASM):03720 LBFCD     FCB  $86,$28,$07,$FB,$F8 * ((2*PI)**9)/9! 
F23F 8799688901       (                    ROMbasic.ASM):03721 LBFD2     FCB  $87,$99,$68,$89,$01 * -((2*PI)**7)/7! 
F244 872335DFE1       (                    ROMbasic.ASM):03722 LBFD7     FCB  $87,$23,$35,$DF,$E1 * ((2*PI)**5)/5! 
F249 86A55DE728       (                    ROMbasic.ASM):03723 LBFDC     FCB  $86,$A5,$5D,$E7,$28 * -((2*PI)**3)/3! 
F24E 83490FDAA2       (                    ROMbasic.ASM):03724 LBFE1     FCB  $83,$49,$0F,$DA,$A2 * 
                      (                    ROMbasic.ASM):03725                                
F253 A154468F13       (                    ROMbasic.ASM):03726           FCB  $A1,$54,$46,$8F,$13 UNUSED GARBAGE BYTES 
F258 8F524389CD       (                    ROMbasic.ASM):03727           FCB  $8F,$52,$43,$89,$CD UNUSED GARBAGE BYTES 
                      (                    ROMbasic.ASM):03728 ; EXTENDED BASIC                      
                      (                    ROMbasic.ASM):03729                                
                      (                    ROMbasic.ASM):03730 ; COS                          
                      (                    ROMbasic.ASM):03731 ; THE VALUE OF COS(X) IS DETERMINED BY THE TRIG IDENTITY COS(X)=SIN((PI/2)+X)                      
F25D 8EF290           (                    ROMbasic.ASM):03732 COS       LDX  #L83AB         POINT X TO FP CONSTANT (P1/2) 
F260 BDEC33           (                    ROMbasic.ASM):03733           JSR  LB9C2          ADD FPA0 TO (X) 
F263 7EF1E5           (                    ROMbasic.ASM):03734 L837E     JMP  SIN            JUMP TO SIN ROUTINE 
                      (                    ROMbasic.ASM):03735                                
                      (                    ROMbasic.ASM):03736 ; TAN                          
                      (                    ROMbasic.ASM):03737 ; THE VALUE OF TAN(X) IS DETERMINED BY THE TRIG IDENTITY TAN(X)=SIN(X)/COS(X)                      
F266 BDEEA0           (                    ROMbasic.ASM):03738 TAN       JSR  LBC2F          PACK FPA0 AND MOVE IT TO FPA3 
F269 0F0A             (                    ROMbasic.ASM):03739           CLR  RELFLG         RESET QUADRANT FLAG 
F26B 8DF6             (                    ROMbasic.ASM):03740           BSR  L837E          CALCULATE SIN OF ARGUMENT 
F26D 8E004A           (                    ROMbasic.ASM):03741           LDX  #V4A           POINT X TO FPA5 
F270 BDEEA6           (                    ROMbasic.ASM):03742           JSR  LBC35          PACK FPA0 AND MOVE IT TO FPA5 
F273 8E0040           (                    ROMbasic.ASM):03743           LDX  #V40           POINT X TO FPA3 
F276 BDEE85           (                    ROMbasic.ASM):03744           JSR  LBC14          MOVE FPA3 TO FPA0 
F279 0F54             (                    ROMbasic.ASM):03745           CLR  FP0SGN         FORCE FPA0 MANTISSA TO BE POSITIVE 
F27B 960A             (                    ROMbasic.ASM):03746           LDA  RELFLG         GET THE QUADRANT FLAG - COS NEGATIVE IN QUADS 2,3 
F27D 8D0C             (                    ROMbasic.ASM):03747           BSR  L83A6          CALCULATE VALUE OF COS(FPA0) 
F27F 0D4F             (                    ROMbasic.ASM):03748           TST  FP0EXP         CHECK EXPONENT OF FPA0 
F281 1027FA7E         (                    ROMbasic.ASM):03749           LBEQ LBA92          ‘OV’ ERROR IF COS(X)=0 
F285 8E004A           (                    ROMbasic.ASM):03750           LDX  #V4A           POINT X TO FPA5 
F288 7EEE00           (                    ROMbasic.ASM):03751 L83A3     JMP  LBB8F          DIVIDE (X) BY FPA0 - SIN(X)/COS(X) 
F28B 3402             (                    ROMbasic.ASM):03752 L83A6     PSHS A              SAVE SIGN FLAG ON STACK 
F28D 7EF213           (                    ROMbasic.ASM):03753           JMP  LBFA6          EXPAND POLYNOMIAL 
                      (                    ROMbasic.ASM):03754                                
F290 81490FDAA2       (                    ROMbasic.ASM):03755 L83AB     FCB  $81,$49,$0F,$DA,$A2 1.57079633 (PI/2) 
                      (                    ROMbasic.ASM):03756                                
                      (                    ROMbasic.ASM):03757 ; ATN                          
                      (                    ROMbasic.ASM):03758 ; A 12 TERM TAYLOR SERIES IS USED TO EVALUATE THE                      
                      (                    ROMbasic.ASM):03759 ; ARCTAN EXPRESSION. TWO  DIFFERENT FORMULI ARE USED  
                      (                    ROMbasic.ASM):03760 ; TO EVALUATE THE EXPRESSION DEPENDING UPON                      
                      (                    ROMbasic.ASM):03761 ; WHETHER OR NOT THE ARGUMENT SQUARED IS > OR < 1.0                      
                      (                    ROMbasic.ASM):03762                                
                      (                    ROMbasic.ASM):03763 ; IF X**2<1 THEN ATN=X-(X**3)/3+(X**5)/5-(X**7)/7. . .                      
                      (                    ROMbasic.ASM):03764 ; IF X**2>=1 THEN ATN=PI/2-(1/X-1/((X**3)*3)+(1/((X**5)*5)-. . .)                      
                      (                    ROMbasic.ASM):03765                                
F295 9654             (                    ROMbasic.ASM):03766 ATN       LDA  FP0SGN         * GET THE SIGN OF THE MANTISSA AND 
F297 3402             (                    ROMbasic.ASM):03767           PSHS A              * SAVE IT ON THE STACK 
F299 2A02             (                    ROMbasic.ASM):03768           BPL  L83B8          BRANCH IF POSITIVE MANTISSA 
F29B 8D24             (                    ROMbasic.ASM):03769           BSR  L83DC          CHANGE SIGN OF FPA0 
F29D 964F             (                    ROMbasic.ASM):03770 L83B8     LDA  FP0EXP         * GET EXPONENT OF FPA0 AND 
F29F 3402             (                    ROMbasic.ASM):03771           PSHS A              * SAVE IT ON THE STACK 
F2A1 8181             (                    ROMbasic.ASM):03772           CMPA #$81           IS FPAO < 1.0? 
F2A3 2505             (                    ROMbasic.ASM):03773           BLO  L83C5          YES 
F2A5 8EED36           (                    ROMbasic.ASM):03774           LDX  #LBAC5         POINT X TO FP CONSTANT 1.0 
F2A8 8DDE             (                    ROMbasic.ASM):03775           BSR  L83A3          GET RECIPROCAL OF FPA0 
F2AA 8EF2C5           (                    ROMbasic.ASM):03776 L83C5     LDX  #L83E0         POINT (X) TO TAYLOR SERIES COEFFICIENTS 
F2AD BDF161           (                    ROMbasic.ASM):03777           JSR  LBEF0          EXPAND POLYNOMIAL 
F2B0 3502             (                    ROMbasic.ASM):03778           PULS A              GET EXPONENT OF ARGUMENT 
F2B2 8181             (                    ROMbasic.ASM):03779           CMPA #$81           WAS ARGUMENT < 1.0? 
F2B4 2506             (                    ROMbasic.ASM):03780           BLO  L83D7          YES 
F2B6 8EF290           (                    ROMbasic.ASM):03781           LDX  #L83AB         POINT (X) TO FP NUMBER (PI/2) 
F2B9 BDEC2A           (                    ROMbasic.ASM):03782           JSR  LB9B9          SUBTRACT FPA0 FROM (PI/2) 
F2BC 3502             (                    ROMbasic.ASM):03783 L83D7     PULS A              * GET SIGN OF INITIAL ARGUMENT MANTISSA 
F2BE 4D               (                    ROMbasic.ASM):03784           TSTA                * AND SET FLAGS ACCORDING TO IT 
F2BF 2A03             (                    ROMbasic.ASM):03785           BPL  L83DF          RETURN IF ARGUMENT WAS POSITIVE 
F2C1 7EF15A           (                    ROMbasic.ASM):03786 L83DC     JMP  LBEE9          CHANGE MANTISSA SIGN OF FPA0 
F2C4 39               (                    ROMbasic.ASM):03787 L83DF     RTS                  
                      (                    ROMbasic.ASM):03788 ;                              
                      (                    ROMbasic.ASM):03789 ; TCHEBYSHEV MODIFIED TAYLOR SERIES COEFFICIENTS FOR ARCTANGENT                      
F2C5 0B               (                    ROMbasic.ASM):03790 L83E0     FCB  $0B            TWELVE COEFFICIENTS 
F2C6 76B383BDD3       (                    ROMbasic.ASM):03791 L83E1     FCB  $76,$B3,$83,$BD,$D3 -6.84793912E-04 1/23 
F2CB 791EF4A6F5       (                    ROMbasic.ASM):03792 L83E6     FCB  $79,$1E,$F4,$A6,$F5 +4.85094216E-03 1/21 
F2D0 7B83FCB010       (                    ROMbasic.ASM):03793 L83EB     FCB  $7B,$83,$FC,$B0,$10 -0.0161117018 
F2D5 7C0C1F67CA       (                    ROMbasic.ASM):03794 L83F0     FCB  $7C,$0C,$1F,$67,$CA 0.0342096381 
F2DA 7CDE53CBC1       (                    ROMbasic.ASM):03795 L83F5     FCB  $7C,$DE,$53,$CB,$C1 -0.0542791328 
F2DF 7D1464704C       (                    ROMbasic.ASM):03796 L83FA     FCB  $7D,$14,$64,$70,$4C 0.0724571965 
F2E4 7DB7EA517A       (                    ROMbasic.ASM):03797 L83FF     FCB  $7D,$B7,$EA,$51,$7A -0.0898023954 
F2E9 7D6330887E       (                    ROMbasic.ASM):03798 L8404     FCB  $7D,$63,$30,$88,$7E 0.110932413 
F2EE 7E9244993A       (                    ROMbasic.ASM):03799 L8409     FCB  $7E,$92,$44,$99,$3A -0.142839808 
F2F3 7E4CCC91C7       (                    ROMbasic.ASM):03800 L840E     FCB  $7E,$4C,$CC,$91,$C7 0.199999121 
F2F8 7FAAAAAA13       (                    ROMbasic.ASM):03801 L8413     FCB  $7F,$AA,$AA,$AA,$13 -0.333333316 
F2FD 8100000000       (                    ROMbasic.ASM):03802 L8418     FCB  $81,$00,$00,$00,$00 1 
                      (                    ROMbasic.ASM):03803 ;                              
                      (                    ROMbasic.ASM):03804 ;* TCHEBYSHEV MODIFIED TAYLOR SERIES COEFFICIENTS FOR LN(X)                      
                      (                    ROMbasic.ASM):03805 ;                              
F302 03               (                    ROMbasic.ASM):03806 L841D     FCB  3              FOUR COEFFICIENTS 
F303 7F5E56CB79       (                    ROMbasic.ASM):03807 L841E     FCB  $7F,$5E,$56,$CB,$79 0.434255942 
F308 80139B0B64       (                    ROMbasic.ASM):03808 L8423     FCB  $80,$13,$9B,$0B,$64 0.576584541 
F30D 8076389316       (                    ROMbasic.ASM):03809 L8428     FCB  $80,$76,$38,$93,$16 0.961800759 
F312 8238AA3B20       (                    ROMbasic.ASM):03810 L842D     FCB  $82,$38,$AA,$3B,$20 2.88539007 
                      (                    ROMbasic.ASM):03811                                
F317 803504F334       (                    ROMbasic.ASM):03812 L8432     FCB  $80,$35,$04,$F3,$34 1/SQR(2) 
                      (                    ROMbasic.ASM):03813                                
F31C 813504F334       (                    ROMbasic.ASM):03814 L8437     FCB  $81,$35,$04,$F3,$34 SQR(2) 
                      (                    ROMbasic.ASM):03815                                
F321 8080000000       (                    ROMbasic.ASM):03816 L843C     FCB  $80,$80,$00,$00,$00 -0.5 
                      (                    ROMbasic.ASM):03817                                
F326 80317217F8       (                    ROMbasic.ASM):03818 L8441     FCB  $80,$31,$72,$17,$F8 LN(2) 
                      (                    ROMbasic.ASM):03819 ;                              
                      (                    ROMbasic.ASM):03820 ; LOG - NATURAL LOGARITHM (LN)                      
                      (                    ROMbasic.ASM):03821                                
                      (                    ROMbasic.ASM):03822 ; THE NATURAL OR NAPERIAN LOGARITHM IS CALCULATED USING                      
                      (                    ROMbasic.ASM):03823 ; MATHEMATICAL IDENTITIES. FPA0 IS OF THE FORM FPA0=A*(2**B) (SCIENTIFIC                      
                      (                    ROMbasic.ASM):03824 ; NOTATION). THEREFORE, THE LOG ROUTINE DETERMINES THE VALUE OF                      
                      (                    ROMbasic.ASM):03825 ; LN(A*(2**B)). A SERIES OF MATHEMATICAL IDENTITIES WILL EXPAND THIS                      
                      (                    ROMbasic.ASM):03826 ; TERM: LN(A*(2**B))=(-1/2+(1/LN(2))*(LN(A*SQR(2)))+B)*LN(2). ALL OF                      
                      (                    ROMbasic.ASM):03827 ; THE TERMS OF THE LATTER EXPRESSION ARE CONSTANTS EXCEPT FOR THE                      
                      (                    ROMbasic.ASM):03828 ; LN(A*SQR(2)) TERM WHICH IS EVALUATED USING THE TAYLOR SERIES EXPANSION                      
F32B BDEEDE           (                    ROMbasic.ASM):03829 LOG       JSR  LBC6D          CHECK STATUS OF FPA0 
F32E 102FF3C4         (                    ROMbasic.ASM):03830           LBLE LB44A          ‘FC’ ERROR IF NEGATIVE OR ZERO 
F332 8EF317           (                    ROMbasic.ASM):03831           LDX  #L8432         POINT (X) TO FP NUMBER (1/SQR(2)) 
F335 964F             (                    ROMbasic.ASM):03832           LDA  FP0EXP         *GET EXPONENT OF ARGUMENT 
F337 8080             (                    ROMbasic.ASM):03833           SUBA #$80           *SUBTRACT OFF THE BIAS AND 
F339 3402             (                    ROMbasic.ASM):03834           PSHS A              *SAVE IT ON THE STACK 
F33B 8680             (                    ROMbasic.ASM):03835           LDA  #$80            
F33D 974F             (                    ROMbasic.ASM):03836           STA  FP0EXP          
F33F BDEC33           (                    ROMbasic.ASM):03837           JSR  LB9C2          ADD FPA0 TO (X) 
F342 8EF31C           (                    ROMbasic.ASM):03838           LDX  #L8437         POINT X TO SQR(2) 
F345 BDEE00           (                    ROMbasic.ASM):03839           JSR  LBB8F          DIVIDE SQR(2) BY FPA0 
F348 8EED36           (                    ROMbasic.ASM):03840           LDX  #LBAC5         POINT X TO FP VALUE OF 1.00 
F34B BDEC2A           (                    ROMbasic.ASM):03841           JSR  LB9B9          SUBTRACT FPA0 FROM (X) 
                      (                    ROMbasic.ASM):03842 ;         NOW  FPA0 = (1-SQR(2)*X)/(1+SQR(2)*X) WHERE X IS ARGUMENT  
F34E 8EF302           (                    ROMbasic.ASM):03843           LDX  #L841D         POINT X TO TABLE OF COEFFICIENTS 
F351 BDF161           (                    ROMbasic.ASM):03844           JSR  LBEF0          EXPAND POLYNOMIAL 
F354 8EF321           (                    ROMbasic.ASM):03845           LDX  #L843C         POINT X TO FP VALUE OF (-.5) 
F357 BDEC33           (                    ROMbasic.ASM):03846           JSR  LB9C2          ADD FPA0 TO X 
F35A 3504             (                    ROMbasic.ASM):03847           PULS B              GET EXPONENT OF ARGUMENT BACK (WITHOUT BIAS) 
F35C BDF00A           (                    ROMbasic.ASM):03848           JSR  LBD99          ADD ACCB TO FPA0 
F35F 8EF326           (                    ROMbasic.ASM):03849           LDX  #L8441         POINT X TO LN(2) 
F362 7EED3B           (                    ROMbasic.ASM):03850           JMP  LBACA          MULTIPLY FPA0 * LN(2) 
                      (                    ROMbasic.ASM):03851                                
                      (                    ROMbasic.ASM):03852 ; SQR                          
F365 BDEED0           (                    ROMbasic.ASM):03853 SQR       JSR  LBC5F          MOVE FPA0 TO FPA1 
F368 8EF131           (                    ROMbasic.ASM):03854           LDX  #LBEC0         POINT (X) TO FP NUMBER (.5) 
F36B BDEE85           (                    ROMbasic.ASM):03855           JSR  LBC14          COPY A PACKED NUMBER FROM (X) TO FPA0 
                      (                    ROMbasic.ASM):03856                                
                      (                    ROMbasic.ASM):03857 ; ARITHMETIC OPERATOR FOR EXPONENTIATION JUMPS                      
                      (                    ROMbasic.ASM):03858 ; HERE. THE FORMULA USED TO EVALUATE EXPONENTIATION                      
                      (                    ROMbasic.ASM):03859 ; IS A**X=E**(X LN A) = E**(FPA0*LN(FPA1)), E=2.7182818                      
F36E 2767             (                    ROMbasic.ASM):03860 L8489     BEQ  EXP            DO A NATURAL EXPONENTIATION IF EXPONENT = 0 
F370 4D               (                    ROMbasic.ASM):03861           TSTA                *CHECK VALUE BEING EXPONENTIATED 
F371 2603             (                    ROMbasic.ASM):03862           BNE  L8491          *AND BRANCH IF IT IS <> 0 
F373 7EECAB           (                    ROMbasic.ASM):03863           JMP  LBA3A          FPA0=0 IF RAISING ZERO TO A POWER 
F376 8E004A           (                    ROMbasic.ASM):03864 L8491     LDX  #V4A           * PACK FPA0 AND SAVE 
F379 BDEEA6           (                    ROMbasic.ASM):03865           JSR  LBC35          * IT IN FPA5 (ARGUMENT’S EXPONENT) 
F37C 5F               (                    ROMbasic.ASM):03866           CLRB                ACCB=DEFAULT RESULT SIGN FLAG; 0=POSITIVE 
F37D 9661             (                    ROMbasic.ASM):03867           LDA  FP1SGN         *CHECK THE SIGN OF ARGUMENT 
F37F 2A10             (                    ROMbasic.ASM):03868           BPL  L84AC          *BRANCH IF POSITIVE 
F381 BDEF5F           (                    ROMbasic.ASM):03869           JSR  INT            CONVERT EXPONENT INTO AN INTEGER 
F384 8E004A           (                    ROMbasic.ASM):03870           LDX  #V4A           POINT X TO FPA5 (ORIGINAL EXPONENT) 
F387 9661             (                    ROMbasic.ASM):03871           LDA  FP1SGN         GET MANTISSA SIGN OF FPA1 (ARGUMENT) 
F389 BDEF11           (                    ROMbasic.ASM):03872           JSR  LBCA0          *COMPARE FPA0 TO (X) AND 
F38C 2603             (                    ROMbasic.ASM):03873           BNE  L84AC          *BRANCH IF NOT EQUAL 
F38E 43               (                    ROMbasic.ASM):03874           COMA                TOGGLE FPA1 MANTISSA SIGN - FORCE POSITIVE 
F38F D601             (                    ROMbasic.ASM):03875           LDB  CHARAC         GET LS BYTE OF INTEGER VALUE OF EXPONENT (RESULT SIGN FLAG) 
F391 BDEEBD           (                    ROMbasic.ASM):03876 L84AC     JSR  LBC4C          COPY FPA1 TO FPA0; ACCA = MANTISSA SIGN 
F394 3404             (                    ROMbasic.ASM):03877           PSHS B              PUT RESULT SIGN FLAG ON THE STACK 
F396 BDF32B           (                    ROMbasic.ASM):03878           JSR  LOG             
F399 8E004A           (                    ROMbasic.ASM):03879           LDX  #V4A           POINT (X) TO FPA5 
F39C BDED3B           (                    ROMbasic.ASM):03880           JSR  LBACA          MULTIPLY FPA0 BY FPA5 
F39F 8D36             (                    ROMbasic.ASM):03881           BSR  EXP            CALCULATE E**(FPA0) 
F3A1 3502             (                    ROMbasic.ASM):03882           PULS A              * GET RESULT SIGN FLAG FROM THE STACK 
F3A3 46               (                    ROMbasic.ASM):03883           RORA * AND BRANCH IF NEGATIVE  
F3A4 1025FDB2         (                    ROMbasic.ASM):03884           LBCS LBEE9          CHANGE SIGN OF FPA0 MANTISSA 
F3A8 39               (                    ROMbasic.ASM):03885           RTS                  
                      (                    ROMbasic.ASM):03886                                
                      (                    ROMbasic.ASM):03887 ; CORRECTION FACTOR FOR EXPONENTIAL FUNCTION                      
F3A9 8138AA3B29       (                    ROMbasic.ASM):03888 L84C4     FCB  $81,$38,$AA,$3B,$29 1.44269504 ( CF ) 
                      (                    ROMbasic.ASM):03889 ;                              
                      (                    ROMbasic.ASM):03890 ; TCHEBYSHEV MODIFIED TAYLOR SERIES COEFFICIENTS FOR E**X                      
                      (                    ROMbasic.ASM):03891 ;                              
F3AE 07               (                    ROMbasic.ASM):03892 L84C9     FCB  7              EIGHT COEFFICIENTS 
F3AF 7134583E56       (                    ROMbasic.ASM):03893 L84CA     FCB  $71,$34,$58,$3E,$56 2.14987637E-05: 1/(7!*(CF**7)) 
F3B4 74167EB31B       (                    ROMbasic.ASM):03894 L84CF     FCB  $74,$16,$7E,$B3,$1B 1.4352314E-04 : 1/(6!*(CF**6)) 
F3B9 772FEEE385       (                    ROMbasic.ASM):03895 L84D4     FCB  $77,$2F,$EE,$E3,$85 1.34226348E-03: 1/(5!*(CF**5)) 
F3BE 7A1D841C2A       (                    ROMbasic.ASM):03896 L84D9     FCB  $7A,$1D,$84,$1C,$2A 9.61401701E-03: 1/(4!*(CF**4)) 
F3C3 7C6359580A       (                    ROMbasic.ASM):03897 L84DE     FCB  $7C,$63,$59,$58,$0A 0.0555051269 
F3C8 7E75FDE7C6       (                    ROMbasic.ASM):03898 L84E3     FCB  $7E,$75,$FD,$E7,$C6 0.240226385 
F3CD 8031721810       (                    ROMbasic.ASM):03899 L84E8     FCB  $80,$31,$72,$18,$10 0.693147186 
F3D2 8100000000       (                    ROMbasic.ASM):03900 L84ED     FCB  $81,$00,$00,$00,$00 1 
                      (                    ROMbasic.ASM):03901 ;                              
                      (                    ROMbasic.ASM):03902 ; EXP ( E**X)                      
                      (                    ROMbasic.ASM):03903 ; THE EXPONENTIAL FUNCTION IS EVALUATED BY FIRST MULTIPLYING THE                      
                      (                    ROMbasic.ASM):03904 ; ARGUMENT BY A CORRECTION FACTOR (CF). AFTER THIS IS DONE, AN                      
                      (                    ROMbasic.ASM):03905 ; ARGUMENT >= 127 WILL YIELD A ZERO RESULT (NO UNDERFLOW) FOR A                      
                      (                    ROMbasic.ASM):03906 ; NEGATIVE ARGUMENT OR AN 'OV' (OVERFLOW) ERROR FOR A POSITIVE                      
                      (                    ROMbasic.ASM):03907 ; ARGUMENT. THE POLYNOMIAL COEFFICIENTS ARE MODIFIED TO REFLECT                      
                      (                    ROMbasic.ASM):03908 ; THE CF MULTIPLICATION AT THE START OF THE EVALUATION PROCESS.                      
                      (                    ROMbasic.ASM):03909                                
F3D7 8EF3A9           (                    ROMbasic.ASM):03910 EXP       LDX  #L84C4         POINT X TO THE CORRECTION FACTOR 
F3DA BDED3B           (                    ROMbasic.ASM):03911           JSR  LBACA          MULTIPLY FPA0 BY (X) 
F3DD BDEEA0           (                    ROMbasic.ASM):03912           JSR  LBC2F          PACK FPA0 AND STORE IT IN FPA3 
F3E0 964F             (                    ROMbasic.ASM):03913           LDA  FP0EXP         *GET EXPONENT OF FPA0 AND 
F3E2 8188             (                    ROMbasic.ASM):03914           CMPA #$88           *COMPARE TO THE MAXIMUM VALUE 
F3E4 2503             (                    ROMbasic.ASM):03915           BLO  L8504          BRANCH IF FPA0 < 128 
F3E6 7EEDCD           (                    ROMbasic.ASM):03916 L8501     JMP  LBB5C          SET FPA0 = 0 OR ‘OV’ ERROR 
F3E9 BDEF5F           (                    ROMbasic.ASM):03917 L8504     JSR  INT            CONVERT FPA0 TO INTEGER 
F3EC 9601             (                    ROMbasic.ASM):03918           LDA  CHARAC         GET LS BYTE OF INTEGER 
F3EE 8B81             (                    ROMbasic.ASM):03919           ADDA #$81           * WAS THE ARGUMENT =127, IF SO 
F3F0 27F4             (                    ROMbasic.ASM):03920           BEQ  L8501          * THEN ‘OV’ ERROR; THIS WILL ALSO ADD THE $80 BIAS 
                      (                    ROMbasic.ASM):03921 ;              * REQUIRED WHEN THE NEW EXPONENT IS CALCULATED BELOW  
F3F2 4A               (                    ROMbasic.ASM):03922           DECA                DECREMENT ONE FROM THE EXPONENT, BECAUSE $81, NOT $80 WAS USED ABOVE 
F3F3 3402             (                    ROMbasic.ASM):03923           PSHS A              SAVE EXPONENT OF INTEGER PORTION ON STACK 
F3F5 8E0040           (                    ROMbasic.ASM):03924           LDX  #V40           POINT (X) TO FPA3 
F3F8 BDEC2A           (                    ROMbasic.ASM):03925           JSR  LB9B9          SUBTRACT FPA0 FROM (X) - GET FRACTIONAL PART OF ARGUMENT 
F3FB 8EF3AE           (                    ROMbasic.ASM):03926           LDX  #L84C9         POINT X TO COEFFICIENTS 
F3FE BDF170           (                    ROMbasic.ASM):03927           JSR  LBEFF          EVALUATE POLYNOMIAL FOR FRACTIONAL PART 
F401 0F62             (                    ROMbasic.ASM):03928           CLR  RESSGN         FORCE THE MANTISSA TO BE POSITIVE 
F403 3502             (                    ROMbasic.ASM):03929           PULS A              GET INTEGER EXPONENT FROM STACK 
F405 BDEDB9           (                    ROMbasic.ASM):03930           JSR  LBB48          * CALCULATE EXPONENT OF NEW FPA0 BY ADDING THE EXPONENTS OF THE 
                      (                    ROMbasic.ASM):03931 ;              * INTEGER AND FRACTIONAL PARTS  
F408 39               (                    ROMbasic.ASM):03932           RTS                  
                      (                    ROMbasic.ASM):03933                                
                      (                    ROMbasic.ASM):03934 ; FIX                          
F409 BDEEDE           (                    ROMbasic.ASM):03935 FIX       JSR  LBC6D          CHECK STATUS OF FPA0 
F40C 2B03             (                    ROMbasic.ASM):03936           BMI  L852C          BRANCH IF FPA0 = NEGATIVE 
F40E 7EEF5F           (                    ROMbasic.ASM):03937 L8529     JMP  INT            CONVERT FPA0 TO INTEGER 
F411 0354             (                    ROMbasic.ASM):03938 L852C     COM  FP0SGN         TOGGLE SIGN OF FPA0 MANTISSA 
F413 8DF9             (                    ROMbasic.ASM):03939           BSR  L8529          CONVERT FPA0 TO INTEGER 
F415 7EF15A           (                    ROMbasic.ASM):03940           JMP  LBEE9          TOGGLE SIGN OF FPA0 
                      (                    ROMbasic.ASM):03941                                
                      (                    ROMbasic.ASM):03942 ; EDIT                         
F418 BDF846           (                    ROMbasic.ASM):03943 EDIT      JSR  L89AE          GET LINE NUMBER FROM BASIC 
F41B 3262             (                    ROMbasic.ASM):03944           LEAS $02,S PURGE RETURN ADDRESS OFF OF THE STACK  
F41D 8601             (                    ROMbasic.ASM):03945 L8538     LDA  #$01           ‘LIST’ FLAG 
F41F 9798             (                    ROMbasic.ASM):03946           STA  VD8            SET FLAG TO LIST LINE 
F421 BDDFCA           (                    ROMbasic.ASM):03947           JSR  LAD01          GO FIND THE LINE NUMBER IN PROGRAM 
F424 1025ED7F         (                    ROMbasic.ASM):03948           LBCS LAED2 ERROR #7 ‘UNDEFINED LINE #'  
F428 BDEA63           (                    ROMbasic.ASM):03949           JSR  LB7C2          GO UNCRUNCH LINE INTO BUFFER AT LINBUF+1 
F42B 1F20             (                    ROMbasic.ASM):03950           TFR  Y,D            PUT ABSOLUTE ADDRESS OF END OF LINE TO ACCD 
F42D 8300F5           (                    ROMbasic.ASM):03951           SUBD #LINBUF+2 SUBTRACT OUT THE START OF LINE  
F430 D797             (                    ROMbasic.ASM):03952           STB  VD7            SAVE LENGTH OF LINE 
F432 DC2B             (                    ROMbasic.ASM):03953 L854D     LDD  BINVAL         GET THE HEX VALUE OF LINE NUMBER 
F434 BDF03D           (                    ROMbasic.ASM):03954           JSR  LBDCC          LIST THE LINE NUMBER ON THE SCREEN 
F437 BDEC1D           (                    ROMbasic.ASM):03955           JSR  LB9AC          PRINT A SPACE 
F43A 8E00F4           (                    ROMbasic.ASM):03956           LDX  #LINBUF+1      POINT X TO BUFFER 
F43D D698             (                    ROMbasic.ASM):03957           LDB  VD8            * CHECK TO SEE IF LINE IS TO BE 
F43F 2625             (                    ROMbasic.ASM):03958           BNE  L8581          * LISTED TO SCREEN - BRANCH IF IT IS 
F441 5F               (                    ROMbasic.ASM):03959 L855C     CLRB                RESET DIGIT ACCUMULATOR - DEFAULT VALUE 
F442 BDF56C           (                    ROMbasic.ASM):03960 L855D     JSR  L8687          GET KEY STROKE 
F445 BDFD11           (                    ROMbasic.ASM):03961           JSR  L90AA          SET CARRY IF NOT NUMERIC 
F448 250B             (                    ROMbasic.ASM):03962           BLO  L8570          BRANCH IF NOT NUMERIC 
F44A 8030             (                    ROMbasic.ASM):03963           SUBA #'0'           MASK OFF ASCII  
F44C 3402             (                    ROMbasic.ASM):03964           PSHS A              SAVE IT ON STACK  
F44E 860A             (                    ROMbasic.ASM):03965           LDA  #10            NUMBER BEING CONVERTED IS BASE 10 
F450 3D               (                    ROMbasic.ASM):03966           MUL                 MULTIPLY ACCUMULATED VALUE BY BASE (10)  
F451 EBE0             (                    ROMbasic.ASM):03967           ADDB ,S+            ADD DIGIT TO ACCUMULATED VALUE  
F453 20ED             (                    ROMbasic.ASM):03968           BRA  L855D          CHECK FOR ANOTHER DIGIT 
F455 C001             (                    ROMbasic.ASM):03969 L8570     SUBB #$01           REPEAT PARAMETER IN ACCB; IF IT  
F457 C901             (                    ROMbasic.ASM):03970           ADCB #$01           IS 0, THEN MAKE IT ‘1’  
F459 8141             (                    ROMbasic.ASM):03971           CMPA #'A'           ABORT?          
F45B 2605             (                    ROMbasic.ASM):03972           BNE  L857D          NO 
F45D BDEBCD           (                    ROMbasic.ASM):03973           JSR  LB958          PRINT CARRIAGE RETURN TO SCREEN 
F460 20BB             (                    ROMbasic.ASM):03974           BRA  L8538          RESTART EDIT PROCESS - CANCEL ALL CHANGES 
F462 814C             (                    ROMbasic.ASM):03975 L857D     CMPA #'L'           LIST?           
F464 260B             (                    ROMbasic.ASM):03976           BNE  L858C          NO 
F466 8D31             (                    ROMbasic.ASM):03977 L8581     BSR  L85B4          LIST THE LINE 
F468 0F98             (                    ROMbasic.ASM):03978           CLR  VD8            RESET THE LIST FLAG TO ‘NO LIST’ 
F46A BDEBCD           (                    ROMbasic.ASM):03979           JSR  LB958          PRINT CARRIAGE RETURN 
F46D 20C3             (                    ROMbasic.ASM):03980           BRA  L854D          GO INTERPRET ANOTHER EDIT COMMAND 
F46F 3262             (                    ROMbasic.ASM):03981 L858A     LEAS $02,S          PURGE RETURN ADDRESS OFF OF THE STACK  
F471 810D             (                    ROMbasic.ASM):03982 L858C     CMPA #CR            ENTER KEY?      
F473 260D             (                    ROMbasic.ASM):03983           BNE  L859D          NO 
F475 8D22             (                    ROMbasic.ASM):03984           BSR  L85B4          ECHO THE LINE TO THE SCREEN 
F477 BDEBCD           (                    ROMbasic.ASM):03985 L8592     JSR  LB958          PRINT CARRIAGE RETURN 
F47A 8E00F4           (                    ROMbasic.ASM):03986           LDX  #LINBUF+1      * RESET BASIC’S INPUT POINTER 
F47D 9F83             (                    ROMbasic.ASM):03987           STX  CHARAD         * TO THE LINE INPUT BUFFER 
F47F 7EDF73           (                    ROMbasic.ASM):03988           JMP  LACA8          GO PUT LINE BACK IN PROGRAM 
F482 8145             (                    ROMbasic.ASM):03989 L859D     CMPA #'E'           EXIT?           
F484 27F1             (                    ROMbasic.ASM):03990           BEQ  L8592          YES - SAME AS ENTER EXCEPT NO ECHO 
F486 8151             (                    ROMbasic.ASM):03991           CMPA #'Q'           QUIT?           
F488 2606             (                    ROMbasic.ASM):03992           BNE  L85AB          NO 
F48A BDEBCD           (                    ROMbasic.ASM):03993           JSR  LB958          PRINT CARRIAGE RETURN TO SCREEN 
F48D 7EDF4A           (                    ROMbasic.ASM):03994           JMP  LAC73          GO TO COMMAND LEVEL - MAKE NO CHANGES 
F490 8D02             (                    ROMbasic.ASM):03995 L85AB     BSR  L85AF          INTERPRET THE REMAINING COMMANDS AS SUBROUTINES 
F492 20AD             (                    ROMbasic.ASM):03996           BRA  L855C          GO INTERPRET ANOTHER EDIT COMMAND 
F494 8120             (                    ROMbasic.ASM):03997 L85AF     CMPA #SPACE         SPACE BAR?      
F496 2610             (                    ROMbasic.ASM):03998           BNE  L85C3          NO 
F498 8C               (                    ROMbasic.ASM):03999 L85B3     FCB  SKP2           SKIP TWO BYTES 
                      (                    ROMbasic.ASM):04000 ; DISPLAY THE NEXT ACCB BYTES OF THE LINE IN THE BUFFER TO THE SCREEN                      
                      (                    ROMbasic.ASM):04001 ;                              
F499 C6F9             (                    ROMbasic.ASM):04002 L85B4     LDB  #LBUFMX-1      250 BYTES MAX IN BUFFER 
F49B A684             (                    ROMbasic.ASM):04003 L85B6     LDA  ,X             GET A CHARACTER FROM BUFFER 
F49D 2708             (                    ROMbasic.ASM):04004           BEQ  L85C2          EXIT IF IT’S A 0 
F49F BDDB17           (                    ROMbasic.ASM):04005           JSR  PUTCHR         SEND CHAR TO CONSOLE OUT 
F4A2 3001             (                    ROMbasic.ASM):04006           LEAX $01,X          MOVE POINTER UP ONE  
F4A4 5A               (                    ROMbasic.ASM):04007           DECB                DECREMENT CHARACTER COUNTER  
F4A5 26F4             (                    ROMbasic.ASM):04008           BNE  L85B6          LOOP IF NOT DONE 
F4A7 39               (                    ROMbasic.ASM):04009 L85C2     RTS                  
F4A8 8144             (                    ROMbasic.ASM):04010 L85C3     CMPA #'D'           DELETE?         
F4AA 2648             (                    ROMbasic.ASM):04011           BNE  L860F          NO 
F4AC 6D84             (                    ROMbasic.ASM):04012 L85C7     TST  ,X             * CHECK FOR END OF LINE 
F4AE 27F7             (                    ROMbasic.ASM):04013           BEQ  L85C2          * AND BRANCH IF SO 
F4B0 8D04             (                    ROMbasic.ASM):04014           BSR  L85D1          REMOVE A CHARACTER 
F4B2 5A               (                    ROMbasic.ASM):04015           DECB                DECREMENT REPEAT PARAMETER  
F4B3 26F7             (                    ROMbasic.ASM):04016           BNE  L85C7          BRANCH IF NOT DONE 
F4B5 39               (                    ROMbasic.ASM):04017           RTS                  
                      (                    ROMbasic.ASM):04018 ; REMOVE ONE CHARACTER FROM BUFFER                      
F4B6 0A97             (                    ROMbasic.ASM):04019 L85D1     DEC  VD7            DECREMENT LENGTH OF BUFFER 
F4B8 311F             (                    ROMbasic.ASM):04020           LEAY $-01,X         POINT Y TO ONE BEFORE CURRENT BUFFER POINTER  
F4BA 3121             (                    ROMbasic.ASM):04021 L85D5     LEAY $01,Y          INCREMENT TEMPORARY BUFFER POINTER  
F4BC A621             (                    ROMbasic.ASM):04022           LDA  $01,Y          GET NEXT CHARACTER 
F4BE A7A4             (                    ROMbasic.ASM):04023           STA  ,Y             PUT IT IN CURRENT POSITION 
F4C0 26F8             (                    ROMbasic.ASM):04024           BNE  L85D5          BRANCH IF NOT END OF LINE 
F4C2 39               (                    ROMbasic.ASM):04025           RTS                  
F4C3 8149             (                    ROMbasic.ASM):04026 L85DE     CMPA #'I' INSERT?         
F4C5 2713             (                    ROMbasic.ASM):04027           BEQ  L85F5          YES 
F4C7 8158             (                    ROMbasic.ASM):04028           CMPA #'X' EXTEND?         
F4C9 270D             (                    ROMbasic.ASM):04029           BEQ  L85F3          YES 
F4CB 8148             (                    ROMbasic.ASM):04030           CMPA #'H' HACK?           
F4CD 265C             (                    ROMbasic.ASM):04031           BNE  L8646          NO 
F4CF 6F84             (                    ROMbasic.ASM):04032           CLR  ,X             TURN CURRENT BUFFER POINTER INTO END OF LINE FLAG 
F4D1 1F10             (                    ROMbasic.ASM):04033           TFR  X,D            PUT CURRENT BUFFER POINTER IN ACCD 
F4D3 8300F5           (                    ROMbasic.ASM):04034           SUBD #LINBUF+2      SUBTRACT INITIAL POINTER POSITION  
F4D6 D797             (                    ROMbasic.ASM):04035           STB  VD7            SAVE NEW BUFFER LENGTH 
F4D8 8DBF             (                    ROMbasic.ASM):04036 L85F3     BSR  L85B4          DISPLAY THE LINE ON THE SCREEN 
F4DA BDF56C           (                    ROMbasic.ASM):04037 L85F5     JSR  L8687          GET A KEYSTROKE 
F4DD 810D             (                    ROMbasic.ASM):04038           CMPA #CR            ENTER KEY?      
F4DF 278E             (                    ROMbasic.ASM):04039           BEQ  L858A          YES - INTERPRET ANOTHER COMMAND - PRINT LINE 
F4E1 811B             (                    ROMbasic.ASM):04040           CMPA #ESC           ESCAPE?         
F4E3 2725             (                    ROMbasic.ASM):04041           BEQ  L8625          YES - RETURN TO COMMAND LEVEL - DON’T PRINT LINE 
F4E5 8108             (                    ROMbasic.ASM):04042           CMPA #BS            BACK SPACE?     
F4E7 2622             (                    ROMbasic.ASM):04043           BNE  L8626          NO 
F4E9 8C00F4           (                    ROMbasic.ASM):04044           CMPX #LINBUF+1      COMPARE POINTER TO START OF BUFFER  
F4EC 27EC             (                    ROMbasic.ASM):04045           BEQ  L85F5          DO NOT ALLOW BS IF AT START 
F4EE 8D45             (                    ROMbasic.ASM):04046           BSR  L8650          MOVE POINTER BACK ONE, BS TO SCREEN 
F4F0 8DC4             (                    ROMbasic.ASM):04047           BSR  L85D1          REMOVE ONE CHARACTER FROM BUFFER 
F4F2 20E6             (                    ROMbasic.ASM):04048           BRA  L85F5          GET INSERT SUB COMMAND 
F4F4 8143             (                    ROMbasic.ASM):04049 L860F     CMPA #'C'           CHANGE?         
F4F6 26CB             (                    ROMbasic.ASM):04050           BNE  L85DE          NO 
F4F8 6D84             (                    ROMbasic.ASM):04051 L8613     TST  ,X             CHECK CURRENT BUFFER CHARACTER 
F4FA 270E             (                    ROMbasic.ASM):04052           BEQ  L8625          BRANCH IF END OF LINE 
F4FC BDF56C           (                    ROMbasic.ASM):04053           JSR  L8687          GET A KEYSTROKE 
F4FF 2502             (                    ROMbasic.ASM):04054           BLO  L861E          BRANCH IF LEGITIMATE KEY 
F501 20F5             (                    ROMbasic.ASM):04055           BRA  L8613          TRY AGAIN IF ILLEGAL KEY 
F503 A780             (                    ROMbasic.ASM):04056 L861E     STA  ,X+            INSERT NEW CHARACTER INTO BUFFER 
F505 8D37             (                    ROMbasic.ASM):04057           BSR  L8659          SEND NEW CHARACTER TO SCREEN 
F507 5A               (                    ROMbasic.ASM):04058           DECB                DECREMENT REPEAT PARAMETER  
F508 26EE             (                    ROMbasic.ASM):04059           BNE  L8613          BRANCH IF NOT DONE 
F50A 39               (                    ROMbasic.ASM):04060 L8625     RTS                  
F50B D697             (                    ROMbasic.ASM):04061 L8626     LDB  VD7            GET LENGTH OF LINE 
F50D C1F9             (                    ROMbasic.ASM):04062           CMPB #LBUFMX-1      COMPARE TO MAXIMUM LENGTH  
F50F 2602             (                    ROMbasic.ASM):04063           BNE  L862E          BRANCH IF NOT AT MAXIMUM 
F511 20C7             (                    ROMbasic.ASM):04064           BRA  L85F5          IGNORE INPUT IF LINE AT MAXIMUM LENGTH 
F513 3410             (                    ROMbasic.ASM):04065 L862E     PSHS X              SAVE CURRENT BUFFER POINTER  
F515 6D80             (                    ROMbasic.ASM):04066 L8630     TST  ,X+            * SCAN THE LINE UNTIL END OF 
F517 26FC             (                    ROMbasic.ASM):04067           BNE  L8630          * LINE (0) IS FOUND 
F519 E682             (                    ROMbasic.ASM):04068 L8634     LDB  ,-X            DECR TEMP LINE POINTER AND GET A CHARACTER 
F51B E701             (                    ROMbasic.ASM):04069           STB  $01,X          PUT CHARACTER BACK DOWN ONE SPOT 
F51D ACE4             (                    ROMbasic.ASM):04070           CMPX ,S             HAVE WE REACHED STARTING POINT?  
F51F 26F8             (                    ROMbasic.ASM):04071           BNE  L8634          NO - KEEP GOING 
F521 3262             (                    ROMbasic.ASM):04072           LEAS $02,S          PURGE BUFFER POINTER FROM STACK  
F523 A780             (                    ROMbasic.ASM):04073           STA  ,X+            INSERT NEW CHARACTER INTO THE LINE 
F525 8D17             (                    ROMbasic.ASM):04074           BSR  L8659          SEND A CHARACTER TO CONSOLE OUT 
F527 0C97             (                    ROMbasic.ASM):04075           INC  VD7            ADD ONE TO BUFFER LENGTH 
F529 20AF             (                    ROMbasic.ASM):04076           BRA  L85F5          GET INSERT SUB COMMAND 
F52B 8108             (                    ROMbasic.ASM):04077 L8646     CMPA #BS            BACKSPACE?      
F52D 2612             (                    ROMbasic.ASM):04078           BNE  L865C          NO 
F52F 8D04             (                    ROMbasic.ASM):04079 L864A     BSR  L8650          MOVE POINTER BACK 1, SEND BS TO SCREEN 
F531 5A               (                    ROMbasic.ASM):04080           DECB                DECREMENT REPEAT PARAMETER  
F532 26FB             (                    ROMbasic.ASM):04081           BNE  L864A          LOOP UNTIL DONE 
F534 39               (                    ROMbasic.ASM):04082           RTS                  
F535 8C00F4           (                    ROMbasic.ASM):04083 L8650     CMPX #LINBUF+1      COMPARE POINTER TO START OF BUFFER  
F538 27D0             (                    ROMbasic.ASM):04084           BEQ  L8625          DO NOT ALLOW BS IF AT START 
F53A 301F             (                    ROMbasic.ASM):04085           LEAX $-01,X         MOVE POINTER BACK ONE  
F53C 8608             (                    ROMbasic.ASM):04086           LDA  #BS            BACK SPACE 
F53E 7EDB17           (                    ROMbasic.ASM):04087 L8659     JMP  PUTCHR         SEND TO CONSOLE OUT 
F541 814B             (                    ROMbasic.ASM):04088 L865C     CMPA #'K'           KILL?           
F543 2705             (                    ROMbasic.ASM):04089           BEQ  L8665          YES 
F545 8053             (                    ROMbasic.ASM):04090           SUBA #'S'           SEARCH?         
F547 2701             (                    ROMbasic.ASM):04091           BEQ  L8665          YES 
F549 39               (                    ROMbasic.ASM):04092           RTS                  
F54A 3402             (                    ROMbasic.ASM):04093 L8665     PSHS A              SAVE KILL/SEARCH FLAG ON STACK  
F54C 8D1E             (                    ROMbasic.ASM):04094           BSR  L8687          * GET A KEYSTROKE (TARGET CHARACTER) 
F54E 3402             (                    ROMbasic.ASM):04095           PSHS A              * AND SAVE IT ON STACK  
F550 A684             (                    ROMbasic.ASM):04096 L866B     LDA  ,X             GET CURRENT BUFFER CHARACTER 
F552 2716             (                    ROMbasic.ASM):04097           BEQ  L8685          AND RETURN IF END OF LINE 
F554 6D61             (                    ROMbasic.ASM):04098           TST  $01,S          CHECK KILL/SEARCH FLAG 
F556 2606             (                    ROMbasic.ASM):04099           BNE  L8679          BRANCH IF KILL 
F558 8DE4             (                    ROMbasic.ASM):04100           BSR  L8659          SEND A CHARACTER TO CONSOLE OUT 
F55A 3001             (                    ROMbasic.ASM):04101           LEAX $01,X          INCREMENT BUFFER POINTER  
F55C 2003             (                    ROMbasic.ASM):04102           BRA  L867C          CHECK NEXT INPUT CHARACTER 
F55E BDF4B6           (                    ROMbasic.ASM):04103 L8679     JSR  L85D1          REMOVE ONE CHARACTER FROM BUFFER 
F561 A684             (                    ROMbasic.ASM):04104 L867C     LDA  ,X             GET CURRENT INPUT CHARACTER 
F563 A1E4             (                    ROMbasic.ASM):04105           CMPA ,S             COMPARE TO TARGET CHARACTER  
F565 26E9             (                    ROMbasic.ASM):04106           BNE  L866B          BRANCH IF NO MATCH 
F567 5A               (                    ROMbasic.ASM):04107           DECB                DECREMENT REPEAT PARAMETER  
F568 26E6             (                    ROMbasic.ASM):04108           BNE  L866B          BRANCH IF NOT DONE 
F56A 35A0             (                    ROMbasic.ASM):04109 L8685     PULS Y,PC           THE Y PULL WILL CLEAN UP THE STACK FOR THE 2 PSHS A  
                      (                    ROMbasic.ASM):04110 ;                              
                      (                    ROMbasic.ASM):04111 ; GET A KEYSTRKE                      
F56C BDDB00           (                    ROMbasic.ASM):04112 L8687     JSR  KEYWAIT        CALL CONSOLE IN : DEV NBR=SCREEN 
F56F 817F             (                    ROMbasic.ASM):04113           CMPA #$7F           GRAPHIC CHARACTER?  
F571 24F9             (                    ROMbasic.ASM):04114           BCC  L8687          YES - GET ANOTHER CHAR 
F573 815F             (                    ROMbasic.ASM):04115           CMPA #$5F           SHIFT UP ARROW (QUIT INSERT)  
F575 2602             (                    ROMbasic.ASM):04116           BNE  L8694          NO 
F577 861B             (                    ROMbasic.ASM):04117           LDA  #ESC           REPLACE W/ESCAPE CODE 
F579 810D             (                    ROMbasic.ASM):04118 L8694     CMPA #CR            ENTER KEY       
F57B 270E             (                    ROMbasic.ASM):04119           BEQ  L86A6          YES 
F57D 811B             (                    ROMbasic.ASM):04120           CMPA #ESC           ESCAPE?         
F57F 270A             (                    ROMbasic.ASM):04121           BEQ  L86A6          YES 
F581 8108             (                    ROMbasic.ASM):04122           CMPA #BS            BACKSPACE?      
F583 2706             (                    ROMbasic.ASM):04123           BEQ  L86A6          YES 
F585 8120             (                    ROMbasic.ASM):04124           CMPA #SPACE         SPACE           
F587 25E3             (                    ROMbasic.ASM):04125           BLO  L8687          GET ANOTHER CHAR IF CONTROL CHAR 
F589 1A01             (                    ROMbasic.ASM):04126           ORCC #$01           SET CARRY       
F58B 39               (                    ROMbasic.ASM):04127 L86A6     RTS                  
                      (                    ROMbasic.ASM):04128                                
                      (                    ROMbasic.ASM):04129 ; TRON                         
F58C 86               (                    ROMbasic.ASM):04130 TRON      FCB  SKP1LD         SKIP ONE BYTE AND LDA #$4F 
                      (                    ROMbasic.ASM):04131                                
                      (                    ROMbasic.ASM):04132 ; TROFF                        
F58D 4F               (                    ROMbasic.ASM):04133 TROFF     CLRA                TROFF FLAG 
F58E 978C             (                    ROMbasic.ASM):04134           STA  TRCFLG         TRON/TROFF FLAG:0=TROFF, <> 0=TRON 
F590 39               (                    ROMbasic.ASM):04135           RTS                  
                      (                    ROMbasic.ASM):04136                                
                      (                    ROMbasic.ASM):04137 ; POS                          
F591 8600             (                    ROMbasic.ASM):04138 POS       LDA  #0             GET DEVICE NUMBER 
F593 D679             (                    ROMbasic.ASM):04139           LDB  LPTPOS         GET PRINT POSITION 
F595 1D               (                    ROMbasic.ASM):04140 LA5E8     SEX                 CONVERT ACCB TO 2 DIGIT SIGNED INTEGER 
F596 7EE7A0           (                    ROMbasic.ASM):04141           JMP  GIVABF         CONVERT ACCD TO FLOATING POINT 
                      (                    ROMbasic.ASM):04142                                
                      (                    ROMbasic.ASM):04143 ; VARPTR                       
F599 BDE51B           (                    ROMbasic.ASM):04144 VARPT     JSR  LB26A          SYNTAX CHECK FOR ‘(‘ 
F59C DC1F             (                    ROMbasic.ASM):04145           LDD  ARYEND         GET ADDR OF END OF ARRAYS 
F59E 3406             (                    ROMbasic.ASM):04146           PSHS B,A            SAVE IT ON STACK 
F5A0 BDE603           (                    ROMbasic.ASM):04147           JSR  LB357          GET VARIABLE DESCRIPTOR 
F5A3 BDE518           (                    ROMbasic.ASM):04148           JSR  LB267          SYNTAX CHECK FOR ‘)‘ 
F5A6 3506             (                    ROMbasic.ASM):04149           PULS A,B            GET END OF ARRAYS ADDR BACK 
F5A8 1E10             (                    ROMbasic.ASM):04150           EXG  X,D            SWAP END OF ARRAYS AND VARIABLE DESCRIPTOR 
F5AA 9C1F             (                    ROMbasic.ASM):04151           CMPX ARYEND         COMPARE TO NEW END OF ARRAYS 
F5AC 2651             (                    ROMbasic.ASM):04152           BNE  L8724          ‘FC’ ERROR IF VARIABLE WAS NOT DEFINED PRIOR TO CALLING VARPTR 
F5AE 7EE7A0           (                    ROMbasic.ASM):04153           JMP  GIVABF         CONVERT VARIABLE DESCRIPTOR INTO A FP NUMBER 
                      (                    ROMbasic.ASM):04154                                
                      (                    ROMbasic.ASM):04155 ; MID$(OLDSTRING,POSITION,LENGTH)=REPLACEMENT                      
F5B1 9D7C             (                    ROMbasic.ASM):04156 L86D6     JSR  GETNCH         GET INPUT CHAR FROM BASIC 
F5B3 BDE51B           (                    ROMbasic.ASM):04157           JSR  LB26A          SYNTAX CHECK FOR ‘(‘ 
F5B6 BDE603           (                    ROMbasic.ASM):04158           JSR  LB357          * GET VARIABLE DESCRIPTOR ADDRESS AND 
F5B9 3410             (                    ROMbasic.ASM):04159           PSHS X              * SAVE IT ON THE STACK 
F5BB EC02             (                    ROMbasic.ASM):04160           LDD  $02,X          POINT ACCD TO START OF OLDSTRING 
F5BD 109321           (                    ROMbasic.ASM):04161           CMPD FRETOP         COMPARE TO START OF CLEARED SPACE 
F5C0 2304             (                    ROMbasic.ASM):04162           BLS  L86EB          BRANCH IF <= 
F5C2 9327             (                    ROMbasic.ASM):04163           SUBD MEMSIZ         SUBTRACT OUT TOP OF CLEARED SPACE 
F5C4 2312             (                    ROMbasic.ASM):04164           BLS  L86FD          BRANCH IF STRING IN STRING SPACE 
F5C6 E684             (                    ROMbasic.ASM):04165 L86EB     LDB  ,X             GET LENGTH OF OLDSTRING 
F5C8 BDE819           (                    ROMbasic.ASM):04166           JSR  LB56D          RESERVE ACCB BYTES IN STRING SPACE 
F5CB 3410             (                    ROMbasic.ASM):04167           PSHS X              SAVE RESERVED SPACE STRING ADDRESS ON STACK 
F5CD AE62             (                    ROMbasic.ASM):04168           LDX  $02,S          POINT X TO OLDSTRING DESCRIPTOR 
F5CF BDE8EF           (                    ROMbasic.ASM):04169           JSR  LB643          MOVE OLDSTRING INTO STRING SPACE 
F5D2 3550             (                    ROMbasic.ASM):04170           PULS X,U            * GET OLDSTRING DESCRIPTOR ADDRESS AND RESERVED STRING 
F5D4 AF42             (                    ROMbasic.ASM):04171           STX  $02,U          * ADDRESS AND SAVE RESERVED ADDRESS AS OLDSTRING ADDRESS 
F5D6 3440             (                    ROMbasic.ASM):04172           PSHS U              SAVE OLDSTRING DESCRIPTOR ADDRESS 
F5D8 BDE9E4           (                    ROMbasic.ASM):04173 L86FD     JSR  LB738          SYNTAX CHECK FOR COMMA AND EVALUATE LENGTH EXPRESSION 
F5DB 3404             (                    ROMbasic.ASM):04174           PSHS B              SAVE POSITION PARAMETER ON STACK 
F5DD 5D               (                    ROMbasic.ASM):04175           TSTB * CHECK POSITION PARAMETER AND BRANCH  
F5DE 271F             (                    ROMbasic.ASM):04176           BEQ  L8724          * IF START OF STRING 
F5E0 C6FF             (                    ROMbasic.ASM):04177           LDB  #$FF           DEFAULT REPLACEMENT LENGTH = $FF 
F5E2 8129             (                    ROMbasic.ASM):04178           CMPA #')'           * CHECK FOR END OF MID$ STATEMENT AND 
F5E4 2703             (                    ROMbasic.ASM):04179           BEQ  L870E          * BRANCH IF AT END OF STATEMENT 
F5E6 BDE9E4           (                    ROMbasic.ASM):04180           JSR  LB738          SYNTAX CHECK FOR COMMA AND EVALUATE LENGTH EXPRESSION 
F5E9 3404             (                    ROMbasic.ASM):04181 L870E     PSHS B              SAVE LENGTH PARAMETER ON STACK 
F5EB BDE518           (                    ROMbasic.ASM):04182           JSR  LB267          SYNTAX CHECK FOR ‘)‘ 
F5EE C6AE             (                    ROMbasic.ASM):04183           LDB  #TOK_EQUALS    TOKEN FOR = 
F5F0 BDE520           (                    ROMbasic.ASM):04184           JSR  LB26F          SYNTAX CHECK FOR “=‘ 
F5F3 8D2E             (                    ROMbasic.ASM):04185           BSR  L8748          EVALUATE REPLACEMENT STRING 
F5F5 1F13             (                    ROMbasic.ASM):04186           TFR  X,U            SAVE REPLACEMENT STRING ADDRESS IN U 
F5F7 AE62             (                    ROMbasic.ASM):04187           LDX  $02,S          POINT X TO OLOSTRING DESCRIPTOR ADDRESS 
F5F9 A684             (                    ROMbasic.ASM):04188           LDA  ,X             GET LENGTH OF OLDSTRING 
F5FB A061             (                    ROMbasic.ASM):04189           SUBA $01,S          SUBTRACT POSITION PARAMETER 
F5FD 2403             (                    ROMbasic.ASM):04190           BCC  L8727          INSERT REPLACEMENT STRING INTO OLDSTRING 
F5FF 7EE6F6           (                    ROMbasic.ASM):04191 L8724     JMP  LB44A          ‘FC’ ERROR IF POSITION > LENGTH OF OLDSTRING 
F602 4C               (                    ROMbasic.ASM):04192 L8727     INCA                * NOW ACCA = NUMBER OF CHARACTERS TO THE RIGHT 
                      (                    ROMbasic.ASM):04193 ;                             * (INCLUSIVE) OF THE POSITION PARAMETER 
F603 A1E4             (                    ROMbasic.ASM):04194           CMPA ,S              
F605 2402             (                    ROMbasic.ASM):04195           BCC  L872E          BRANCH IF NEW STRING WILL FIT IN OLDSTRING 
F607 A7E4             (                    ROMbasic.ASM):04196           STA  ,S             IF NOT, USE AS MUCH OF LENGTH PARAMETER AS WILL FIT 
F609 A661             (                    ROMbasic.ASM):04197 L872E     LDA  $01,S          GET POSITION PARAMETER 
F60B 1E89             (                    ROMbasic.ASM):04198           EXG  A,B            ACCA=LENGTH OF REPL STRING, ACCB=POSITION PARAMETER 
F60D AE02             (                    ROMbasic.ASM):04199           LDX  $02,X          POINT X TO OLDSTRING ADDRESS 
F60F 5A               (                    ROMbasic.ASM):04200           DECB                * BASIC’S POSITION PARAMETER STARTS AT 1; THIS ROUTINE 
                      (                    ROMbasic.ASM):04201 ;                             * WANTS IT TO START AT ZERO 
F610 3A               (                    ROMbasic.ASM):04202           ABX                 POINT X TO POSITION IN OLDSTRING WHERE THE REPLACEMENT WILL GO 
F611 4D               (                    ROMbasic.ASM):04203           TSTA                * IF THE LENGTH OF THE REPLACEMENT STRING IS ZERO 
F612 270D             (                    ROMbasic.ASM):04204           BEQ  L8746          * THEN RETURN 
F614 A1E4             (                    ROMbasic.ASM):04205           CMPA ,S              
F616 2302             (                    ROMbasic.ASM):04206           BLS  L873F          ADJUSTED LENGTH PARAMETER, THEN BRANCH 
F618 A6E4             (                    ROMbasic.ASM):04207           LDA  ,S             OTHERWISE USE AS MUCH ROOM AS IS AVAILABLE 
F61A 1F89             (                    ROMbasic.ASM):04208 L873F     TFR  A,B            SAVE NUMBER OF BYTES TO MOVE IN ACCB 
F61C 1E31             (                    ROMbasic.ASM):04209           EXG  U,X            SWAP SOURCE AND DESTINATION POINTERS 
F61E BDDCD6           (                    ROMbasic.ASM):04210           JSR  LA59A          MOVE (B) BYTES FROM (X) TO (U) 
F621 3596             (                    ROMbasic.ASM):04211 L8746     PULS A,B,X,PC        
F623 BDE407           (                    ROMbasic.ASM):04212 L8748     JSR  LB156          EVALUATE EXPRESSION 
F626 7EE900           (                    ROMbasic.ASM):04213           JMP  LB654          *‘TM’ ERROR IF NUMERIC; RETURN WITH X POINTING 
                      (                    ROMbasic.ASM):04214 ;                             *TO STRING, ACCB = LENGTH 
                      (                    ROMbasic.ASM):04215                                
                      (                    ROMbasic.ASM):04216 ; STRING                       
F629 BDE51B           (                    ROMbasic.ASM):04217 STRING    JSR  LB26A          SYNTAX CHECK FOR ‘(’ 
F62C BDE9B7           (                    ROMbasic.ASM):04218           JSR  LB70B          EVALUATE EXPRESSION; ERROR IF > 255 
F62F 3404             (                    ROMbasic.ASM):04219           PSHS B              SAVE LENGTH OF STRING 
F631 BDE51E           (                    ROMbasic.ASM):04220           JSR  LB26D          SYNTAX CHECK FOR COMMA 
F634 BDE407           (                    ROMbasic.ASM):04221           JSR  LB156          EVALUATE EXPRESSION 
F637 BDE518           (                    ROMbasic.ASM):04222           JSR  LB267          SYNTAX CHECK FOR ‘)‘ 
F63A 9606             (                    ROMbasic.ASM):04223           LDA  VALTYP         GET VARIABLE TYPE 
F63C 2605             (                    ROMbasic.ASM):04224           BNE  L8768          BRANCH IF STRING 
F63E BDE9BA           (                    ROMbasic.ASM):04225           JSR  LB70E          CONVERT FPA0 INTO AN INTEGER IN ACCB 
F641 2003             (                    ROMbasic.ASM):04226           BRA  L876B          SAVE THE STRING IN STRING SPACE 
F643 BDE950           (                    ROMbasic.ASM):04227 L8768     JSR  LB6A4          GET FIRST BYTE OF STRING 
F646 3404             (                    ROMbasic.ASM):04228 L876B     PSHS B              SAVE FIRST BYTE OF EXPRESSION 
F648 E661             (                    ROMbasic.ASM):04229           LDB  $01,S          GET LENGTH OF STRING 
F64A BDE7BB           (                    ROMbasic.ASM):04230           JSR  LB50F          RESERVE ACCB BYTES IN STRING SPACE 
F64D 3506             (                    ROMbasic.ASM):04231           PULS A,B            GET LENGTH OF STRING AND CHARACTER 
F64F 2705             (                    ROMbasic.ASM):04232           BEQ  L877B          BRANCH IF NULL STRING 
F651 A780             (                    ROMbasic.ASM):04233 L8776     STA  ,X+            SAVE A CHARACTER IN STRING SPACE 
F653 5A               (                    ROMbasic.ASM):04234           DECB                DECREMENT LENGTH 
F654 26FB             (                    ROMbasic.ASM):04235           BNE  L8776          BRANCH IF NOT DONE 
F656 7EE947           (                    ROMbasic.ASM):04236 L877B     JMP  LB69B          PUT STRING DESCRIPTOR ONTO STRING STACK 
                      (                    ROMbasic.ASM):04237                                
                      (                    ROMbasic.ASM):04238 ; INSTR                        
F659 BDE51B           (                    ROMbasic.ASM):04239 INSTR     JSR  LB26A          SYNTAX CHECK FOR ‘(‘ 
F65C BDE407           (                    ROMbasic.ASM):04240           JSR  LB156          EVALUATE EXPRESSION 
F65F C601             (                    ROMbasic.ASM):04241           LDB  #$01           DEFAULT POSITION = 1 (SEARCH START) 
F661 3404             (                    ROMbasic.ASM):04242           PSHS B              SAVE START 
F663 9606             (                    ROMbasic.ASM):04243           LDA  VALTYP         GET VARIABLE TYPE 
F665 2610             (                    ROMbasic.ASM):04244           BNE  L879C          BRANCH IF STRING 
F667 BDE9BA           (                    ROMbasic.ASM):04245           JSR  LB70E          CONVERT FPA0 TO INTEGER IN ACCB 
F66A E7E4             (                    ROMbasic.ASM):04246           STB  ,S             SAVE START SEARCH VALUE 
F66C 2791             (                    ROMbasic.ASM):04247           BEQ  L8724          BRANCH IF START SEARCH AT ZERO 
F66E BDE51E           (                    ROMbasic.ASM):04248           JSR  LB26D          SYNTAX CHECK FOR COMMA 
F671 BDE407           (                    ROMbasic.ASM):04249           JSR  LB156          EVALUATE EXPRESSION - SEARCH STRING 
F674 BDE3F7           (                    ROMbasic.ASM):04250           JSR  LB146          ‘TM’ ERROR IF NUMERIC 
F677 9E52             (                    ROMbasic.ASM):04251 L879C     LDX  FPA0+2         SEARCH STRING DESCRIPTOR ADDRESS 
F679 3410             (                    ROMbasic.ASM):04252           PSHS X              SAVE ON THE STACK 
F67B BDE51E           (                    ROMbasic.ASM):04253           JSR  LB26D          SYNTAX CHECK FOR COMMA 
F67E BDF623           (                    ROMbasic.ASM):04254           JSR  L8748          EVALUATE TARGET STRING EXPRESSION 
F681 3414             (                    ROMbasic.ASM):04255           PSHS X,B            SAVE ADDRESS AND LENGTH ON STACK 
F683 BDE518           (                    ROMbasic.ASM):04256           JSR  LB267          SYNTAX CHECK FOR ')' 
F686 AE63             (                    ROMbasic.ASM):04257           LDX  $03,S          * LOAD X WITH SEARCH STRING DESCRIPTOR ADDRESS 
F688 BDE905           (                    ROMbasic.ASM):04258           JSR  LB659          * AND GET THE LENGTH ANDADDRESS OF SEARCH STRING 
F68B 3404             (                    ROMbasic.ASM):04259           PSHS B              SAVE LENGTH ON STACK 
                      (                    ROMbasic.ASM):04260 ;                              
                      (                    ROMbasic.ASM):04261 ; AT THIS POINT THE STACK HAS THE FOLLOWING INFORMATION                      
                      (                    ROMbasic.ASM):04262 ; ON IT: 0,S-SEARCH LENGTH; 1,S-TARGET LENGTH; 2 3,S-TARGET                      
                      (                    ROMbasic.ASM):04263 ; ADDRESS; 4 5,S-SEARCH DESCRIPTOR ADDRESS; 6,S-SEARCH POSITION                      
F68D E166             (                    ROMbasic.ASM):04264           CMPB $06,S          COMPARE LENGTH OF SEARCH STRING TO START 
F68F 2523             (                    ROMbasic.ASM):04265           BLO  L87D9          POSITION; RETURN 0 IF LENGTH < START 
F691 A661             (                    ROMbasic.ASM):04266           LDA  $01,S          GET LENGTH OF TARGET STRING 
F693 271C             (                    ROMbasic.ASM):04267           BEQ  L87D6          BRANCH IF TARGET STRING = NULL 
F695 E666             (                    ROMbasic.ASM):04268           LDB  $06,S          GET START POSITION 
F697 5A               (                    ROMbasic.ASM):04269           DECB                MOVE BACK ONE 
F698 3A               (                    ROMbasic.ASM):04270           ABX  POINT X TO POSITION IN SEARCH STRING WHERE SEARCHING WILL START  
F699 3184             (                    ROMbasic.ASM):04271 L87BE     LEAY ,X             POINT Y TO SEARCH POSITION 
F69B EE62             (                    ROMbasic.ASM):04272           LDU  $02,S          POINT U TO START OF TARGET 
F69D E661             (                    ROMbasic.ASM):04273           LDB  $01,S          LOAD ACCB WITH LENGTH OF TARGET 
F69F A6E4             (                    ROMbasic.ASM):04274           LDA  ,S             LOAD ACCA WITH LENGTH OF SEARCH 
F6A1 A066             (                    ROMbasic.ASM):04275           SUBA $06,S          SUBTRACT SEARCH POSITION FROM SEARCH LENGTH 
F6A3 4C               (                    ROMbasic.ASM):04276           INCA                ADD ONE 
F6A4 A161             (                    ROMbasic.ASM):04277           CMPA $01,S          COMPARE TO TARGET LENGTH 
F6A6 250C             (                    ROMbasic.ASM):04278           BLO  L87D9          RETURN 0 IF TARGET LENGTH > WHAT’S LEFT OF SEARCH STRING 
F6A8 A680             (                    ROMbasic.ASM):04279 L87CD     LDA  ,X+            GET A CHARACTER FROM SEARCH STRING 
F6AA A1C0             (                    ROMbasic.ASM):04280           CMPA ,U+            COMPARE IT TO TARGET STRING 
F6AC 260C             (                    ROMbasic.ASM):04281           BNE  L87DF          BRANCH IF NO MATCH 
F6AE 5A               (                    ROMbasic.ASM):04282           DECB                DECREMENT TARGET LENGTH 
F6AF 26F7             (                    ROMbasic.ASM):04283           BNE  L87CD          CHECK ANOTHER CHARACTER 
F6B1 E666             (                    ROMbasic.ASM):04284 L87D6     LDB  $06,S          GET MATCH POSITION 
F6B3 21               (                    ROMbasic.ASM):04285 L87D8     FCB  SKP1           SKIP NEXT BYTE 
F6B4 5F               (                    ROMbasic.ASM):04286 L87D9     CLRB                MATCH ADDRESS = 0 
F6B5 3267             (                    ROMbasic.ASM):04287           LEAS $07,S          CLEAN UP THE STACK 
F6B7 7EE79F           (                    ROMbasic.ASM):04288           JMP  LB4F3          CONVERT ACCB TO FP NUMBER 
F6BA 6C66             (                    ROMbasic.ASM):04289 L87DF     INC  $06,S          INCREMENT SEARCH POSITION 
F6BC 3021             (                    ROMbasic.ASM):04290           LEAX $01,Y          MOVE X TO NEXT SEARCH POSITION 
F6BE 20D9             (                    ROMbasic.ASM):04291           BRA  L87BE          KEEP LOOKING FOR A MATCH 
                      (                    ROMbasic.ASM):04292                                
                      (                    ROMbasic.ASM):04293 ; EXTENDED BASIC RVEC19 HOOK CODE                      
F6C0 8126             (                    ROMbasic.ASM):04294 XVEC19    CMPA #'&'           * 
F6C2 265C             (                    ROMbasic.ASM):04295           BNE  L8845          * RETURN IF NOT HEX OR OCTAL VARIABLE 
F6C4 3262             (                    ROMbasic.ASM):04296           LEAS $02,S          PURGE RETURN ADDRESS FROM STACK 
                      (                    ROMbasic.ASM):04297 ; PROCESS A VARIABLE PRECEEDED BY A ‘&‘ (&H,&O)                      
F6C6 0F52             (                    ROMbasic.ASM):04298 L87EB     CLR  FPA0+2         * CLEAR BOTTOM TWO 
F6C8 0F53             (                    ROMbasic.ASM):04299           CLR  FPA0+3         * BYTES OF FPA0 
F6CA 8E0052           (                    ROMbasic.ASM):04300           LDX  #FPA0+2        BYTES 2,3 OF FPA0 = (TEMPORARY ACCUMULATOR) 
F6CD 9D7C             (                    ROMbasic.ASM):04301           JSR  GETNCH         GET A CHARACTER FROM BASIC 
F6CF 814F             (                    ROMbasic.ASM):04302           CMPA #'O'            
F6D1 2712             (                    ROMbasic.ASM):04303           BEQ  L880A          YES 
F6D3 8148             (                    ROMbasic.ASM):04304           CMPA #'H'            
F6D5 2723             (                    ROMbasic.ASM):04305           BEQ  L881F          YES 
F6D7 9D82             (                    ROMbasic.ASM):04306           JSR  GETCCH         GET CURRENT INPUT CHARACTER 
F6D9 200C             (                    ROMbasic.ASM):04307           BRA  L880C          DEFAULT TO OCTAL (&O) 
F6DB 8138             (                    ROMbasic.ASM):04308 L8800     CMPA #'8'            
F6DD 1022EE47         (                    ROMbasic.ASM):04309           LBHI LB277           
F6E1 C603             (                    ROMbasic.ASM):04310           LDB  #$03           BASE 8 MULTIPLIER 
F6E3 8D2A             (                    ROMbasic.ASM):04311           BSR  L8834          ADD DIGIT TO TEMPORARY ACCUMULATOR 
                      (                    ROMbasic.ASM):04312 ; EVALUATE AN &O VARIABLE                      
F6E5 9D7C             (                    ROMbasic.ASM):04313 L880A     JSR  GETNCH         GET A CHARACTER FROM BASIC 
F6E7 25F2             (                    ROMbasic.ASM):04314 L880C     BLO  L8800          BRANCH IF NUMERIC 
F6E9 0F50             (                    ROMbasic.ASM):04315 L880E     CLR  FPA0           * CLEAR 2 HIGH ORDER 
F6EB 0F51             (                    ROMbasic.ASM):04316           CLR  FPA0+1         * BYTES OF FPA0 
F6ED 0F06             (                    ROMbasic.ASM):04317           CLR  VALTYP         SET VARXABLE TYPE TO NUMERIC 
F6EF 0F63             (                    ROMbasic.ASM):04318           CLR  FPSBYT         ZERO OUT SUB BYTE OF FPA0 
F6F1 0F54             (                    ROMbasic.ASM):04319           CLR  FP0SGN         ZERO OUT MANTISSA SIGN OF FPA0 
F6F3 C6A0             (                    ROMbasic.ASM):04320           LDB  #$A0           * SET EXPONENT OF FPA0 
F6F5 D74F             (                    ROMbasic.ASM):04321           STB  FP0EXP         * 
F6F7 7EEC8D           (                    ROMbasic.ASM):04322           JMP  LBA1C          GO NORMALIZE FPA0 
                      (                    ROMbasic.ASM):04323 ; EVALUATE AN &H VARIABLE                      
F6FA 9D7C             (                    ROMbasic.ASM):04324 L881F     JSR  GETNCH         GET A CHARACTER FROM BASIC 
F6FC 250B             (                    ROMbasic.ASM):04325           BLO  L882E          BRANCH IF NUMERIC 
F6FE BDE64E           (                    ROMbasic.ASM):04326           JSR  LB3A2          SET CARRY IF NOT ALPHA 
F701 25E6             (                    ROMbasic.ASM):04327           BLO  L880E          BRANCH IF NOT ALPHA OR NUMERIC 
F703 8147             (                    ROMbasic.ASM):04328           CMPA #'G'           CHECK FOR LETTERS A-F 
F705 24E2             (                    ROMbasic.ASM):04329           BCC  L880E          BRANCH IF >= G (ILLEGAL HEX LETTER) 
F707 8007             (                    ROMbasic.ASM):04330           SUBA #7             SUBTRACT ASCII DIFFERENCE BETWEEN A AND 9 
F709 C604             (                    ROMbasic.ASM):04331 L882E     LDB  #$04           BASE 16 DIGIT MULTIPLIER = 2**4 
F70B 8D02             (                    ROMbasic.ASM):04332           BSR  L8834          ADD DIGIT TO TEMPORARY ACCUMULATOR 
F70D 20EB             (                    ROMbasic.ASM):04333           BRA  L881F          KEEP EVALUATING VARIABLE 
F70F 6801             (                    ROMbasic.ASM):04334 L8834     ASL  $01,X          * MULTIPLY TEMPORARY 
F711 6984             (                    ROMbasic.ASM):04335           ROL  ,X             * ACCUMULATOR BY TWO 
F713 1025F5EC         (                    ROMbasic.ASM):04336           LBCS LBA92          ‘OV' OVERFLOW ERROR 
F717 5A               (                    ROMbasic.ASM):04337           DECB                DECREMENT SHIFT COUNTER 
F718 26F5             (                    ROMbasic.ASM):04338           BNE  L8834          MULTIPLY TEMPORARY ACCUMULATOR AGAIN 
F71A 8030             (                    ROMbasic.ASM):04339           SUBA #'0'           MASK OFF ASCII 
F71C AB01             (                    ROMbasic.ASM):04340           ADDA $01,X          * ADD DIGIT TO TEMPORARY 
F71E A701             (                    ROMbasic.ASM):04341           STA  $01,X          * ACCUMULATOR AND SAVE IT 
F720 39               (                    ROMbasic.ASM):04342 L8845     RTS                  
                      (                    ROMbasic.ASM):04343                                
F721 3540             (                    ROMbasic.ASM):04344 XVEC15    PULS U              PULL RETURN ADDRESS AND SAVE IN U REGISTER 
F723 0F06             (                    ROMbasic.ASM):04345           CLR  VALTYP         SET VARIABLE TYPE TO NUMERIC 
F725 9E83             (                    ROMbasic.ASM):04346           LDX  CHARAD         CURRENT INPUT POINTER TO X 
F727 9D7C             (                    ROMbasic.ASM):04347           JSR  GETNCH         GET CHARACTER FROM BASIC 
F729 8126             (                    ROMbasic.ASM):04348           CMPA #'&'           HEX AND OCTAL VARIABLES ARE PRECEEDED BY & 
F72B 2799             (                    ROMbasic.ASM):04349           BEQ  L87EB          PROCESS A ‘&‘ VARIABLE 
F72D 81B0             (                    ROMbasic.ASM):04350           CMPA #TOK_FN        TOKEN FOR FN 
F72F 275E             (                    ROMbasic.ASM):04351           BEQ  L88B4          PROCESS FN CALL 
F731 81FF             (                    ROMbasic.ASM):04352           CMPA #$FF           CHECK FOR SECONDARY TOKEN 
F733 2608             (                    ROMbasic.ASM):04353           BNE  L8862          NOT SECONDARY 
F735 9D7C             (                    ROMbasic.ASM):04354           JSR  GETNCH         GET CHARACTER FROM BASIC 
F737 8183             (                    ROMbasic.ASM):04355           CMPA #TOK_USR       TOKEN FOR USR 
F739 102700AB         (                    ROMbasic.ASM):04356           LBEQ L892C          PROCESS USR CALL 
F73D 9F83             (                    ROMbasic.ASM):04357 L8862     STX  CHARAD         RESTORE BASIC’S INPUT POINTER 
F73F 6EC4             (                    ROMbasic.ASM):04358           JMP  ,U             RETURN TO CALLING ROUTINE 
F741 9E68             (                    ROMbasic.ASM):04359 L8866     LDX  CURLIN         GET CURRENT LINE NUMBER 
F743 3001             (                    ROMbasic.ASM):04360           LEAX $01,X          IN DIRECT MODE? 
F745 26D9             (                    ROMbasic.ASM):04361           BNE  L8845          RETURN IF NOT IN DIRECT MODE 
F747 C616             (                    ROMbasic.ASM):04362           LDB  #2*11          ‘ILLEGAL DIRECT STATEMENT’ ERROR 
F749 7EDF2B           (                    ROMbasic.ASM):04363 L886E     JMP  LAC46          PROCESS ERROR 
                      (                    ROMbasic.ASM):04364                                
F74C AE9F0083         (                    ROMbasic.ASM):04365 DEF       LDX  [CHARAD]       GET TWO INPUT CHARS 
F750 8CFF83           (                    ROMbasic.ASM):04366           CMPX #TOK_FF_USR    TOKEN FOR USR 
F753 10270074         (                    ROMbasic.ASM):04367           LBEQ L890F          BRANCH IF DEF USR 
F757 8D23             (                    ROMbasic.ASM):04368           BSR  L88A1          GET DESCRIPTOR ADDRESS FOR FN VARIABLE NAME 
F759 8DE6             (                    ROMbasic.ASM):04369           BSR  L8866          DON’T ALLOW DEF FN IF IN DIRECT MODE 
F75B BDE51B           (                    ROMbasic.ASM):04370           JSR  LB26A          SYNTAX CHECK FOR ‘(‘ 
F75E C680             (                    ROMbasic.ASM):04371           LDB  #$80           * GET THE FLAG TO INDICATE ARRAY VARIABLE SEARCH DISABLE 
F760 D708             (                    ROMbasic.ASM):04372           STB  ARYDIS         * AND SAVE IT IN THE ARRAY DISABLE FLAG 
F762 BDE603           (                    ROMbasic.ASM):04373           JSR  LB357          GET VARIABLE DESCRIPTOR 
F765 8D25             (                    ROMbasic.ASM):04374           BSR  L88B1          ‘TM’ ERROR IF STRING 
F767 BDE518           (                    ROMbasic.ASM):04375           JSR  LB267          SYNTAX CHECK FOR ‘)‘ 
F76A C6AE             (                    ROMbasic.ASM):04376           LDB  #TOK_EQUALS    TOKEN FOR ‘=‘ 
F76C BDE520           (                    ROMbasic.ASM):04377           JSR  LB26F          DO A SYNTAX CHECK FOR = 
F76F 9E4B             (                    ROMbasic.ASM):04378           LDX  V4B            GET THE ADDRESS OF THE FN NAME DESCRIPTOR 
F771 DC83             (                    ROMbasic.ASM):04379           LDD  CHARAD         * GET THE CURRENT INPUT POINTER ADDRESS AND 
F773 ED84             (                    ROMbasic.ASM):04380           STD  ,X             * SAVE IT IN FIRST 2 BYTES OF THE DESCRIPTOR 
F775 DC39             (                    ROMbasic.ASM):04381           LDD  VARPTR         = GET THE DESCRIPTOR ADDRESS OF THE ARGUMENT 
F777 ED02             (                    ROMbasic.ASM):04382           STD  $02,X          = VARIABLE AND SAVE IT IN THE DESCRIPTOR OF THE FN NAME 
F779 7EE1B5           (                    ROMbasic.ASM):04383           JMP  DATA           MOVE INPUT POINTER TO END OF LINE OR SUBLINE 
F77C C6B0             (                    ROMbasic.ASM):04384 L88A1     LDB  #TOK_FN        TOKEN FOR FN 
F77E BDE520           (                    ROMbasic.ASM):04385           JSR  LB26F          DO A SYNTAX CHECK FOR FN 
F781 C680             (                    ROMbasic.ASM):04386           LDB  #$80           * GET THE FLAG TO INDICATE ARRAY VARIABLE SEARCH DISABLE FLAG 
F783 D708             (                    ROMbasic.ASM):04387           STB  ARYDIS         * AND SAVE IT IN ARRAY VARIABLE FLAG 
F785 8A80             (                    ROMbasic.ASM):04388           ORA  #$80           SET BIT 7 OF CURRENT INPUT CHARACTER TO INDICATE AN FN VARIABLE 
F787 BDE608           (                    ROMbasic.ASM):04389           JSR  LB35C          * GET THE DESCRIPTOR ADDRESS OF THIS 
F78A 9F4B             (                    ROMbasic.ASM):04390           STX  V4B            * VARIABLE AND SAVE IT IN V4B 
F78C 7EE3F4           (                    ROMbasic.ASM):04391 L88B1     JMP  LB143          ‘TM’ ERROR IF STRING VARIABLE 
                      (                    ROMbasic.ASM):04392 ; EVALUATE AN FN CALL                      
F78F 8DEB             (                    ROMbasic.ASM):04393 L88B4     BSR  L88A1          * GET THE DESCRIPTOR OF THE FN NAME 
F791 3410             (                    ROMbasic.ASM):04394           PSHS X              * VARIABLE AND SAVE IT ON THE STACK 
F793 BDE513           (                    ROMbasic.ASM):04395           JSR  LB262          SYNTAX CHECK FOR ‘(‘ & EVALUATE EXPR 
F796 8DF4             (                    ROMbasic.ASM):04396           BSR  L88B1          ‘TM’ ERROR IF STRING VARIABLE 
F798 3540             (                    ROMbasic.ASM):04397           PULS U              POINT U TO FN NAME DESCRIPTOR 
F79A C632             (                    ROMbasic.ASM):04398           LDB  #2*25          ‘UNDEFINED FUNCTION CALL’ ERROR 
F79C AE42             (                    ROMbasic.ASM):04399           LDX  $02,U          POINT X TO ARGUMENT VARIABLE DESCRIPTOR 
F79E 27A9             (                    ROMbasic.ASM):04400           BEQ  L886E          BRANCH TO ERROR HANDLER 
F7A0 109E83           (                    ROMbasic.ASM):04401           LDY  CHARAD         SAVE CURRENT INPUT POINTER IN Y 
F7A3 EEC4             (                    ROMbasic.ASM):04402           LDU  ,U             * POINT U TO START OF FN FORMULA AND 
F7A5 DF83             (                    ROMbasic.ASM):04403           STU  CHARAD         * SAVE IT IN INPUT POINTER 
F7A7 A604             (                    ROMbasic.ASM):04404           LDA  $04,X          = GET FP VALUE OF 
F7A9 3402             (                    ROMbasic.ASM):04405           PSHS A              = ARGUMENT VARIABLE, CURRENT INPUT 
F7AB EC84             (                    ROMbasic.ASM):04406           LDD  ,X             = POINTER, AND ADDRESS OF START 
F7AD EE02             (                    ROMbasic.ASM):04407           LDU  $02,X          = OF FN FORMULA AND SAVE 
F7AF 3476             (                    ROMbasic.ASM):04408           PSHS U,Y,X,B,A      = THEM ON THE STACK 
F7B1 BDEEA6           (                    ROMbasic.ASM):04409           JSR  LBC35          PACK FPA0 AND SAVE IT IN (X) 
F7B4 BDE3F2           (                    ROMbasic.ASM):04410 L88D9     JSR  LB141          EVALUATE FN EXPRESSION 
F7B7 3576             (                    ROMbasic.ASM):04411           PULS A,B,X,Y,U      RESTORE REGISTERS 
F7B9 ED84             (                    ROMbasic.ASM):04412           STD  ,X             * GET THE FP 
F7BB EF02             (                    ROMbasic.ASM):04413           STU  $02,X          * VALUE OF THE ARGUMENT 
F7BD 3502             (                    ROMbasic.ASM):04414           PULS A              * VARIABLE OFF OF THE 
F7BF A704             (                    ROMbasic.ASM):04415           STA  $04,X          * STACK AND RE-SAVE IT 
F7C1 9D82             (                    ROMbasic.ASM):04416           JSR  GETCCH         GET FINAL CHARACTER OF THE FN FORMULA 
F7C3 1026ED61         (                    ROMbasic.ASM):04417           LBNE LB277          ‘SYNTAX’ ERROR IF NOT END OF LINE 
F7C7 109F83           (                    ROMbasic.ASM):04418           STY  CHARAD         RESTORE INPUT POINTER 
F7CA 39               (                    ROMbasic.ASM):04419 L88EF     RTS                  
                      (                    ROMbasic.ASM):04420                                
                      (                    ROMbasic.ASM):04421                                
                      (                    ROMbasic.ASM):04422                                
                      (                    ROMbasic.ASM):04423 ; DEF USR                      
F7CB 9D7C             (                    ROMbasic.ASM):04424 L890F     JSR  GETNCH         SKIP PAST SECOND BYTE OF DEF USR TOKEN 
F7CD 8D09             (                    ROMbasic.ASM):04425           BSR  L891C          GET FN NUMBER 
F7CF 3410             (                    ROMbasic.ASM):04426           PSHS X              SAVE FN EXEC ADDRESS STORAGE LOC 
F7D1 8D2D             (                    ROMbasic.ASM):04427           BSR  L8944          CALCULATE EXEC ADDRESS 
F7D3 3540             (                    ROMbasic.ASM):04428           PULS U              GET FN EXEC ADDRESS STORAGE LOC 
F7D5 AFC4             (                    ROMbasic.ASM):04429           STX  ,U             SAVE EXEC ADDRESS 
F7D7 39               (                    ROMbasic.ASM):04430           RTS                  
F7D8 5F               (                    ROMbasic.ASM):04431 L891C     CLRB                DEFAULT TO USR0 IF NO ARGUMENT 
F7D9 9D7C             (                    ROMbasic.ASM):04432           JSR  GETNCH         GET A CHARACTER FROM BASIC 
F7DB 2406             (                    ROMbasic.ASM):04433           BCC  L8927          BRANCH IF NOT NUMERIC 
F7DD 8030             (                    ROMbasic.ASM):04434           SUBA #'0'           MASK OFF ASCII 
F7DF 1F89             (                    ROMbasic.ASM):04435           TFR  A,B            SAVE USR NUMBER IN ACCB 
F7E1 9D7C             (                    ROMbasic.ASM):04436           JSR  GETNCH         GET A CHARACTER FROM BASIC 
F7E3 9E8D             (                    ROMbasic.ASM):04437 L8927     LDX  USRADR         GET ADDRESS OF STORAGE LOCs FOR USR ADDRESS 
F7E5 58               (                    ROMbasic.ASM):04438           ASLB                X2 - 2 BYTES/USR ADDRESS 
F7E6 3A               (                    ROMbasic.ASM):04439           ABX                 ADD OFFSET TO START ADDRESS OF STORAGE LOCs 
F7E7 39               (                    ROMbasic.ASM):04440           RTS                  
                      (                    ROMbasic.ASM):04441 ; PROCESS A USR CALL                      
F7E8 8DEE             (                    ROMbasic.ASM):04442 L892C     BSR  L891C          GET STORAGE LOC OF EXEC ADDRESS FOR USR N 
F7EA AE84             (                    ROMbasic.ASM):04443           LDX  ,X             * GET EXEC ADDRESS AND 
F7EC 3410             (                    ROMbasic.ASM):04444           PSHS X              * PUSH IT ONTO STACK 
F7EE BDE513           (                    ROMbasic.ASM):04445           JSR  LB262          SYNTAX CHECK FOR ‘(‘ & EVALUATE EXPR 
F7F1 8E004F           (                    ROMbasic.ASM):04446           LDX  #FP0EXP        POINT X TO FPA0 
F7F4 9606             (                    ROMbasic.ASM):04447           LDA  VALTYP         GET VARIABLE TYPE 
F7F6 2707             (                    ROMbasic.ASM):04448           BEQ  L8943          BRANCH IF NUMERIC, STRING IF <> 0 
F7F8 BDE903           (                    ROMbasic.ASM):04449           JSR  LB657          GET LENGTH & ADDRESS OF STRING VARIABLE 
F7FB 9E52             (                    ROMbasic.ASM):04450           LDX  FPA0+2         GET POINTER TO STRING DESCRIPTOR 
F7FD 9606             (                    ROMbasic.ASM):04451           LDA  VALTYP         GET VARIABLE TYPE 
F7FF 39               (                    ROMbasic.ASM):04452 L8943     RTS                 JUMP TO USR ROUTINE (PSHS X ABOVE) 
F800 C6AE             (                    ROMbasic.ASM):04453 L8944     LDB  #TOK_EQUALS    TOKEN FOR ‘=‘ 
F802 BDE520           (                    ROMbasic.ASM):04454           JSR  LB26F          DO A SYNTAX CHECK FOR = 
F805 7EE9E9           (                    ROMbasic.ASM):04455           JMP  LB73D          EVALUATE EXPRESSION, RETURN VALUE IN X 
                      (                    ROMbasic.ASM):04456 ; DEL                          
F808 1027EEEA         (                    ROMbasic.ASM):04457 DEL       LBEQ LB44A          FC’ ERROR IF NO ARGUMENT 
F80C BDE23C           (                    ROMbasic.ASM):04458           JSR  LAF67          CONVERT A DECIMAL BASIC NUMBER TO BINARY 
F80F BDDFCA           (                    ROMbasic.ASM):04459           JSR  LAD01          FIND RAM ADDRESS OF START OF A BASIC LINE 
F812 9F93             (                    ROMbasic.ASM):04460           STX  VD3            SAVE RAM ADDRESS OF STARTING LINE NUMBER 
F814 9D82             (                    ROMbasic.ASM):04461           JSR  GETCCH         GET CURRENT INPUT CHARACTER 
F816 2710             (                    ROMbasic.ASM):04462           BEQ  L8990          BRANCH IF END OF LINE 
F818 81A7             (                    ROMbasic.ASM):04463           CMPA #TOK_MINUS     TOKEN FOR '-' 
F81A 263B             (                    ROMbasic.ASM):04464           BNE  L89BF          TERMINATE COMMAND IF LINE NUMBER NOT FOLLOWED BY '-' 
F81C 9D7C             (                    ROMbasic.ASM):04465           JSR  GETNCH         GET A CHARACTER FROM BASIC 
F81E 2704             (                    ROMbasic.ASM):04466           BEQ  L898C          IF END OF LINE, USE DEFAULT ENDING LINE NUMBER 
F820 8D24             (                    ROMbasic.ASM):04467           BSR  L89AE          * CONVERT ENDING LINE NUMBER TO BINARY 
F822 2004             (                    ROMbasic.ASM):04468           BRA  L8990          * AND SAVE IT IN BINVAL 
F824 86FF             (                    ROMbasic.ASM):04469 L898C     LDA  #$FF           = USE $FFXX AS DEFAULT ENDING 
F826 972B             (                    ROMbasic.ASM):04470           STA  BINVAL         = LINE NUMBER - SAVE IT IN BINVAL 
F828 DE93             (                    ROMbasic.ASM):04471 L8990     LDU  VD3            POINT U TO STARTING LINE NUMBER ADDRESS 
F82A 8C               (                    ROMbasic.ASM):04472 L8992     FCB  SKP2           SKIP TWO BYTES 
F82B EEC4             (                    ROMbasic.ASM):04473 L8993     LDU  ,U             POINT U TO START OF NEXT LINE 
F82D ECC4             (                    ROMbasic.ASM):04474           LDD  ,U             CHECK FOR END OF PROGRAM 
F82F 2706             (                    ROMbasic.ASM):04475           BEQ  L899F          BRANCH IF END OF PROGRAM 
F831 EC42             (                    ROMbasic.ASM):04476           LDD  $02,U          LOAD ACCD WITH THIS LINE’S NUMBER 
F833 932B             (                    ROMbasic.ASM):04477           SUBD BINVAL         SUBTRACT ENDING LINE NUMBER ADDRESS 
F835 23F4             (                    ROMbasic.ASM):04478           BLS  L8993          BRANCH IF = < ENDING LINE NUMBER 
F837 9E93             (                    ROMbasic.ASM):04479 L899F     LDX  VD3            GET STARTING LINE NUMBER 
F839 8D15             (                    ROMbasic.ASM):04480           BSR  L89B8          MOVE (U) TO (X) UNTIL END OF PROGRAM 
F83B BDDFEA           (                    ROMbasic.ASM):04481           JSR  LAD21          RESET BASIC’S INPUT POINTER AND ERASE VARIABLES 
F83E 9E93             (                    ROMbasic.ASM):04482           LDX  VD3            GET STARTING LINE NUMBER ADDRESS 
F840 BDDFBA           (                    ROMbasic.ASM):04483           JSR  LACF1          RECOMPUTE START OF NEXT LINE ADDRESSES 
F843 7EDF4A           (                    ROMbasic.ASM):04484           JMP  LAC73          JUMP TO BASIC’S MAIN COMMAND LOOP 
F846 BDE23C           (                    ROMbasic.ASM):04485 L89AE     JSR  LAF67          GO GET LINE NUMBER CONVERTED TO BINARY 
F849 7EDCDF           (                    ROMbasic.ASM):04486           JMP  LA5C7          MAKE SURE THERE’S NO MORE ON THIS LINE 
F84C A6C0             (                    ROMbasic.ASM):04487 L89B4     LDA  ,U+            GET A BYTE FROM (U) 
F84E A780             (                    ROMbasic.ASM):04488           STA  ,X+            MOVE THE BYTE TO (X) 
F850 11931B           (                    ROMbasic.ASM):04489 L89B8     CMPU VARTAB         COMPARE TO END OF BASIC 
F853 26F7             (                    ROMbasic.ASM):04490           BNE  L89B4          BRANCH IF NOT AT END 
F855 9F1B             (                    ROMbasic.ASM):04491           STX  VARTAB         SAVE (X) AS NEW END OF BASIC 
F857 39               (                    ROMbasic.ASM):04492 L89BF     RTS                  
                      (                    ROMbasic.ASM):04493                                
                      (                    ROMbasic.ASM):04494                                
F858 BDF741           (                    ROMbasic.ASM):04495 L89C0     JSR  L8866          ‘BS’ ERROR IF IN DIRECT MODE 
F85B 9D7C             (                    ROMbasic.ASM):04496           JSR  GETNCH         GET A CHAR FROM BASIC 
F85D 8122             (                    ROMbasic.ASM):04497 L89D2     CMPA #'"'           CHECK FOR PROMPT STRING 
F85F 260B             (                    ROMbasic.ASM):04498           BNE  L89E1          BRANCH IF NO PROMPT STRING 
F861 BDE4F5           (                    ROMbasic.ASM):04499           JSR  LB244          STRIP OFF PROMPT STRING & PUT IT ON STRING STACK 
F864 C63B             (                    ROMbasic.ASM):04500           LDB  #';'           * 
F866 BDE520           (                    ROMbasic.ASM):04501           JSR  LB26F          * DO A SYNTAX CHECK FOR; 
F869 BDEC10           (                    ROMbasic.ASM):04502           JSR  LB99F          REMOVE PROMPT STRING FROM STRING STACK & SEND TO CONSOLE OUT 
F86C 327E             (                    ROMbasic.ASM):04503 L89E1     LEAS $-02,S         RESERVE TWO STORAGE SLOTS ON STACK 
F86E BDE2F1           (                    ROMbasic.ASM):04504           JSR  LB035          INPUT A LINE FROM CURRENT INPUT DEVICE 
F871 3262             (                    ROMbasic.ASM):04505           LEAS $02,S          CLEAN UP THE STACK 
F873 BDE603           (                    ROMbasic.ASM):04506           JSR  LB357          SEARCH FOR A VARIABLE 
F876 9F3B             (                    ROMbasic.ASM):04507           STX  VARDES         SAVE POINTER TO VARIABLE DESCRIPTOR 
F878 BDE3F7           (                    ROMbasic.ASM):04508           JSR  LB146          ‘TM’ ERROR IF VARIABLE TYPE = NUMERIC 
F87B 8E00F3           (                    ROMbasic.ASM):04509           LDX  #LINBUF        POINT X TO THE STRING BUFFER WHERE THE INPUT STRING WAS STORED 
F87E 4F               (                    ROMbasic.ASM):04510           CLRA                TERMINATOR CHARACTER 0 (END OF LINE) 
F87F BDE7C8           (                    ROMbasic.ASM):04511           JSR  LB51A          PARSE THE INPUT STRING AND STORE IT IN THE STRING SPACE 
F882 7EE279           (                    ROMbasic.ASM):04512           JMP  LAFA4          REMOVE DESCRIPTOR FROM STRING STACK 
F885 BDE23C           (                    ROMbasic.ASM):04513 L89FC     JSR  LAF67          STRIP A DECIMAL NUMBER FROM BASIC INPUT LINE 
F888 9E2B             (                    ROMbasic.ASM):04514           LDX  BINVAL         GET BINARY VALUE 
F88A 39               (                    ROMbasic.ASM):04515           RTS                  
F88B 9E91             (                    ROMbasic.ASM):04516 L8A02     LDX  VD1            GET CURRENT OLD NUMBER BEING RENUMBERED 
F88D 9F2B             (                    ROMbasic.ASM):04517 L8A04     STX  BINVAL         SAVE THE LINE NUMBER BEING SEARCHED FOR 
F88F 7EDFCA           (                    ROMbasic.ASM):04518           JMP  LAD01          GO FIND THE LINE NUMBER IN BASIC PROGRAM 
                      (                    ROMbasic.ASM):04519                                
                      (                    ROMbasic.ASM):04520 ; RENUM                        
F892 BDDFEF           (                    ROMbasic.ASM):04521 RENUM     JSR  LAD26          ERASE VARIABLES 
F895 CC000A           (                    ROMbasic.ASM):04522           LDD  #10            DEFAULT LINE NUMBER INTERVAL 
F898 DD95             (                    ROMbasic.ASM):04523           STD  VD5            SAVE DEFAULT RENUMBER START LINE NUMBER 
F89A DD8F             (                    ROMbasic.ASM):04524           STD  VCF            SAVE DEFAULT INTERVAL 
F89C 5F               (                    ROMbasic.ASM):04525           CLRB                NOW ACCD = 0 
F89D DD91             (                    ROMbasic.ASM):04526           STD  VD1            DEFAULT LINE NUMBER OF WHERE TO START RENUMBERING 
F89F 9D82             (                    ROMbasic.ASM):04527           JSR  GETCCH         GET CURRENT INPUT CHARACTER 
F8A1 2406             (                    ROMbasic.ASM):04528           BCC  L8A20          BRANCH IF NOT NUMERIC 
F8A3 8DE0             (                    ROMbasic.ASM):04529           BSR  L89FC          CONVERT DECIMAL NUMBER IN BASIC PROGRAM TO BINARY 
F8A5 9F95             (                    ROMbasic.ASM):04530           STX  VD5            SAVE LINE NUMBER WHERE RENUMBERING STARTS 
F8A7 9D82             (                    ROMbasic.ASM):04531           JSR  GETCCH         GET CURRENT INPUT CHARACTER 
F8A9 271B             (                    ROMbasic.ASM):04532 L8A20     BEQ  L8A3D          BRANCH IF END OF LINE 
F8AB BDE51E           (                    ROMbasic.ASM):04533           JSR  LB26D          SYNTAX CHECK FOR COMMA 
F8AE 2406             (                    ROMbasic.ASM):04534           BCC  L8A2D          BRANCH IF NEXT CHARACTER NOT NUMERIC 
F8B0 8DD3             (                    ROMbasic.ASM):04535           BSR  L89FC          CONVERT DECIMAL NUMBER IN BASIC PROGRAM TO BINARY 
F8B2 9F91             (                    ROMbasic.ASM):04536           STX  VD1            SAVE NEW RENUMBER LINE 
F8B4 9D82             (                    ROMbasic.ASM):04537           JSR  GETCCH         GET CURRENT INPUT CHARACTER 
F8B6 270E             (                    ROMbasic.ASM):04538 L8A2D     BEQ  L8A3D          BRANCH IF END OF LINE 
F8B8 BDE51E           (                    ROMbasic.ASM):04539           JSR  LB26D          SYNTAX CHECK FOR COMMA 
F8BB 2406             (                    ROMbasic.ASM):04540           BCC  L8A3A          BRANCH IF NEXT CHARACTER NOT NUMERIC 
F8BD 8DC6             (                    ROMbasic.ASM):04541           BSR  L89FC          CONVERT DECIMAL NUMBER IN BASIC PROGRAM TO BINARY 
F8BF 9F8F             (                    ROMbasic.ASM):04542           STX  VCF            SAVE NEW INTERVAL 
F8C1 2749             (                    ROMbasic.ASM):04543           BEQ  L8A83          ‘FC' ERROR 
F8C3 BDDCDF           (                    ROMbasic.ASM):04544 L8A3A     JSR  LA5C7          CHECK FOR MORE CHARACTERS ON LINE - ‘SYNTAX’ ERROR IF ANY 
F8C6 8DC3             (                    ROMbasic.ASM):04545 L8A3D     BSR  L8A02          GO GET ADDRESS OF OLD NUMBER BEING RENUMBERED 
F8C8 9F93             (                    ROMbasic.ASM):04546           STX  VD3            SAVE ADDRESS 
F8CA 9E95             (                    ROMbasic.ASM):04547           LDX  VD5            GET NEXT RENUMBERED LINE NUMBER TO USE 
F8CC 8DBF             (                    ROMbasic.ASM):04548           BSR  L8A04          FIND THE LINE NUMBER IN THE BASIC PROGRAM 
F8CE 9C93             (                    ROMbasic.ASM):04549           CMPX VD3            COMPARE TO ADDRESS OF OLD LINE NUMBER 
F8D0 253A             (                    ROMbasic.ASM):04550           BLO  L8A83          ‘FC’ ERROR IF NEW ADDRESS < OLD ADDRESS 
F8D2 8D1C             (                    ROMbasic.ASM):04551           BSR  L8A67          MAKE SURE RENUMBERED LINE NUMBERS WILL BE IN RANGE 
F8D4 BDF966           (                    ROMbasic.ASM):04552           JSR  L8ADD          CONVERT ASCII LINE NUMBERS TO ‘EXPANDED’ BINARY 
F8D7 BDDFB8           (                    ROMbasic.ASM):04553           JSR  LACEF          RECALCULATE NEXT LINE RAM ADDRESSES 
F8DA 8DAF             (                    ROMbasic.ASM):04554           BSR  L8A02          GET RAM ADDRESS OF FIRST LINE TO BE RENUMBERED 
F8DC 9F93             (                    ROMbasic.ASM):04555           STX  VD3            SAVE IT 
F8DE 8D3A             (                    ROMbasic.ASM):04556           BSR  L8A91          MAKE SURE LINE NUMBERS EXIST 
F8E0 8D0F             (                    ROMbasic.ASM):04557           BSR  L8A68          INSERT NEW LINE NUMBERS IN LINE HEADERS 
F8E2 8D36             (                    ROMbasic.ASM):04558           BSR  L8A91          INSERT NEW LINE NUMBERS IN PROGRAM STATEMENTS 
F8E4 BDFA01           (                    ROMbasic.ASM):04559           JSR  L8B7B          CONVERT PACKED BINARY LINE NUMBERS TO ASCII 
F8E7 BDDFEF           (                    ROMbasic.ASM):04560           JSR  LAD26          ERASE VARIABLES 
F8EA BDDFB8           (                    ROMbasic.ASM):04561           JSR  LACEF          RECALCULATE NEXT LINE RAM ADDRESS 
F8ED 7EDF4A           (                    ROMbasic.ASM):04562           JMP  LAC73          GO BACK TO BASIC’S MAIN LOOP 
F8F0 86               (                    ROMbasic.ASM):04563 L8A67     FCB  SKP1LD         SKIP ONE BYTE - LDA #$4F 
F8F1 4F               (                    ROMbasic.ASM):04564 L8A68     CLRA                NEW LINE NUMBER FLAG - 0; INSERT NEW LINE NUMBERS 
F8F2 9798             (                    ROMbasic.ASM):04565           STA  VD8            SAVE NEW LINE NUMBER FLAG; 0 = INSERT NEW NUMBERS 
F8F4 9E93             (                    ROMbasic.ASM):04566           LDX  VD3            GET ADDRESS OF OLD LINE NUMBER BEING RENUMBERED 
F8F6 DC95             (                    ROMbasic.ASM):04567           LDD  VD5            GET THE CURRENT RENUMBERED LINE NUMBER 
F8F8 8D15             (                    ROMbasic.ASM):04568           BSR  L8A86          RETURN IF END OF PROGRAM 
F8FA 0D98             (                    ROMbasic.ASM):04569 L8A71     TST  VD8            CHECK NEW LINE NUMBER FLAG 
F8FC 2602             (                    ROMbasic.ASM):04570           BNE  L8A77          BRANCH IF NOT INSERTING NEW LINE NUMBERS 
F8FE ED02             (                    ROMbasic.ASM):04571           STD  $02,X          STORE THE NEW LINE NUMBER IN THE BASIC PROGRAM 
F900 AE84             (                    ROMbasic.ASM):04572 L8A77     LDX  ,X             POINT X TO THE NEXT LINE IN BASIC 
F902 8D0B             (                    ROMbasic.ASM):04573           BSR  L8A86          RETURN IF END OF PROGRAM 
F904 D38F             (                    ROMbasic.ASM):04574           ADDD VCF            ADD INTERVAL TO CURRENT RENUMBERED LINE NUMBER 
F906 2504             (                    ROMbasic.ASM):04575           BLO  L8A83          ‘FC’ ERROR IF LINE NUMBER > $FFFF 
F908 81FA             (                    ROMbasic.ASM):04576           CMPA #MAXLIN        LARGEST LINE NUMBER = $F9FF 
F90A 25EE             (                    ROMbasic.ASM):04577           BLO  L8A71          BRANCH IF LEGAL LINE NUMBER 
F90C 7EE6F6           (                    ROMbasic.ASM):04578 L8A83     JMP  LB44A          ‘FC’ ERROR IF LINE NUMBER MS BYTE > $F9 
                      (                    ROMbasic.ASM):04579 ; TEST THE TWO BYTES POINTED TO BY (X).                      
                      (                    ROMbasic.ASM):04580 ; NORMAL RETURN IF <> 0. IF = 0 (END OF                      
                      (                    ROMbasic.ASM):04581 ; PROGRAM) RETURN IS PULLED OFF STACK AND                      
                      (                    ROMbasic.ASM):04582 ; YOU RETURN TO PREVIOUS SUBROUTINE CALL.                      
F90F 3406             (                    ROMbasic.ASM):04583 L8A86     PSHS B,A            SAVE ACCD 
F911 EC84             (                    ROMbasic.ASM):04584           LDD  ,X             TEST THE 2 BYTES POINTED TO BY X 
F913 3506             (                    ROMbasic.ASM):04585           PULS A,B            RESTORE ACCD 
F915 2602             (                    ROMbasic.ASM):04586           BNE  L8A90          BRANCH IF NOT END OF PROGRAM 
F917 3262             (                    ROMbasic.ASM):04587           LEAS $02,S          PURGE RETURN ADDRESS FROM STACK 
F919 39               (                    ROMbasic.ASM):04588 L8A90     RTS                  
F91A 9E19             (                    ROMbasic.ASM):04589 L8A91     LDX  TXTTAB         GET START OF BASIC PROGRAM 
F91C 301F             (                    ROMbasic.ASM):04590           LEAX $-01,X         MOVE POINTER BACK ONE 
F91E 3001             (                    ROMbasic.ASM):04591 L8A95     LEAX $01,X          MOVE POINTER UP ONE 
F920 8DED             (                    ROMbasic.ASM):04592           BSR  L8A86          RETURN IF END OF PROGRAM 
F922 3003             (                    ROMbasic.ASM):04593 L8A99     LEAX $03,X          SKIP OVER NEXT LINE ADDRESS AND LINE NUMBER 
F924 3001             (                    ROMbasic.ASM):04594 L8A9B     LEAX $01,X          MOVE POINTER TO NEXT CHARACTER 
F926 A684             (                    ROMbasic.ASM):04595           LDA  ,X             CHECK CURRENT CHARACTER 
F928 27F4             (                    ROMbasic.ASM):04596           BEQ  L8A95          BRANCH IF END OF LINE 
F92A 9F0F             (                    ROMbasic.ASM):04597           STX  TEMPTR         SAVE CURRENT POINTER 
F92C 4A               (                    ROMbasic.ASM):04598           DECA                = 
F92D 270C             (                    ROMbasic.ASM):04599           BEQ  L8AB2          =BRANCH IF START OF PACKED NUMERIC LINE 
F92F 4A               (                    ROMbasic.ASM):04600           DECA                * 
F930 272A             (                    ROMbasic.ASM):04601           BEQ  L8AD3          *BRANCH IF LINE NUMBER EXISTS 
F932 4A               (                    ROMbasic.ASM):04602           DECA                = 
F933 26EF             (                    ROMbasic.ASM):04603           BNE  L8A9B          =MOVE TO NEXT CHARACTER IF > 3 
F935 8603             (                    ROMbasic.ASM):04604 L8AAC     LDA  #$03           * SET 1ST BYTE = 3 TO INDICATE LINE 
F937 A780             (                    ROMbasic.ASM):04605           STA  ,X+            * NUMBER DOESN’T CURRENTLY EXIST 
F939 20E7             (                    ROMbasic.ASM):04606           BRA  L8A99          GO GET ANOTHER CHARACTER 
F93B EC01             (                    ROMbasic.ASM):04607 L8AB2     LDD  $01,X          GET MS BYTE OF LINE NUMBER 
F93D 6A02             (                    ROMbasic.ASM):04608           DEC  $02,X          DECREMENT ZERO CHECK BYTE 
F93F 2701             (                    ROMbasic.ASM):04609           BEQ  L8AB9          BRANCH IF MS BYTE <> 0 
F941 4F               (                    ROMbasic.ASM):04610           CLRA                CLEAR MS BYTE 
F942 E603             (                    ROMbasic.ASM):04611 L8AB9     LDB  $03,X          GET LS BYTE OF LINE NUMBER 
F944 6A04             (                    ROMbasic.ASM):04612           DEC  $04,X          DECREMENT ZERO CHECK FLAG 
F946 2701             (                    ROMbasic.ASM):04613           BEQ  L8AC0          BRANCH IF IS BYTE <> 0 
F948 5F               (                    ROMbasic.ASM):04614           CLRB                CLEAR LS BYTE 
F949 ED01             (                    ROMbasic.ASM):04615 L8AC0     STD  $01,X          SAVE BINARY LINE NUMBER 
F94B DD2B             (                    ROMbasic.ASM):04616           STD  BINVAL         SAVE TRIAL LINE NUMBER 
F94D BDDFCA           (                    ROMbasic.ASM):04617           JSR  LAD01          FIND RAM ADDRESS OF A BASIC LINE NUMBER 
F950 9E0F             (                    ROMbasic.ASM):04618 L8AC7     LDX  TEMPTR         GET BACK POINTER TO START OF PACKED LINE NUMBER 
F952 25E1             (                    ROMbasic.ASM):04619           BLO  L8AAC          BRANCH IF NO LINE NUMBER MATCH FOUND 
F954 DC47             (                    ROMbasic.ASM):04620           LDD  V47            GET START ADDRESS OF LINE NUMBER 
F956 6C80             (                    ROMbasic.ASM):04621           INC  ,X+            * SET 1ST BYTE = 2, TO INDICATE LINE NUMBER EXISTS IF CHECKING FOR 
                      (                    ROMbasic.ASM):04622 ;                             * EXISTENCE OF LINE NUMBER, SET IT = 1 IF INSERTING LINE NUMBERS  
F958 ED84             (                    ROMbasic.ASM):04623           STD  ,X             SAVE RAM ADDRESS OF CORRECT LINE NUMBER 
F95A 20C6             (                    ROMbasic.ASM):04624           BRA  L8A99          GO GET ANOTHER CHARACTER 
F95C 6F84             (                    ROMbasic.ASM):04625 L8AD3     CLR  ,X             CLEAR CARRY FLAG AND 1ST BYTE 
F95E AE01             (                    ROMbasic.ASM):04626           LDX  $01,X          POINT X TO RAM ADDRESS OF CORRECT LINE NUMBER 
F960 AE02             (                    ROMbasic.ASM):04627           LDX  $02,X          PUT CORRECT LINE NUMBER INTO (X) 
F962 9F47             (                    ROMbasic.ASM):04628           STX  V47            SAVE IT TEMPORARILY 
F964 20EA             (                    ROMbasic.ASM):04629           BRA  L8AC7          GO INSERT IT INTO BASIC LINE 
F966 9E19             (                    ROMbasic.ASM):04630 L8ADD     LDX  TXTTAB         GET BEGINNING OF BASIC PROGRAM 
F968 2004             (                    ROMbasic.ASM):04631           BRA  L8AE5           
F96A 9E83             (                    ROMbasic.ASM):04632 L8AE1     LDX  CHARAD         *GET CURRENT INPUT POINTER 
F96C 3001             (                    ROMbasic.ASM):04633           LEAX $01,X          *AND BUMP IT ONE 
F96E 8D9F             (                    ROMbasic.ASM):04634 L8AE5     BSR  L8A86          RETURN IF END OF PROGRAM 
F970 3002             (                    ROMbasic.ASM):04635           LEAX $02,X          SKIP PAST NEXT LINE ADDRESS 
F972 3001             (                    ROMbasic.ASM):04636 L8AE9     LEAX $01,X          ADVANCE POINTER BY ONE 
F974 9F83             (                    ROMbasic.ASM):04637 L8AEB     STX  CHARAD         SAVE NEW BASIC INPUT POINTER 
F976 9D7C             (                    ROMbasic.ASM):04638 L8AED     JSR  GETNCH         GET NEXT CHARACTER FROM BASIC 
F978 4D               (                    ROMbasic.ASM):04639 L8AEF     TSTA                CHECK THE CHARACTER 
F979 27EF             (                    ROMbasic.ASM):04640           BEQ  L8AE1          BRANCH IF END OF LINE 
F97B 2AF9             (                    ROMbasic.ASM):04641           BPL  L8AED          BRANCH IF NOT A TOKEN 
F97D 9E83             (                    ROMbasic.ASM):04642           LDX  CHARAD         GET CURRENT INPUT POINTER 
F97F 81FF             (                    ROMbasic.ASM):04643           CMPA #$FF           IS THIS A SECONDARY TOKEN? 
F981 27EF             (                    ROMbasic.ASM):04644           BEQ  L8AE9          YES - IGNORE IT 
F983 81A2             (                    ROMbasic.ASM):04645           CMPA #TOK_THEN      TOKEN FOR THEN? 
F985 2712             (                    ROMbasic.ASM):04646           BEQ  L8B13          YES 
F987 8184             (                    ROMbasic.ASM):04647           CMPA #TOK_ELSE      TOKEN FOR ELSE? 
F989 270E             (                    ROMbasic.ASM):04648           BEQ  L8B13          YES 
F98B 8181             (                    ROMbasic.ASM):04649           CMPA #TOK_GO        TOKEN FOR GO? 
F98D 26E7             (                    ROMbasic.ASM):04650           BNE  L8AED          NO 
F98F 9D7C             (                    ROMbasic.ASM):04651           JSR  GETNCH         GET A CHARACTER FROM BASIC 
F991 81A0             (                    ROMbasic.ASM):04652           CMPA #TOK_TO        TOKEN FOR TO? 
F993 2704             (                    ROMbasic.ASM):04653           BEQ  L8B13          YES 
F995 81A1             (                    ROMbasic.ASM):04654           CMPA #TOK_SUB       TOKEN FOR SUB? 
F997 26DB             (                    ROMbasic.ASM):04655           BNE  L8AEB          NO 
F999 9D7C             (                    ROMbasic.ASM):04656 L8B13     JSR  GETNCH         GET A CHARACTER FROM BASIC 
F99B 2504             (                    ROMbasic.ASM):04657           BLO  L8B1B          BRANCH IF NUMERIC 
F99D 9D82             (                    ROMbasic.ASM):04658 L8B17     JSR  GETCCH         GET CURRENT BASIC INPUT CHARRACTER 
F99F 20D7             (                    ROMbasic.ASM):04659           BRA  L8AEF          KEEP CHECKING THE LINE 
F9A1 9E83             (                    ROMbasic.ASM):04660 L8B1B     LDX  CHARAD         GET CURRENT INPUT ADDRESS 
F9A3 3410             (                    ROMbasic.ASM):04661           PSHS X              SAVE IT ON THE STACK 
F9A5 BDE23C           (                    ROMbasic.ASM):04662           JSR  LAF67          CONVERT DECIMAL BASIC NUMBER TO BINARY 
F9A8 9E83             (                    ROMbasic.ASM):04663           LDX  CHARAD         GET CURRENT INPUT POINTER 
F9AA A682             (                    ROMbasic.ASM):04664 L8B24     LDA  ,-X            GET PREVIOUS INPUT CHARACTER 
F9AC BDFD11           (                    ROMbasic.ASM):04665           JSR  L90AA          CLEAR CARRY IF NUMERIC INPUT VALUE 
F9AF 25F9             (                    ROMbasic.ASM):04666           BLO  L8B24          BRANCH IF NON-NUMERIC 
F9B1 3001             (                    ROMbasic.ASM):04667           LEAX $01,X          MOVE POINTER UP ONE 
F9B3 1F10             (                    ROMbasic.ASM):04668           TFR  X,D            NOW ACCD POINTS TO ONE PAST END OF LINE NUMBER 
F9B5 E061             (                    ROMbasic.ASM):04669           SUBB $01,S          SUBTRACT PRE-NUMERIC POINTER LS BYTE 
F9B7 C005             (                    ROMbasic.ASM):04670           SUBB #$05           MAKE SURE THERE ARE AT LEAST 5 CHARACTERS IN THE NUMERIC LINE 
                      (                    ROMbasic.ASM):04671 ;                              
F9B9 2720             (                    ROMbasic.ASM):04672           BEQ  L8B55          BRANCH IF EXACTLY 5 
F9BB 250A             (                    ROMbasic.ASM):04673           BLO  L8B41          BRANCH IF < 5 
F9BD 3384             (                    ROMbasic.ASM):04674           LEAU ,X             TRANSFER X TO U 
F9BF 50               (                    ROMbasic.ASM):04675           NEGB                NEGATE B 
F9C0 3085             (                    ROMbasic.ASM):04676           LEAX B,X            MOVE X BACK B BYTES 
F9C2 BDF850           (                    ROMbasic.ASM):04677           JSR  L89B8          *MOVE BYTES FROM (U) TO (X) UNTIL 
                      (                    ROMbasic.ASM):04678 ;                             *U = END OF BASIC; (I) = NEW END OF BASIC  
F9C5 2014             (                    ROMbasic.ASM):04679           BRA  L8B55           
                      (                    ROMbasic.ASM):04680 ; FORCE FIVE BYTES OF SPACE FOR THE LINE NUMBER                      
F9C7 9F47             (                    ROMbasic.ASM):04681 L8B41     STX  V47            SAVE END OF NUMERIC VALUE 
F9C9 9E1B             (                    ROMbasic.ASM):04682           LDX  VARTAB         GET END OF BASIC PROGRAM 
F9CB 9F43             (                    ROMbasic.ASM):04683           STX  V43            SAVE IT 
F9CD 50               (                    ROMbasic.ASM):04684           NEGB                NEGATE B 
F9CE 3085             (                    ROMbasic.ASM):04685           LEAX B,X            ADD IT TO END OF NUMERIC POiNTER 
F9D0 9F41             (                    ROMbasic.ASM):04686           STX  V41            SAVE POINTER 
F9D2 9F1B             (                    ROMbasic.ASM):04687           STX  VARTAB         STORE END OF BASIC PROGRAM 
F9D4 BDDF03           (                    ROMbasic.ASM):04688           JSR  LAC1E          ACCD = TOP OF ARRAYS - CHECK FOR ENOUGH ROOM 
F9D7 9E45             (                    ROMbasic.ASM):04689           LDX  V45            * GET AND SAVE THE 
F9D9 9F83             (                    ROMbasic.ASM):04690           STX  CHARAD         * NEW CURRENT INPUT POINTER 
F9DB 3510             (                    ROMbasic.ASM):04691 L8B55     PULS X              RESTORE POINTER TO START OF NUMERIC VALUE 
F9DD 8601             (                    ROMbasic.ASM):04692           LDA  #$01           NEW LINE NUMBER FLAG 
F9DF A784             (                    ROMbasic.ASM):04693           STA  ,X             * SAVE NEW LINE FLAG 
F9E1 A702             (                    ROMbasic.ASM):04694           STA  $02,X          * 
F9E3 A704             (                    ROMbasic.ASM):04695           STA  $04,X          * 
F9E5 D62B             (                    ROMbasic.ASM):04696           LDB  BINVAL         GET MS BYTE OF BINARY LINE NUMBER 
F9E7 2604             (                    ROMbasic.ASM):04697           BNE  L8B67          BRANCH IF IT IS NOT ZERO 
F9E9 C601             (                    ROMbasic.ASM):04698           LDB  #$01           SAVE A 1 IF BYTE IS 0; OTHERWISE, BASIC WILL 
                      (                    ROMbasic.ASM):04699 ;                             THINK IT IS THE END OF A LINE  
F9EB 6C02             (                    ROMbasic.ASM):04700           INC  $02,X          IF 2,X = 2, THEN PREVIOUS BYTE WAS A ZERO 
F9ED E701             (                    ROMbasic.ASM):04701 L8B67     STB  $01,X          SAVE MS BYTE OF BINARY LINE NUMBER 
F9EF D62C             (                    ROMbasic.ASM):04702           LDB  BINVAL+1       GET IS BYTE OF BINARY LINE NUMBER 
F9F1 2604             (                    ROMbasic.ASM):04703           BNE  L8B71          BRANCH IF NOT A ZERO BYTE 
F9F3 C601             (                    ROMbasic.ASM):04704           LDB  #$01           SAVE A 1 IF BYTE IS A 0 
F9F5 6C04             (                    ROMbasic.ASM):04705           INC  $04,X          IF 4,X = 2, THEN PREVIOUS BYTE WAS A 0 
F9F7 E703             (                    ROMbasic.ASM):04706 L8B71     STB  $03,X          SAVE LS BYTE OF BINARY LINE NUMBER 
F9F9 9D82             (                    ROMbasic.ASM):04707           JSR  GETCCH         GET CURRENT INPUT CHARACTER 
F9FB 812C             (                    ROMbasic.ASM):04708           CMPA #','           IS IT A COMMA? 
F9FD 279A             (                    ROMbasic.ASM):04709           BEQ  L8B13          YES - PROCESS ANOTHER NUMERIC VALUE 
F9FF 209C             (                    ROMbasic.ASM):04710           BRA  L8B17          NO - GO GET AND PROCESS AN INPUT CHARACTER 
FA01 9E19             (                    ROMbasic.ASM):04711 L8B7B     LDX  TXTTAB         POINT X TO START OF BASIC PROGRAM 
FA03 301F             (                    ROMbasic.ASM):04712           LEAX $-01,X         MOVE POINTER BACK ONE 
FA05 3001             (                    ROMbasic.ASM):04713 L8B7F     LEAX $01,X          MOVE POINTER UP ONE 
FA07 EC02             (                    ROMbasic.ASM):04714           LDD  $02,X          GET ADDRESS OF NEXT LINE 
FA09 DD68             (                    ROMbasic.ASM):04715           STD  CURLIN         SAVE IT IN CURLIN 
FA0B BDF90F           (                    ROMbasic.ASM):04716           JSR  L8A86          RETURN IF END OF PROGRAM 
FA0E 3003             (                    ROMbasic.ASM):04717           LEAX $03,X          SKIP OVER ADDRESS OF NEXT LINE AND 1ST BYTE OF LINE NUMBER 
FA10 3001             (                    ROMbasic.ASM):04718 L8B8A     LEAX $01,X          MOVE POINTER UP ONE 
FA12 A684             (                    ROMbasic.ASM):04719 L8B8C     LDA  ,X             GET CURRENT CHARACTER 
FA14 27EF             (                    ROMbasic.ASM):04720           BEQ  L8B7F          BRANCH IF END OF LINE 
FA16 4A               (                    ROMbasic.ASM):04721           DECA                INPUT CHARACTER = 1? - VALID LINE NUMBER 
FA17 271B             (                    ROMbasic.ASM):04722           BEQ  L8BAE          YES 
FA19 8002             (                    ROMbasic.ASM):04723           SUBA #$02           INPUT CHARACTER 3? - UL LINE NUMBER 
FA1B 26F3             (                    ROMbasic.ASM):04724           BNE  L8B8A          NO 
FA1D 3410             (                    ROMbasic.ASM):04725           PSHS X              SAVE CURRENT POSITION OF INPUT POINTER 
FA1F 8EFA5E           (                    ROMbasic.ASM):04726           LDX  #L8BD9-1       POINT X TO ‘UL’ MESSAGE 
FA22 BDEC0D           (                    ROMbasic.ASM):04727           JSR  LB99C          PRINT STRING TO THE SCREEN 
FA25 AEE4             (                    ROMbasic.ASM):04728           LDX  ,S             GET INPUT POINTER 
FA27 EC01             (                    ROMbasic.ASM):04729           LDD  $01,X          GET THE UNDEFINED LINE NUMBER 
FA29 BDF03D           (                    ROMbasic.ASM):04730           JSR  LBDCC          CONVERT NUMBER IN ACCD TO DECIMAL AND DISPLAY IT 
FA2C BDF036           (                    ROMbasic.ASM):04731           JSR  LBDC5          PRINT ‘IN XXXX’ XXXX = CURRENT LINE NUMBER 
FA2F BDEBCD           (                    ROMbasic.ASM):04732           JSR  LB958          SEND A CR TO CONSOLE OUT 
FA32 3510             (                    ROMbasic.ASM):04733           PULS X              GET INPUT POINTER BACK 
FA34 3410             (                    ROMbasic.ASM):04734 L8BAE     PSHS X              SAVE CURRENT POSITION OF INPUT POINTER 
FA36 EC01             (                    ROMbasic.ASM):04735           LDD  $01,X          LOAD ACCD WITH BINARY VALUE OF LINE NUMBER 
FA38 DD52             (                    ROMbasic.ASM):04736           STD  FPA0+2         SAVE IN BOTTOM 2 BYTES OF FPA0 
FA3A BDF6E9           (                    ROMbasic.ASM):04737           JSR  L880E          ADJUST REST OF FPA0 AS AN INTEGER 
FA3D BDF04A           (                    ROMbasic.ASM):04738           JSR  LBDD9          CONVERT FPA0 TO ASCII, STORE IN LINE NUMBER 
FA40 3540             (                    ROMbasic.ASM):04739           PULS U              LOAD U WITH PREVIOUS ADDRESS OF INPUT POINTER 
FA42 C605             (                    ROMbasic.ASM):04740           LDB  #$05           EACH EXPANDED LINE NUMBER USES 5 BYTES 
FA44 3001             (                    ROMbasic.ASM):04741 L8BBE     LEAX $01,X          MOVE POINTER FORWARD ONE 
FA46 A684             (                    ROMbasic.ASM):04742           LDA  ,X             GET AN ASCII BYTE 
FA48 2705             (                    ROMbasic.ASM):04743           BEQ  L8BC9          BRANCH IF END OF NUMBER 
FA4A 5A               (                    ROMbasic.ASM):04744           DECB                DECREMENT BYTE COUNTER 
FA4B A7C0             (                    ROMbasic.ASM):04745           STA  ,U+            STORE ASCII NUMBER IN BASIC LINE 
FA4D 20F5             (                    ROMbasic.ASM):04746           BRA  L8BBE          CHECK FOR ANOTHER DIGIT 
FA4F 30C4             (                    ROMbasic.ASM):04747 L8BC9     LEAX ,U             TRANSFER NEW LINE POINTER TO (X) 
FA51 5D               (                    ROMbasic.ASM):04748           TSTB DOES THE NEW LINE NUMBER REQUIRE 5 BYTES?  
FA52 27BE             (                    ROMbasic.ASM):04749           BEQ  L8B8C          YES - GO GET ANOTHER INPUT CHARACTER 
FA54 31C4             (                    ROMbasic.ASM):04750           LEAY ,U             SAVE NEW LINE POINTER IN Y 
FA56 33C5             (                    ROMbasic.ASM):04751           LEAU B,U            POINT U TO END OF 5 BYTE PACKED LINE NUMBER BLOCK 
FA58 BDF850           (                    ROMbasic.ASM):04752           JSR  L89B8          MOVE BYTES FROM (U) TO (X) UNTIL END OF PROGRAM 
FA5B 30A4             (                    ROMbasic.ASM):04753           LEAX ,Y             LOAD (X) WITH NEW LINE POINTER 
FA5D 20B3             (                    ROMbasic.ASM):04754           BRA  L8B8C          GO GET ANOTHER INPUT CHARACTER 
                      (                    ROMbasic.ASM):04755                                
FA5F 554C20           (                    ROMbasic.ASM):04756 L8BD9     FCC  "UL "          UNKNOWN LINE NUMBER MESSAGE 
FA62 00               (                    ROMbasic.ASM):04757           FCB  0               
                      (                    ROMbasic.ASM):04758                                
                      (                    ROMbasic.ASM):04759                                
FA63 BDE9EC           (                    ROMbasic.ASM):04760 HEXDOL    JSR  LB740          CONVERT FPA0 INTO A POSITIVE 2 BYTE INTEGER 
FA66 8E01F0           (                    ROMbasic.ASM):04761           LDX  #STRBUF+2      POINT TO TEMPORARY BUFFER 
FA69 C604             (                    ROMbasic.ASM):04762           LDB  #$04           CONVERT 4 NIBBLES 
FA6B 3404             (                    ROMbasic.ASM):04763 L8BE5     PSHS B              SAVE NIBBLE COUNTER 
FA6D 5F               (                    ROMbasic.ASM):04764           CLRB                CLEAR CARRY FLAG 
FA6E 8604             (                    ROMbasic.ASM):04765           LDA  #$04           4 SHIFTS 
FA70 0853             (                    ROMbasic.ASM):04766 L8BEA     ASL  FPA0+3         * SHIFT BOTTOM TWO BYTES OF 
FA72 0952             (                    ROMbasic.ASM):04767           ROL  FPA0+2         * FPA0 LEFT ONE BIT (X2) 
FA74 59               (                    ROMbasic.ASM):04768           ROLB                IF OVERFLOW, ACCB <> 0 
FA75 4A               (                    ROMbasic.ASM):04769           DECA                * DECREMENT SHIFT COUNTER AND 
FA76 26F8             (                    ROMbasic.ASM):04770           BNE  L8BEA          * BRANCH IF NOT DONE 
FA78 5D               (                    ROMbasic.ASM):04771           TSTB CHECK FOR OVERFLOW  
FA79 260A             (                    ROMbasic.ASM):04772           BNE  L8BFF          BRANCH IF OVERFLOW 
FA7B A6E4             (                    ROMbasic.ASM):04773           LDA  ,S             * GET NIBBLE COUNTER, 
FA7D 4A               (                    ROMbasic.ASM):04774           DECA                * DECREMENT IT AND 
FA7E 2705             (                    ROMbasic.ASM):04775           BEQ  L8BFF          * BRANCH IF DONE 
FA80 8C01F0           (                    ROMbasic.ASM):04776           CMPX #STRBUF+2      DO NOT DO A CONVERSION UNTIL A NON-ZERO 
FA83 270C             (                    ROMbasic.ASM):04777           BEQ  L8C0B          BYTE IS FOUND - LEADING ZERO SUPPRESSION 
FA85 CB30             (                    ROMbasic.ASM):04778 L8BFF     ADDB #'0'           ADD IN ASCII ZERO 
FA87 C139             (                    ROMbasic.ASM):04779           CMPB #'9'           COMPARE TO ASCII 9 
FA89 2302             (                    ROMbasic.ASM):04780           BLS  L8C07          BRANCH IF < 9 
FA8B CB07             (                    ROMbasic.ASM):04781           ADDB #7             ADD ASCII OFFSET IF HEX LETTER 
FA8D E780             (                    ROMbasic.ASM):04782 L8C07     STB  ,X+            STORE HEX VALUE AND ADVANCE POINTER 
FA8F 6F84             (                    ROMbasic.ASM):04783           CLR  ,X             CLEAR NEXT BYTE - END OF STRING FLAG 
FA91 3504             (                    ROMbasic.ASM):04784 L8C0B     PULS B              * GET NIBBLE COUNTER, 
FA93 5A               (                    ROMbasic.ASM):04785           DECB                * DECREMENT IT AND 
FA94 26D5             (                    ROMbasic.ASM):04786           BNE  L8BE5          * BRANCH IF NOT DONE 
FA96 3262             (                    ROMbasic.ASM):04787           LEAS $02,S          PURGE RETURN ADDRESS OFF OF STACK 
FA98 8E01EF           (                    ROMbasic.ASM):04788           LDX  #STRBUF+1      RESET POINTER 
FA9B 7EE7C4           (                    ROMbasic.ASM):04789           JMP  LB518          SAVE STRING ON STRING STACK 
                      (                    ROMbasic.ASM):04790 ; PROCESS EXCLAMATION POINT                      
FA9E 8601             (                    ROMbasic.ASM):04791 L8E37     LDA  #$01           * SET SPACES 
FAA0 9799             (                    ROMbasic.ASM):04792           STA  VD9            * COUNTER = 1 
                      (                    ROMbasic.ASM):04793 ; PROCESS STRING ITEM - LIST                      
FAA2 5A               (                    ROMbasic.ASM):04794 L8E3B     DECB                DECREMENT FORMAT STRING LENGTH COUNTER 
FAA3 BDFC3F           (                    ROMbasic.ASM):04795           JSR  L8FD8          SEND A '+' TO CONSOLE OUT IF VDA <>0 
FAA6 9D82             (                    ROMbasic.ASM):04796           JSR  GETCCH         GET CURRENT INPUT CHARACTER 
FAA8 10270093         (                    ROMbasic.ASM):04797           LBEQ L8ED8          EXIT PRINT USING IF END OF LINE 
FAAC D793             (                    ROMbasic.ASM):04798           STB  VD3            SAVE REMAINDER FORMAT STRING LENGTH 
FAAE BDE407           (                    ROMbasic.ASM):04799           JSR  LB156          EVALUATE EXPRESSION 
FAB1 BDE3F7           (                    ROMbasic.ASM):04800           JSR  LB146          ‘TM’ ERROR IF NUMERIC VARIABLE 
FAB4 9E52             (                    ROMbasic.ASM):04801           LDX  FPA0+2         * GET ITEM - LIST DESCRIPTOR ADDRESS 
FAB6 9F4D             (                    ROMbasic.ASM):04802           STX  V4D            * AND SAVE IT IN V4D 
FAB8 D699             (                    ROMbasic.ASM):04803           LDB  VD9            GET SPACES COUNTER 
FABA BDE959           (                    ROMbasic.ASM):04804           JSR  LB6AD          PUT ACCB BYTES INTO STRING SPACE & PUT DESCRIPTOR ON STRING STACK 
FABD BDEC10           (                    ROMbasic.ASM):04805           JSR  LB99F          PRINT THE FORMATTED STRING TO CONSOLE OUT 
                      (                    ROMbasic.ASM):04806 ; PAD FORMAT STRING WITH SPACES IF ITEM - LIST STRING < FORMAT STRING LENGTH                      
FAC0 9E52             (                    ROMbasic.ASM):04807           LDX  FPA0+2         POINT X TO FORMATTED STRING DESCRIPTOR ADDRESS 
FAC2 D699             (                    ROMbasic.ASM):04808           LDB  VD9            GET SPACES COUNTER 
FAC4 E084             (                    ROMbasic.ASM):04809           SUBB ,X             SUBTRACT LENGTH OF FORMATTED STRING 
FAC6 5A               (                    ROMbasic.ASM):04810 L8E5F     DECB                DECREMENT DIFFERENCE 
FAC7 102B014F         (                    ROMbasic.ASM):04811           LBMI L8FB3          GO INTERPRET ANOTHER ITEM - LIST 
FACB BDEC1D           (                    ROMbasic.ASM):04812           JSR  LB9AC          PAD FORMAT STRING WITH A SPACE 
FACE 20F6             (                    ROMbasic.ASM):04813           BRA  L8E5F          KEEP PADDING 
                      (                    ROMbasic.ASM):04814 ; PERCENT SIGN - PROCESS A %SPACES% COMMAND                      
FAD0 D793             (                    ROMbasic.ASM):04815 L8E69     STB  VD3            * SAVE THE CURRENT FORMAT STRING 
FAD2 9F0F             (                    ROMbasic.ASM):04816           STX  TEMPTR         * COUNTER AND POINTER 
FAD4 8602             (                    ROMbasic.ASM):04817           LDA  #$02           INITIAL SPACES COUNTER = 2 
FAD6 9799             (                    ROMbasic.ASM):04818           STA  VD9            SAVE IN SPACES COUNTER 
FAD8 A684             (                    ROMbasic.ASM):04819 L8E71     LDA  ,X             GET A CHARACTER FROM FORMAT STRING 
FADA 8125             (                    ROMbasic.ASM):04820           CMPA #'%'           COMPARE TO TERMINATOR CHARACTER 
FADC 27C4             (                    ROMbasic.ASM):04821           BEQ  L8E3B          BRANCH IF END OF SPACES COMMAND 
FADE 8120             (                    ROMbasic.ASM):04822           CMPA #' '           BLANK 
FAE0 2607             (                    ROMbasic.ASM):04823           BNE  L8E82          BRANCH IF ILLEGAL CHARACTER 
FAE2 0C99             (                    ROMbasic.ASM):04824           INC  VD9            ADD ONE TO SPACES COUNTER 
FAE4 3001             (                    ROMbasic.ASM):04825           LEAX $01,X          MOVE FORMAT POINTER UP ONE 
FAE6 5A               (                    ROMbasic.ASM):04826           DECB                DECREMENT LENGTH COUNTER 
FAE7 26EF             (                    ROMbasic.ASM):04827           BNE  L8E71          BRANCH IF NOT END OF FORMAT STRING 
FAE9 9E0F             (                    ROMbasic.ASM):04828 L8E82     LDX  TEMPTR         * RESTORE CURRENT FORMAT STRING COUNTER 
FAEB D693             (                    ROMbasic.ASM):04829           LDB  VD3            * AND POINTER TO POSITION BEFORE SPACES COMMAND 
FAED 8625             (                    ROMbasic.ASM):04830           LDA  #'%'           SEND A ‘%’ TO CONSOLE OUT AS A DEBUGGING AID 
                      (                    ROMbasic.ASM):04831 ; ERROR PROCESSOR - ILLEGAL CHARACTER OR BAD SYNTAX IN FORMAT STRING                      
FAEF BDFC3F           (                    ROMbasic.ASM):04832 L8E88     JSR  L8FD8          SEND A '+' TO CONSOLE OUT IF VDA <> 0 
FAF2 BDDB17           (                    ROMbasic.ASM):04833           JSR  PUTCHR         SEND CHARACTER TO CONSOLE OUT 
FAF5 2029             (                    ROMbasic.ASM):04834           BRA  L8EB9          GET NEXT CHARACTER IN FORMAT STRING 
                      (                    ROMbasic.ASM):04835                                
                      (                    ROMbasic.ASM):04836 ; PRINT RAM HOOK                      
FAF7 81B1             (                    ROMbasic.ASM):04837 XVEC9     CMPA #TOK_USING     USING TOKEN 
FAF9 2701             (                    ROMbasic.ASM):04838           BEQ  L8E95          BRANCH IF PRINT USING 
FAFB 39               (                    ROMbasic.ASM):04839           RTS                  
                      (                    ROMbasic.ASM):04840                                
                      (                    ROMbasic.ASM):04841 ; PRINT USING                      
                      (                    ROMbasic.ASM):04842 ; VDA IS USED AS A STATUS BYTE: BIT 6 = COMMA FORCE                      
                      (                    ROMbasic.ASM):04843 ; BIT 5=LEADING ASTERISK FORCE; BIT 4 = FLOATING $ FORCE                      
                      (                    ROMbasic.ASM):04844 ; BIT 3 = PRE SIGN FORCE; BIT 2 = POST SIGN FORCE; BIT 0 = EXPONENTIAL FORCE                      
FAFC 3262             (                    ROMbasic.ASM):04845 L8E95     LEAS $02,S          PURGE RETURN ADDRESS OFF THE STACK 
FAFE BDE409           (                    ROMbasic.ASM):04846           JSR  LB158          EVALUATE FORMAT STRING 
FB01 BDE3F7           (                    ROMbasic.ASM):04847           JSR  LB146          ‘TM’ ERROR IF VARIABLE TYPE = NUMERIC 
FB04 C63B             (                    ROMbasic.ASM):04848           LDB  #';'           CHECK FOR ITEM LIST SEPARATOR 
FB06 BDE520           (                    ROMbasic.ASM):04849           JSR  LB26F          SYNTAX CHECK FOR ; 
FB09 9E52             (                    ROMbasic.ASM):04850           LDX  FPA0+2         * GET FORMAT STRING DESCRIPTOR ADDRESS 
FB0B 9F95             (                    ROMbasic.ASM):04851           STX  VD5            * AND SAVE IT IN VD5 
FB0D 2006             (                    ROMbasic.ASM):04852           BRA  L8EAE          GO PROCESS FORMAT STRING 
FB0F 9697             (                    ROMbasic.ASM):04853 L8EA8     LDA  VD7            *CHECK NEXT PRINT ITEM FLAG AND 
FB11 2708             (                    ROMbasic.ASM):04854           BEQ  L8EB4          *‘FC’ ERROR IF NO FURTHER PRINT ITEMS 
FB13 9E95             (                    ROMbasic.ASM):04855           LDX  VD5            RESET FORMAT STRING POINTER TO START OF STRING 
FB15 0F97             (                    ROMbasic.ASM):04856 L8EAE     CLR  VD7            RESET NEXT PRINT ITEM FLAG 
FB17 E684             (                    ROMbasic.ASM):04857           LDB  ,X             GET LENGTH OF FORMAT STRING 
FB19 2603             (                    ROMbasic.ASM):04858           BNE  L8EB7          INTERPRET FORMAT STRING IF LENGTH > 0 
FB1B 7EE6F6           (                    ROMbasic.ASM):04859 L8EB4     JMP  LB44A          ‘FC’ ERROR IF FORMAT STRING = NULL 
FB1E AE02             (                    ROMbasic.ASM):04860 L8EB7     LDX  $02,X          POINT X TO START OF FORMAT STRING 
                      (                    ROMbasic.ASM):04861 ; INTERPRET THE FORMAT STRING                      
FB20 0F9A             (                    ROMbasic.ASM):04862 L8EB9     CLR  VDA            CLEAR THE STATUS BYTE 
FB22 0F99             (                    ROMbasic.ASM):04863 L8EBB     CLR  VD9            CLEAR LEFT DIGIT COUNTER 
FB24 A680             (                    ROMbasic.ASM):04864           LDA  ,X+            GET A CHARACTER FROM FORMAT STRING 
FB26 8121             (                    ROMbasic.ASM):04865           CMPA #'!'           EXCLAMATION POINT? 
FB28 1027FF72         (                    ROMbasic.ASM):04866           LBEQ L8E37          YES - STRING TYPE FORMAT 
FB2C 8123             (                    ROMbasic.ASM):04867           CMPA #'#'           NUMBER SIGN? (DIGIT LOCATOR) 
FB2E 275B             (                    ROMbasic.ASM):04868           BEQ  L8F24          YES - NUMERIC TYPE FORMAT 
FB30 5A               (                    ROMbasic.ASM):04869           DECB                DECREMENT FORMAT STRING LENGTH 
FB31 2616             (                    ROMbasic.ASM):04870           BNE  L8EE2          BRANCH IF NOT DONE 
FB33 BDFC3F           (                    ROMbasic.ASM):04871           JSR  L8FD8          SEND A ‘+‘ TO CONSOLE OUT IF VDA <> 0 
FB36 BDDB17           (                    ROMbasic.ASM):04872           JSR  PUTCHR         SEND CHARACTER TO CONSOLE OUT 
FB39 9D82             (                    ROMbasic.ASM):04873 L8ED2     JSR  GETCCH         GET CURRENT CHARACTER FROM BASIC 
FB3B 26D2             (                    ROMbasic.ASM):04874           BNE  L8EA8          BRANCH IF NOT END OF LINE 
FB3D 9697             (                    ROMbasic.ASM):04875           LDA  VD7            GET NEXT PRINT ITEM FLAG 
FB3F 2603             (                    ROMbasic.ASM):04876 L8ED8     BNE  L8EDD          BRANCH IF MORE PRINT ITEMS 
FB41 BDEBCD           (                    ROMbasic.ASM):04877           JSR  LB958          SEND A CARRIAGE RETURN TO CONSOLE OUT 
FB44 9E95             (                    ROMbasic.ASM):04878 L8EDD     LDX  VD5            POINT X TO FORMAT STRING DESCRIPTOR 
FB46 7EE905           (                    ROMbasic.ASM):04879           JMP  LB659          RETURN ADDRESS AND LENGTH OF FORMAT STRING - EXIT PRINT USING 
FB49 812B             (                    ROMbasic.ASM):04880 L8EE2     CMPA #'+'           CHECK FOR ‘+‘ (PRE-SIGN FORCE) 
FB4B 2609             (                    ROMbasic.ASM):04881           BNE  L8EEF          NO PLUS 
FB4D BDFC3F           (                    ROMbasic.ASM):04882           JSR  L8FD8          SEND A ‘+' TO CONSOLE OUT IF VDA <> 0 
FB50 8608             (                    ROMbasic.ASM):04883           LDA  #$08           * LOAD THE STATUS BYTE WITH 8; 
FB52 979A             (                    ROMbasic.ASM):04884           STA  VDA            * PRE-SIGN FORCE FLAG 
FB54 20CC             (                    ROMbasic.ASM):04885           BRA  L8EBB          INTERPRET THE REST OF THE FORMAT STRING 
FB56 812E             (                    ROMbasic.ASM):04886 L8EEF     CMPA #'.'           DECIMAL POINT? 
FB58 274E             (                    ROMbasic.ASM):04887           BEQ  L8F41          YES 
FB5A 8125             (                    ROMbasic.ASM):04888           CMPA #'%'           PERCENT SIGN? 
FB5C 1027FF70         (                    ROMbasic.ASM):04889           LBEQ L8E69          YES 
FB60 A184             (                    ROMbasic.ASM):04890           CMPA ,X             COMPARE THE PRESENT FORMAT STRING INPUT 
                      (                    ROMbasic.ASM):04891 ;                                CHARACTER TO THE NEXT ONE IN THE STRING  
FB62 268B             (                    ROMbasic.ASM):04892 L8EFB     BNE  L8E88          NO MATCH - ILLEGAL CHARACTER 
                      (                    ROMbasic.ASM):04893 ; TWO CONSECUTIVE EQUAL CHARACTERS IN FORMAT STRING                      
FB64 8124             (                    ROMbasic.ASM):04894           CMPA #'$'           DOLLAR SIGN? 
FB66 2719             (                    ROMbasic.ASM):04895           BEQ  L8F1A          YES - MAKE THE DOLLAR SIGN FLOAT 
FB68 812A             (                    ROMbasic.ASM):04896           CMPA #'*'           ASTERISK? 
FB6A 26F6             (                    ROMbasic.ASM):04897           BNE  L8EFB          NO - ILLEGAL CHARACTER 
FB6C 969A             (                    ROMbasic.ASM):04898           LDA  VDA            * GRAB THE STATUS BYTE AND BET BIT 5 
FB6E 8A20             (                    ROMbasic.ASM):04899           ORA  #$20           * TO INDICATE THAT THE OUTPUT WILL 
FB70 979A             (                    ROMbasic.ASM):04900           STA  VDA            * BE LEFT PADDED WITH ASTERISKS 
FB72 C102             (                    ROMbasic.ASM):04901           CMPB #2             * CHECK TO SEE IF THE $$ ARE THE LAST TWO 
FB74 2511             (                    ROMbasic.ASM):04902           BLO  L8F20          * CHARACTERS IN THE FORMAT STRING AND BRANCH IF SO 
FB76 A601             (                    ROMbasic.ASM):04903           LDA  $01,X          GET THE NEXT CHARACTER AFTER ** 
FB78 8124             (                    ROMbasic.ASM):04904           CMPA #'$'           CHECK FOR **$ 
FB7A 260B             (                    ROMbasic.ASM):04905           BNE  L8F20          CHECK FOR MORE CHARACTERS 
FB7C 5A               (                    ROMbasic.ASM):04906           DECB                DECREMENT STRING LENGTH COUNTER 
FB7D 3001             (                    ROMbasic.ASM):04907           LEAX $01,X          MOVE FORMAT STRING POINTER UP ONE 
FB7F 0C99             (                    ROMbasic.ASM):04908           INC  VD9            ADD ONE TO LEFT DIGIT COUNTER - FOR ASTERISK PAD AND 
                      (                    ROMbasic.ASM):04909 ;                             FLOATING DOLLAR SIGN COMBINATION  
FB81 969A             (                    ROMbasic.ASM):04910 L8F1A     LDA  VDA            * GET THE STATUS BYTE AND SET 
FB83 8A10             (                    ROMbasic.ASM):04911           ORA  #$10           * BIT 4 TO INDICATE A 
FB85 979A             (                    ROMbasic.ASM):04912           STA  VDA            * FLOATING DOLLAR SIGN 
FB87 3001             (                    ROMbasic.ASM):04913 L8F20     LEAX $01,X          MOVE FORMAT STRING POINTER UP ONE 
FB89 0C99             (                    ROMbasic.ASM):04914           INC  VD9            ADD ONE TO LEFT DIGIT (FLOATING $ OR ASTERISK PAD) 
                      (                    ROMbasic.ASM):04915 ; PROCESS CHARACTERS TO THE LEFT OF THE DECIMAL POINT IN THE FORMAT STRING                      
FB8B 0F98             (                    ROMbasic.ASM):04916 L8F24     CLR  VD8            CLEAR THE RIGHT DIGIT COUNTER 
FB8D 0C99             (                    ROMbasic.ASM):04917 L8F26     INC  VD9            ADD ONE TO LEFT DIGIT COUNTER 
FB8F 5A               (                    ROMbasic.ASM):04918           DECB                DECREMENT FORMAT STRING LENGTH COUNTER 
FB90 2749             (                    ROMbasic.ASM):04919           BEQ  L8F74          BRANCH IF END OF FORMAT STRING 
FB92 A680             (                    ROMbasic.ASM):04920           LDA  ,X+            GET THE NEXT FORMAT CHARACTER 
FB94 812E             (                    ROMbasic.ASM):04921           CMPA #'.'           DECIMAL POINT? 
FB96 271E             (                    ROMbasic.ASM):04922           BEQ  L8F4F          YES 
FB98 8123             (                    ROMbasic.ASM):04923           CMPA #'#'           NUMBER SIGN? 
FB9A 27F1             (                    ROMbasic.ASM):04924           BEQ  L8F26          YES 
FB9C 812C             (                    ROMbasic.ASM):04925           CMPA #','           COMMA? 
FB9E 2621             (                    ROMbasic.ASM):04926           BNE  L8F5A          NO 
FBA0 969A             (                    ROMbasic.ASM):04927           LDA  VDA            * GET THE STATUS BYTE 
FBA2 8A40             (                    ROMbasic.ASM):04928           ORA  #$40           * AND SET BIT 6 WHICH IS THE 
FBA4 979A             (                    ROMbasic.ASM):04929           STA  VDA            * COMMA SEPARATOR FLAG 
FBA6 20E5             (                    ROMbasic.ASM):04930           BRA  L8F26          PROCESS MORE CHARACTERS TO LEFT OF DECIMAL POINT 
                      (                    ROMbasic.ASM):04931 ; PROCESS DECIMAL POINT IF NO DIGITS TO LEFT OF IT                      
FBA8 A684             (                    ROMbasic.ASM):04932 L8F41     LDA  ,X             GET NEXT FORMAT CHARACTER 
FBAA 8123             (                    ROMbasic.ASM):04933           CMPA #'#'           IS IT A NUMBER SIGN? 
FBAC 1026FF3F         (                    ROMbasic.ASM):04934           LBNE L8E88          NO 
FBB0 8601             (                    ROMbasic.ASM):04935           LDA  #1             * SET THE RIGHT DIGIT COUNTER TO 1 - 
FBB2 9798             (                    ROMbasic.ASM):04936           STA  VD8            * ALLOW ONE SPOT FOR DECIMAL POINT 
FBB4 3001             (                    ROMbasic.ASM):04937           LEAX $01,X          MOVE FORMAT POINTER UP ONE 
                      (                    ROMbasic.ASM):04938 ; PROCESS DIGITS TO RIGHT OF DECIMAL POINT                      
FBB6 0C98             (                    ROMbasic.ASM):04939 L8F4F     INC  VD8            ADD ONE TO RIGHT DIGIT COUNTER 
FBB8 5A               (                    ROMbasic.ASM):04940           DECB                DECREMENT FORMAT LENGTH COUNTER 
FBB9 2720             (                    ROMbasic.ASM):04941           BEQ  L8F74          BRANCH IF END OF FORMAT STRING 
FBBB A680             (                    ROMbasic.ASM):04942           LDA  ,X+            GET A CHARACTER FROM FORMAT STRING 
FBBD 8123             (                    ROMbasic.ASM):04943           CMPA #'#'           IS IT NUMBER SIGN? 
FBBF 27F5             (                    ROMbasic.ASM):04944           BEQ  L8F4F          YES - KEEP CHECKING 
                      (                    ROMbasic.ASM):04945 ; CHECK FOR EXPONENTIAL FORCE                      
FBC1 815E             (                    ROMbasic.ASM):04946 L8F5A     CMPA #$5E           CHECK FOR UP ARROW 
FBC3 2616             (                    ROMbasic.ASM):04947           BNE  L8F74          NO UP ARROW 
FBC5 A184             (                    ROMbasic.ASM):04948           CMPA ,X             IS THE NEXT CHARACTER AN UP ARROW? 
FBC7 2612             (                    ROMbasic.ASM):04949           BNE  L8F74          NO 
FBC9 A101             (                    ROMbasic.ASM):04950           CMPA $01,X          AND THE NEXT CHARACTER? 
FBCB 260E             (                    ROMbasic.ASM):04951           BNE  L8F74          NO 
FBCD A102             (                    ROMbasic.ASM):04952           CMPA $02,X          HOW ABOUT THE 4TH CHARACTER? 
FBCF 260A             (                    ROMbasic.ASM):04953           BNE  L8F74          NO, ALSO 
FBD1 C104             (                    ROMbasic.ASM):04954           CMPB #4             * CHECK TO SEE IF THE 4 UP ARROWS ARE IN THE 
FBD3 2506             (                    ROMbasic.ASM):04955           BLO  L8F74          * FORMAT STRING AND BRANCH IF NOT 
FBD5 C004             (                    ROMbasic.ASM):04956           SUBB #4             * MOVE POINTER UP 4 AND SUBTRACT 
FBD7 3004             (                    ROMbasic.ASM):04957           LEAX $04,X          * FOUR FROM LENGTH 
FBD9 0C9A             (                    ROMbasic.ASM):04958           INC  VDA INCREMENT STATUS BYTE - EXPONENTIAL FORM  
                      (                    ROMbasic.ASM):04959                                
                      (                    ROMbasic.ASM):04960 ; CHECK FOR A PRE OR POST - SIGN FORCE AT END OF FORMAT STRING                      
FBDB 301F             (                    ROMbasic.ASM):04961 L8F74     LEAX $-01,X         MOVE POINTER BACK ONE 
FBDD 0C99             (                    ROMbasic.ASM):04962           INC  VD9            ADD ONE TO LEFT DIGIT COUNTER FOR PRE-SIGN FORCE 
FBDF 969A             (                    ROMbasic.ASM):04963           LDA  VDA            * PRE-SIGN 
FBE1 8508             (                    ROMbasic.ASM):04964           BITA #$08           * FORCE AND 
FBE3 2618             (                    ROMbasic.ASM):04965           BNE  L8F96          * BRANCH IF SET 
FBE5 0A99             (                    ROMbasic.ASM):04966           DEC  VD9            DECREMENT LEFT DIGIT — NO PRE-SIGN FORCE 
FBE7 5D               (                    ROMbasic.ASM):04967           TSTB * CHECK LENGTH COUNTER AND BRANCH  
FBE8 2713             (                    ROMbasic.ASM):04968           BEQ  L8F96          * IF END OF FORMAT STRING 
FBEA A684             (                    ROMbasic.ASM):04969           LDA  ,X             GET NEXT FORMAT STRING CHARACTER 
FBEC 802D             (                    ROMbasic.ASM):04970           SUBA #'-'           CHECK FOR MINUS SIGN 
FBEE 2706             (                    ROMbasic.ASM):04971           BEQ  L8F8F          BRANCH IF MINUS SIGN 
FBF0 81FE             (                    ROMbasic.ASM):04972           CMPA #$FE           * WAS CMPA #('+')-('-') 
FBF2 2609             (                    ROMbasic.ASM):04973           BNE  L8F96          BRANCH IF NO PLUS SIGN 
FBF4 8608             (                    ROMbasic.ASM):04974           LDA  #$08           GET THE PRE-SIGN FORCE FLAG 
FBF6 8A04             (                    ROMbasic.ASM):04975 L8F8F     ORA  #$04           ‘OR’ IN POST-SIGN FORCE FLAG 
FBF8 9A9A             (                    ROMbasic.ASM):04976           ORA  VDA            ‘OR’ IN THE STATUS BYTE 
FBFA 979A             (                    ROMbasic.ASM):04977           STA  VDA            SAVE THE STATUS BYTE 
FBFC 5A               (                    ROMbasic.ASM):04978           DECB                DECREMENT FORMAT STRING LENGTH 
                      (                    ROMbasic.ASM):04979                                
                      (                    ROMbasic.ASM):04980 ; EVALUATE NUMERIC ITEM-LIST                      
FBFD 9D82             (                    ROMbasic.ASM):04981 L8F96     JSR  GETCCH         GET CURRENT CHARACTER 
FBFF 1027FF3C         (                    ROMbasic.ASM):04982           LBEQ L8ED8          BRANCH IF END OF LINE 
FC03 D793             (                    ROMbasic.ASM):04983           STB  VD3            SAVE FORMAT STRING LENGTH WHEN FORMAT EVALUATION ENDED 
FC05 BDE3F2           (                    ROMbasic.ASM):04984           JSR  LB141          EVALUATE EXPRESSION 
FC08 9699             (                    ROMbasic.ASM):04985           LDA  VD9            GET THE LEFT DIGIT COUNTER 
FC0A 9B98             (                    ROMbasic.ASM):04986           ADDA VD8            ADD IT TO THE RIGHT DIGIT COUNTER 
FC0C 8111             (                    ROMbasic.ASM):04987           CMPA #17            * 
FC0E 1022EAE4         (                    ROMbasic.ASM):04988           LBHI LB44A          *‘FC’ ERROR IF MORE THAN 16 DIGITS AND DECIMAL POiNT 
FC12 BDFC4C           (                    ROMbasic.ASM):04989           JSR  L8FE5          CONVERT ITEM-LIST TO FORMATTED ASCII STRING 
FC15 301F             (                    ROMbasic.ASM):04990           LEAX $-01,X         MOVE BUFFER POINTER BACK ONE 
FC17 BDEC0D           (                    ROMbasic.ASM):04991           JSR  LB99C          DISPLAY THE FORMATTED STRING TO CONSOLE OUT 
FC1A 0F97             (                    ROMbasic.ASM):04992 L8FB3     CLR  VD7            RESET NEXT PRINT ITEM FLAG 
FC1C 9D82             (                    ROMbasic.ASM):04993           JSR  GETCCH         GET CURRENT INPUT CHARACTER 
FC1E 270D             (                    ROMbasic.ASM):04994           BEQ  L8FC6          BRANCH IF END OF LINE 
FC20 9797             (                    ROMbasic.ASM):04995           STA  VD7            SAVE CURRENT CHARACTER (<>0) IN NEXT PRINT ITEM FLAG 
FC22 813B             (                    ROMbasic.ASM):04996           CMPA #';'           * CHECK FOR ; - ITEM-LIST SEPARATOR AND 
FC24 2705             (                    ROMbasic.ASM):04997           BEQ  L8FC4          * BRANCH IF SEMICOLON 
FC26 BDE51E           (                    ROMbasic.ASM):04998           JSR  LB26D          SYNTAX CHECK FOR COMMA 
FC29 2002             (                    ROMbasic.ASM):04999           BRA  L8FC6          PROCESS NEXT PRINT ITEM 
FC2B 9D7C             (                    ROMbasic.ASM):05000 L8FC4     JSR  GETNCH         GET NEXT INPUT CHARACTER 
FC2D 9E95             (                    ROMbasic.ASM):05001 L8FC6     LDX  VD5            GET FORMAT STRING DESCRIPTOR ADDRESS 
FC2F E684             (                    ROMbasic.ASM):05002           LDB  ,X             GET LENGTH OF FORMAT STRING 
FC31 D093             (                    ROMbasic.ASM):05003           SUBB VD3            SUBTRACT AMOUNT OF FORMAT STRING LEFT AFTER LAST PRINT ITEM 
FC33 AE02             (                    ROMbasic.ASM):05004           LDX  $02,X          *GET FORMAT STRING START ADDRESS AND ADVANCE 
FC35 3A               (                    ROMbasic.ASM):05005           ABX  *POINTER TO START OF UNUSED FORMAT STRING  
FC36 D693             (                    ROMbasic.ASM):05006           LDB  VD3            * GET AMOUNT OF UNUSED FORMAT STRING 
FC38 1026FEE4         (                    ROMbasic.ASM):05007           LBNE L8EB9          * REINTERPRET FORMAT STRING FROM THAT POINT 
FC3C 7EFB39           (                    ROMbasic.ASM):05008           JMP  L8ED2          REINTERPRET FORMAT STRING FROM THE START IF ENTIRELY 
                      (                    ROMbasic.ASM):05009 ;         USED ON LAST PRINT ITEM  
                      (                    ROMbasic.ASM):05010                                
                      (                    ROMbasic.ASM):05011 ; PRINT A ‘+‘ TO CONSOLE OUT IF THE STATUS BYTE <> 0                      
FC3F 3402             (                    ROMbasic.ASM):05012 L8FD8     PSHS A              RESTORE ACCA AND RETURN 
FC41 862B             (                    ROMbasic.ASM):05013           LDA  #'+'           GET ASCII PLUS SIGN 
FC43 0D9A             (                    ROMbasic.ASM):05014           TST  VDA            * CHECK THE STATUS BYTE AND 
FC45 2703             (                    ROMbasic.ASM):05015           BEQ  L8FE3          * RETURN IF = 0 
FC47 BDDB17           (                    ROMbasic.ASM):05016           JSR  PUTCHR         SEND A CHARACTER TO CONSOLE OUT 
FC4A 3582             (                    ROMbasic.ASM):05017 L8FE3     PULS A,PC           RETURN ACCA AND RETURN 
                      (                    ROMbasic.ASM):05018                                
                      (                    ROMbasic.ASM):05019 ; CONVERT ITEM-LIST TO DECIMAL ASCII STRING                      
FC4C CE01F2           (                    ROMbasic.ASM):05020 L8FE5     LDU  #STRBUF+4      POINT U TO STRING BUFFER 
FC4F C620             (                    ROMbasic.ASM):05021           LDB  #SPACE         BLANK 
FC51 969A             (                    ROMbasic.ASM):05022           LDA  VDA            * GET THE STATUS FLAG AND 
FC53 8508             (                    ROMbasic.ASM):05023           BITA #$08           * CHECK FOR A PRE-SIGN FORCE 
FC55 2702             (                    ROMbasic.ASM):05024           BEQ  L8FF2          * BRANCH IF NO PRE-SIGN FORCE 
FC57 C62B             (                    ROMbasic.ASM):05025           LDB  #'+'           PLUS SIGN 
FC59 0D54             (                    ROMbasic.ASM):05026 L8FF2     TST  FP0SGN         CHECK THE SIGN OF FPA0 
FC5B 2A04             (                    ROMbasic.ASM):05027           BPL  L8FFA          BRANCH IF POSITIVE 
FC5D 0F54             (                    ROMbasic.ASM):05028           CLR  FP0SGN         FORCE FPA0 SIGN TO BE POSITIVE 
FC5F C62D             (                    ROMbasic.ASM):05029           LDB  #'-'           MINUS SIGN 
FC61 E7C0             (                    ROMbasic.ASM):05030 L8FFA     STB  ,U+            SAVE THE SIGN IN BUFFER 
FC63 C630             (                    ROMbasic.ASM):05031           LDB  #'0'           * PUT A ZERO INTO THE BUFFER 
FC65 E7C0             (                    ROMbasic.ASM):05032           STB  ,U+            * 
FC67 8401             (                    ROMbasic.ASM):05033           ANDA #$01           * CHECK THE EXPONENTIAL FORCE FLAG IN 
FC69 10260107         (                    ROMbasic.ASM):05034           LBNE L910D          * THE STATUS BYTE - BRANCH IF ACTIVE 
FC6D 8EF031           (                    ROMbasic.ASM):05035           LDX  #LBDC0         POINT X TO FLOATING POINT 1E + 09 
FC70 BDEF11           (                    ROMbasic.ASM):05036           JSR  LBCA0          COMPARE FPA0 TO (X) 
FC73 2B15             (                    ROMbasic.ASM):05037           BMI  L9023          BRANCH IF FPA0 < 1E+09 
FC75 BDF04A           (                    ROMbasic.ASM):05038           JSR  LBDD9          CONVERT FP NUMBER TO ASCII STRING 
FC78 A680             (                    ROMbasic.ASM):05039 L9011     LDA  ,X+            * ADVANCE POINTER TO END OF 
FC7A 26FC             (                    ROMbasic.ASM):05040           BNE  L9011          * ASCII STRING (ZERO BYTE) 
FC7C A682             (                    ROMbasic.ASM):05041 L9015     LDA  ,-X            MOVE THE 
FC7E A701             (                    ROMbasic.ASM):05042           STA  $01,X          ENTIRE STRING 
FC80 8C01F1           (                    ROMbasic.ASM):05043           CMPX #STRBUF+3      UP ONE 
FC83 26F7             (                    ROMbasic.ASM):05044           BNE  L9015          BYTE 
FC85 8625             (                    ROMbasic.ASM):05045           LDA  #'%'           * INSERT A % SIGN AT START OF 
FC87 A784             (                    ROMbasic.ASM):05046           STA  ,X             * STRING - OVERFLOW ERROR 
FC89 39               (                    ROMbasic.ASM):05047           RTS                  
                      (                    ROMbasic.ASM):05048                                
FC8A 964F             (                    ROMbasic.ASM):05049 L9023     LDA  FP0EXP         GET EXPONENT OF FPA0 
FC8C 9747             (                    ROMbasic.ASM):05050           STA  V47            AND SAVE IT IN V74 
FC8E 2703             (                    ROMbasic.ASM):05051           BEQ  L902C          BRANCH IF FPA0 = 0 
FC90 BDFE34           (                    ROMbasic.ASM):05052           JSR  L91CD          CONVERT FPA0 TO NUMBER WITH 9 SIGNIFICANT 
                      (                    ROMbasic.ASM):05053 ;              PLACES TO LEFT OF DECIMAL POINT  
FC93 9647             (                    ROMbasic.ASM):05054 L902C     LDA  V47            GET BASE 10 EXPONENT OFFSET 
FC95 102B0081         (                    ROMbasic.ASM):05055           LBMI L90B3          BRANCH IF FPA0 < 100,000,000 
FC99 40               (                    ROMbasic.ASM):05056           NEGA                * CALCULATE THE NUMBER OF LEADING ZEROES TO INSERT - 
FC9A 9B99             (                    ROMbasic.ASM):05057           ADDA VD9            * SUBTRACT BASE 10 EXPONENT OFFSET AND 9 (FPA0 HAS 
FC9C 8009             (                    ROMbasic.ASM):05058           SUBA #$09           * 9 PLACES TO LEFT OF EXPONENT) FROM LEFT DIGIT COUNTER 
FC9E BDFD51           (                    ROMbasic.ASM):05059           JSR  L90EA          PUT ACCA ZEROES IN STRING BUFFER 
FCA1 BDFECA           (                    ROMbasic.ASM):05060           JSR  L9263          INITIALIZE DECIMAL POINT AND COMMA COUNTERS 
FCA4 BDFE69           (                    ROMbasic.ASM):05061           JSR  L9202          CONVERT FPA0 TO DECIMAL ASCII IN THE STRING BUFFER 
FCA7 9647             (                    ROMbasic.ASM):05062           LDA  V47            * GET BASE 10 EXPONENT AND PUT THAT MANY 
FCA9 BDFEE8           (                    ROMbasic.ASM):05063           JSR  L9281          * ZEROES IN STRING BUFFER - STOP AT DECIMAL POINT 
FCAC 9647             (                    ROMbasic.ASM):05064           LDA  V47            WASTED INSTRUCTION - SERVES NO PURPOSE 
FCAE BDFEB0           (                    ROMbasic.ASM):05065           JSR  L9249          CHECK FOR DECIMAL POINT 
FCB1 9698             (                    ROMbasic.ASM):05066           LDA  VD8            GET THE RIGHT DIGIT COUNTER 
FCB3 2602             (                    ROMbasic.ASM):05067           BNE  L9050          BRANCH IF RIGHT DIGlT COUNTER <> 0 
FCB5 335F             (                    ROMbasic.ASM):05068           LEAU $-01,U         * MOVE BUFFER POINTER BACK ONE - DELETE 
                      (                    ROMbasic.ASM):05069 ;              * DECIMAL POINT IF NO RIGHT DIGITS SPECiFIED  
FCB7 4A               (                    ROMbasic.ASM):05070 L9050     DECA                SUBTRACT ONE (DECIMAL POINT) 
FCB8 BDFD51           (                    ROMbasic.ASM):05071           JSR  L90EA          PUT ACCA ZEROES INTO BUFFER (TRAILING ZEROES) 
FCBB BDFDEC           (                    ROMbasic.ASM):05072 L9054     JSR  L9185          INSERT ASTERISK PADDING, FLOATING $, AND POST-SIGN 
FCBE 4D               (                    ROMbasic.ASM):05073           TSTA                WAS THERE A POST-SIGN? 
FCBF 2706             (                    ROMbasic.ASM):05074           BEQ  L9060          NO 
FCC1 C12A             (                    ROMbasic.ASM):05075           CMPB #'*'           IS THE FIRST CHARACTER AN $? 
FCC3 2702             (                    ROMbasic.ASM):05076           BEQ  L9060          YES 
FCC5 E7C0             (                    ROMbasic.ASM):05077           STB  ,U+            STORE THE POST-SIGN 
FCC7 6FC4             (                    ROMbasic.ASM):05078 L9060     CLR  ,U             CLEAR THE LAST CHARACTER IN THE BUFFER 
                      (                    ROMbasic.ASM):05079 ;                              
                      (                    ROMbasic.ASM):05080 ; REMOVE ANY EXTRA BLANKS OR ASTERISKS FROM THE                      
                      (                    ROMbasic.ASM):05081 ; STRING BUFFER TO THE LEFT OF THE DECIMAL POINT                      
FCC9 8E01F1           (                    ROMbasic.ASM):05082           LDX  #STRBUF+3 POINT X TO THE START OF THE BUFFER  
FCCC 3001             (                    ROMbasic.ASM):05083 L9065     LEAX $01,X          MOVE BUFFER POINTER UP ONE 
FCCE 9F0F             (                    ROMbasic.ASM):05084           STX  TEMPTR         SAVE BUFFER POINTER IN TEMPTR 
FCD0 963A             (                    ROMbasic.ASM):05085           LDA  VARPTR+1       * GET ADDRESS OF DECIMAL POINT IN BUFFER, SUBTRACT 
FCD2 9010             (                    ROMbasic.ASM):05086           SUBA TEMPTR+1       * CURRENT POSITION AND SUBTRACT LEFT DIGIT COUNTER - 
FCD4 9099             (                    ROMbasic.ASM):05087           SUBA VD9            * THE RESULT WILL BE ZERO WHEN TEMPTR+1 IS POINTING 
                      (                    ROMbasic.ASM):05088 ;              * TO THE FIRST DIGIT OF THE FORMAT STRING  
FCD6 2738             (                    ROMbasic.ASM):05089           BEQ  L90A9          RETURN IF NO DIGITS TO LEFT OF THE DECiMAL POINT 
FCD8 A684             (                    ROMbasic.ASM):05090           LDA  ,X             GET THE CURRENT BUFFER CHARACTER 
FCDA 8120             (                    ROMbasic.ASM):05091           CMPA #SPACE         SPACE? 
FCDC 27EE             (                    ROMbasic.ASM):05092           BEQ  L9065          YES - ADVANCE POINTER 
FCDE 812A             (                    ROMbasic.ASM):05093           CMPA #'*'           ASTERISK? 
FCE0 27EA             (                    ROMbasic.ASM):05094           BEQ  L9065          YES - ADVANCE POINTER 
FCE2 4F               (                    ROMbasic.ASM):05095           CLRA                A ZERO ON THE STACK IS END OF DATA POINTER 
FCE3 3402             (                    ROMbasic.ASM):05096 L907C     PSHS A              PUSH A CHARACTER ONTO THE STACK 
FCE5 A680             (                    ROMbasic.ASM):05097           LDA  ,X+            GET NEXT CHARACTER FROM BUFFER 
FCE7 812D             (                    ROMbasic.ASM):05098           CMPA #'-'           MINUS SIGN? 
FCE9 27F8             (                    ROMbasic.ASM):05099           BEQ  L907C          YES 
FCEB 812B             (                    ROMbasic.ASM):05100           CMPA #'+'           PLUS SIGN? 
FCED 27F4             (                    ROMbasic.ASM):05101           BEQ  L907C          YES 
                      (                    ROMbasic.ASM):05102 ;          CMPA $'$'          ; DOLLAR SIGN?  - source from Ext Basic unravelled book
FCEF 8124             (                    ROMbasic.ASM):05103            CMPA #'$'          ; DOLLAR SIGN?  - this is what it should be (opcodes match Ext Basic unravelled)
                      (                    ROMbasic.ASM):05104 ;          FCB  $91,$00       ; this is what the HEX file from grant's site shows
FCF1 27F0             (                    ROMbasic.ASM):05105           BEQ  L907C          YES 
FCF3 8130             (                    ROMbasic.ASM):05106           CMPA #'0'           ZERO? 
FCF5 260E             (                    ROMbasic.ASM):05107           BNE  L909E          NO - ERROR 
FCF7 A601             (                    ROMbasic.ASM):05108           LDA  $01,X          GET CHARACTER FOLLOWING ZERO 
FCF9 8D16             (                    ROMbasic.ASM):05109           BSR  L90AA          CLEAR CARRY IF NUMERIC 
FCFB 2508             (                    ROMbasic.ASM):05110           BLO  L909E          BRANCH IF NOT A NUMERIC CHARACTER - ERROR 
FCFD 3502             (                    ROMbasic.ASM):05111 L9096     PULS A              * PULL A CHARACTER OFF OF THE STACK 
FCFF A782             (                    ROMbasic.ASM):05112           STA  ,-X            * AND PUT IT BACK IN THE STRING BUFFER 
FD01 26FA             (                    ROMbasic.ASM):05113           BNE  L9096          * KEEP GOING UNTIL ZERO FLAG 
FD03 20C7             (                    ROMbasic.ASM):05114           BRA  L9065          KEEP CLEANING UP THE INPUT BUFFER 
FD05 3502             (                    ROMbasic.ASM):05115 L909E     PULS A               
FD07 4D               (                    ROMbasic.ASM):05116           TSTA                * THE STACK AND EXIT WHEN 
FD08 26FB             (                    ROMbasic.ASM):05117           BNE  L909E          * ZERO FLAG FOUND 
FD0A 9E0F             (                    ROMbasic.ASM):05118           LDX  TEMPTR         GET THE STRING BUFFER START POINTER 
FD0C 8625             (                    ROMbasic.ASM):05119           LDA  #'%'           * PUT A % SIGN BEFORE THE ERROR POSITION TO 
FD0E A782             (                    ROMbasic.ASM):05120           STA  ,-X            * INDICATE AN ERROR 
FD10 39               (                    ROMbasic.ASM):05121 L90A9     RTS                  
                      (                    ROMbasic.ASM):05122 ;                              
                      (                    ROMbasic.ASM):05123 ; CLEAR CARRY IF NUMERIC                      
FD11 8130             (                    ROMbasic.ASM):05124 L90AA     CMPA #'0'           ASCII ZERO 
FD13 2504             (                    ROMbasic.ASM):05125           BLO  L90B2          RETURN IF ACCA < ASCII 0 
FD15 803A             (                    ROMbasic.ASM):05126           SUBA #$3A           *  #'9'+1 
FD17 80C6             (                    ROMbasic.ASM):05127           SUBA #$C6           * #-('9'+1)  CARRY CLEAR IF NUMERIC 
FD19 39               (                    ROMbasic.ASM):05128 L90B2     RTS                  
                      (                    ROMbasic.ASM):05129 ;                              
                      (                    ROMbasic.ASM):05130 ; PROCESS AN ITEM-LIST WHICH IS < 100,000,000                      
FD1A 9698             (                    ROMbasic.ASM):05131 L90B3     LDA  VD8            GET RIGHT DIGIT COUNTER 
FD1C 2701             (                    ROMbasic.ASM):05132           BEQ  L90B8          BRANCH IF NO FORMATTED DIGITS TO THE RIGHT OF DECIMAL PT 
FD1E 4A               (                    ROMbasic.ASM):05133           DECA                SUBTRACT ONE FOR DECIMAL POINT 
FD1F 9B47             (                    ROMbasic.ASM):05134 L90B8     ADDA V47            *ADD THE BASE 10 EXPONENT OFFSET - ACCA CONTAINS THE 
                      (                    ROMbasic.ASM):05135 ;         *NUMBER OF SHIFTS REQUIRED TO ADJUST FPA0 TO THE SPECIFIED  
                      (                    ROMbasic.ASM):05136 ;         *NUMBER OF DlGITS TO THE RIGHT OF THE DECIMAL POINT  
FD21 2B01             (                    ROMbasic.ASM):05137           BMI  L90BD          IF ACCA >= 0 THEN NO SHIFTS ARE REQUIRED 
FD23 4F               (                    ROMbasic.ASM):05138           CLRA                FORCE SHIFT COUNTER = 0 
FD24 3402             (                    ROMbasic.ASM):05139 L90BD     PSHS A              SAVE INITIAL SHIFT COUNTER ON THE STACK 
FD26 2A0A             (                    ROMbasic.ASM):05140 L90BF     BPL  L90CB          EXIT ROUTINE IF POSITIVE 
FD28 3402             (                    ROMbasic.ASM):05141           PSHS A              SAVE SHIFT COUNTER ON STACK 
FD2A BDEDF3           (                    ROMbasic.ASM):05142           JSR  LBB82          DIVIDE FPA0 BY 10 - SHIFT ONE DIGIT TO RIGHT 
FD2D 3502             (                    ROMbasic.ASM):05143           PULS A              GET SHIFT COUNTER FROM THE STACK 
FD2F 4C               (                    ROMbasic.ASM):05144           INCA                BUMP SHIFT COUNTER UP BY ONE 
FD30 20F4             (                    ROMbasic.ASM):05145           BRA  L90BF          CHECK FOR FURTHER DIVISION 
FD32 9647             (                    ROMbasic.ASM):05146 L90CB     LDA  V47            * GET BASE 10 EXPONENT OFFSET, ADD INITIAL SHIFT COUNTER 
FD34 A0E0             (                    ROMbasic.ASM):05147           SUBA ,S+            * AND SAVE NEW BASE 10 EXPONENT OFFSET - BECAUSE 
FD36 9747             (                    ROMbasic.ASM):05148           STA  V47            * FPA0 WAS SHIFTED ABOVE 
FD38 8B09             (                    ROMbasic.ASM):05149           ADDA #$09           * ADD NINE (SIGNIFICANT PLACES) AND BRANCH IF THERE ARE NO 
FD3A 2B19             (                    ROMbasic.ASM):05150           BMI  L90EE          * ZEROES TO THE LEFT OF THE DECIMAL POINT IN THIS PRINT ITEM 
FD3C 9699             (                    ROMbasic.ASM):05151           LDA  VD9            *DETERMINE HOW MANY FILLER ZEROES TO THE LEFT OF THE DECIMAL 
FD3E 8009             (                    ROMbasic.ASM):05152           SUBA #$09           *POINT. GET THE NUMBER OF FORMAT PLACES TO LEFT OF DECIMAL 
FD40 9047             (                    ROMbasic.ASM):05153           SUBA V47            *POINT, SUBTRACT THE BASE 10 EXPONENT OFFSET AND THE CONSTANT 9 
FD42 8D0D             (                    ROMbasic.ASM):05154           BSR  L90EA          *(UNNORMALIZATION)-THEN OUTPUT THAT MANY ZEROES TO THE BUFFER 
FD44 BDFECA           (                    ROMbasic.ASM):05155           JSR  L9263          INITIALIZE DECIMAL POINT AND COMMA COUNTERS 
FD47 201D             (                    ROMbasic.ASM):05156           BRA  L90FF          PROCESS THE REMAINDER OF THE PRINT ITEM 
                      (                    ROMbasic.ASM):05157 ;                              
                      (                    ROMbasic.ASM):05158 ; PUT (ACCA+1) ASCII ZEROES IN BUFFER                      
FD49 3402             (                    ROMbasic.ASM):05159 L90E2     PSHS A              SAVE ZERO COUNTER 
FD4B 8630             (                    ROMbasic.ASM):05160           LDA  #'0'           * INSERT A ZERO INTO 
FD4D A7C0             (                    ROMbasic.ASM):05161           STA  ,U+            * THE BUFFER 
FD4F 3502             (                    ROMbasic.ASM):05162           PULS A              RESTORE ZERO COUNTER 
                      (                    ROMbasic.ASM):05163                                
                      (                    ROMbasic.ASM):05164 ; PUT ACCA ASCII ZEROES INTO THE BUFFER                      
FD51 4A               (                    ROMbasic.ASM):05165 L90EA     DECA                DECREMENT ZERO COUNTER 
FD52 2AF5             (                    ROMbasic.ASM):05166           BPL  L90E2          BRANCH IF NOT DONE 
FD54 39               (                    ROMbasic.ASM):05167           RTS                  
                      (                    ROMbasic.ASM):05168                                
FD55 9699             (                    ROMbasic.ASM):05169 L90EE     LDA  VD9            * GET THE LEFT DIGIT COUNTER AND PUT 
FD57 8DF8             (                    ROMbasic.ASM):05170           BSR  L90EA          * THAT MANY ZEROES IN THE STRiNG BUFFER 
FD59 BDFEB4           (                    ROMbasic.ASM):05171           JSR  L924D          PUT THE DECIMAL POINT IN THE STRING BUFFER 
FD5C 86F7             (                    ROMbasic.ASM):05172           LDA  #-9            *DETERMINE HOW MANY FILLER ZEROES BETWEEN THE DECIMAL POINT 
FD5E 9047             (                    ROMbasic.ASM):05173           SUBA V47            *AND SIGNIFICANT DATA. SUBTRACT BASE 10 EXPONENT FROM -9 
FD60 8DEF             (                    ROMbasic.ASM):05174           BSR  L90EA          *(UNNORMALIZATION) AND OUTPUT THAT MANY ZEROES TO BUFFER 
FD62 0F45             (                    ROMbasic.ASM):05175           CLR  V45            CLEAR THE DECIMAL POINT COUNTER - SUPPRESS THE DECIMAL POINT 
FD64 0F97             (                    ROMbasic.ASM):05176           CLR  VD7            CLEAR THE COMMA COUNTER - SUPPRESS COMMAS 
FD66 BDFE69           (                    ROMbasic.ASM):05177 L90FF     JSR  L9202          DECODE FPA0 INTO A DECIMAL ASCII STRING 
FD69 9698             (                    ROMbasic.ASM):05178           LDA  VD8            GET THE RIGHT DIGIT COUNTER 
FD6B 2602             (                    ROMbasic.ASM):05179           BNE  L9108          BRANCH IF RIGHT DIGIT COUNTER <> 0 
FD6D DE39             (                    ROMbasic.ASM):05180           LDU  VARPTR         RESET BUFFER PTR TO THE DECIMAL POINT IF NO DIGITS TO RIGHT 
FD6F 9B47             (                    ROMbasic.ASM):05181 L9108     ADDA V47            *ADD BASE 10 EXPONENT - A POSITIVE ACCA WILL CAUSE THAT MANY 
                      (                    ROMbasic.ASM):05182 ; *FILLER ZEROES TO BE OUTPUT TO THE RIGHT OF LAST SIGNIFICANT DATA                      
FD71 16FF43           (                    ROMbasic.ASM):05183           LBRA L9050          INSERT LEADING ASTERISKS, FLOATING DOLLAR SIGN, ETC 
                      (                    ROMbasic.ASM):05184 ;                              
                      (                    ROMbasic.ASM):05185 ; FORCE THE NUMERIC OUTPUT FORMAT TO BE EXPONENTIAL FORMAT                      
FD74 964F             (                    ROMbasic.ASM):05186 L910D     LDA  FP0EXP         * GET EXPONENT OF FPA0 AND 
FD76 3402             (                    ROMbasic.ASM):05187           PSHS A              * SAVE IT ON THE STACK 
FD78 2703             (                    ROMbasic.ASM):05188           BEQ  L9116          BRANCH IF FPA0 = 0 
FD7A BDFE34           (                    ROMbasic.ASM):05189           JSR  L91CD          *CONVERT FPA0 INTO A NUMBER WITH 9 SIGNIFICANT 
                      (                    ROMbasic.ASM):05190 ;                                 DIGITS TO THE LEFT OF THE DECIMAL POINT  
FD7D 9698             (                    ROMbasic.ASM):05191 L9116     LDA  VD8            GET THE RIGHT DIGIT COUNTER 
FD7F 2701             (                    ROMbasic.ASM):05192           BEQ  L911B          BRANCH IF NO FORMATTED DIGITS TO THE RIGHT 
FD81 4A               (                    ROMbasic.ASM):05193           DECA                SUBTRACT ONE FOR THE DECIMAL POINT 
FD82 9B99             (                    ROMbasic.ASM):05194 L911B     ADDA VD9            ADD TO THE LEFT DIGIT COUNTER 
FD84 7F01F1           (                    ROMbasic.ASM):05195           CLR  STRBUF+3       CLEAR BUFFER BYTE AS TEMPORARY STORAGE LOCATION 
FD87 D69A             (                    ROMbasic.ASM):05196           LDB  VDA            * GET THE STATUS BYTE FOR A 
FD89 C404             (                    ROMbasic.ASM):05197           ANDB #$04           * POST-BYTE FORCE; BRANCH IF 
FD8B 2603             (                    ROMbasic.ASM):05198           BNE  L9129          * A POST-BYTE FORCE 
FD8D 7301F1           (                    ROMbasic.ASM):05199           COM  STRBUF+3       TOGGLE BUFFER BYTE TO -1 IF NO POST-BYTE FORCE 
FD90 BB01F1           (                    ROMbasic.ASM):05200 L9129     ADDA STRBUF+3       SUBTRACT 1 IF NO POST BYTE FORCE 
FD93 8009             (                    ROMbasic.ASM):05201           SUBA #$09           *SUBTRACT 9 (DUE TO THE CONVERSION TO 9 
                      (                    ROMbasic.ASM):05202 ;                                 SIGNIFICANT DIGITS TO LEFT OF DECIMAL POINT)  
FD95 3402             (                    ROMbasic.ASM):05203           PSHS A              * SAVE SHIFT COUNTER ON THE STACK - ACCA CONTAINS THE NUMBER 
                      (                    ROMbasic.ASM):05204 ;                                 OF SHIFTS REQUIRED TO ADJUST FPA0 FOR THE NUMBER OF  
                      (                    ROMbasic.ASM):05205 ;                                 FORMATTED PLACES TO THE RIGHT OF THE DECIMAL POINT.  
FD97 2A0A             (                    ROMbasic.ASM):05206 L9130     BPL  L913C          NO MORE SHIFTS WHEN ACCA >= 0 
FD99 3402             (                    ROMbasic.ASM):05207           PSHS A              SAVE SHIFT COUNTER 
FD9B BDEDF3           (                    ROMbasic.ASM):05208           JSR  LBB82          DIVIDE FPA0 BY 10 - SHIFT TO RIGHT ONE 
FD9E 3502             (                    ROMbasic.ASM):05209           PULS A              RESTORE THE SHIFT COUNTER 
FDA0 4C               (                    ROMbasic.ASM):05210           INCA                ADD 1 TO SHIFT COUNTER 
FDA1 20F4             (                    ROMbasic.ASM):05211           BRA  L9130          CHECK FOR FURTHER SHIFTING (DIVISION) 
FDA3 A6E4             (                    ROMbasic.ASM):05212 L913C     LDA  ,S             *GET THE INITIAL VALUE OF THE SHIFT COUNTER 
FDA5 2B01             (                    ROMbasic.ASM):05213           BMI  L9141          *AND BRANCH IF SHIFTING HAS TAKEN PLACE 
FDA7 4F               (                    ROMbasic.ASM):05214           CLRA                RESET ACCA IF NO SHIFTING HAS TAKEN PLACE 
FDA8 40               (                    ROMbasic.ASM):05215 L9141     NEGA                *CALCULATE THE POSITION OF THE DECIMAL POINT BY 
FDA9 9B99             (                    ROMbasic.ASM):05216           ADDA VD9            *NEGATING SHIFT COUNTER, ADDING THE LEFT DIGIT COUNTER 
FDAB 4C               (                    ROMbasic.ASM):05217           INCA                *PLUS ONE AND THE POST-BYTE POSlTION, IF USED 
FDAC BB01F1           (                    ROMbasic.ASM):05218           ADDA STRBUF+3       * 
FDAF 9745             (                    ROMbasic.ASM):05219           STA  V45            SAVE DECIMAL POINT COUNTER 
FDB1 0F97             (                    ROMbasic.ASM):05220           CLR  VD7            CLEAR COMMA COUNTER - NO COMMAS INSERTED 
FDB3 BDFE69           (                    ROMbasic.ASM):05221           JSR  L9202          CONVERT FPA0 INTO ASCII DECIMAL STRING 
FDB6 3502             (                    ROMbasic.ASM):05222           PULS A              * GET THE INITIAL VALUE OF SHIFT COUNTER AND 
FDB8 BDFEE8           (                    ROMbasic.ASM):05223           JSR  L9281          * INSERT THAT MANY ZEROES INTO THE BUFFER 
FDBB 9698             (                    ROMbasic.ASM):05224           LDA  VD8            *GET THE RIGHT DIGIT COUNTER AND BRANCH 
FDBD 2602             (                    ROMbasic.ASM):05225           BNE  L915A          *IF NOT ZERO 
FDBF 335F             (                    ROMbasic.ASM):05226           LEAU $-01,U         MOVE BUFFER POINTER BACK ONE 
                      (                    ROMbasic.ASM):05227                                
                      (                    ROMbasic.ASM):05228 ; CALCULATE VALUE OF EXPONENT AND PUT IN STRING BUFFER                      
FDC1 E6E0             (                    ROMbasic.ASM):05229 L915A     LDB  ,S+            GET ORIGINAL EXPONENT OF FPA0 
FDC3 2709             (                    ROMbasic.ASM):05230           BEQ  L9167          BRANCH IF EXPONENT = 0 
FDC5 D647             (                    ROMbasic.ASM):05231           LDB  V47            GET BASE 10 EXPONENT 
FDC7 CB09             (                    ROMbasic.ASM):05232           ADDB #$09           ADD 9 FOR 9 SIGNIFICANT DIGIT CONVERSION 
FDC9 D099             (                    ROMbasic.ASM):05233           SUBB VD9            SUBTRACT LEFT DIGIT COUNTER 
FDCB F001F1           (                    ROMbasic.ASM):05234           SUBB STRBUF+3       ADD ONE TO EXPONENT IF POST-SIGN FORCE 
FDCE 862B             (                    ROMbasic.ASM):05235 L9167     LDA  #'+'           PLUS SIGN 
FDD0 5D               (                    ROMbasic.ASM):05236           TSTB TEST EXPONENT   
FDD1 2A03             (                    ROMbasic.ASM):05237           BPL  L916F          BRANCH IF POSITIVE EXPONENT 
FDD3 862D             (                    ROMbasic.ASM):05238           LDA  #'-'           MINUS SIGN 
FDD5 50               (                    ROMbasic.ASM):05239           NEGB                CONVERT EXPONENT TO POSITIVE NUMBER 
FDD6 A741             (                    ROMbasic.ASM):05240 L916F     STA  $01,U          PUT SIGN OF EXPONENT IN STRING BUFFER 
FDD8 8645             (                    ROMbasic.ASM):05241           LDA  #'E'           * PUT AN ‘E’ (EXPONENTIATION FLAG) IN 
FDDA A7C1             (                    ROMbasic.ASM):05242           STA  ,U++           * BUFFER AND SKIP OVER THE SIGN 
FDDC 862F             (                    ROMbasic.ASM):05243           LDA  #$2F           * WAS LDA #'0'-1 
                      (                    ROMbasic.ASM):05244 ;CONVERT BINARY EXPONENT IN ACCB TO ASCII VALUE IN ACCA                      
FDDE 4C               (                    ROMbasic.ASM):05245 L9177     INCA                ADD ONE TO TENS DIGIT COUNTER 
FDDF C00A             (                    ROMbasic.ASM):05246           SUBB #10            *SUBTRACT 10 FROM EXPONENT AND ADD ONE TO TENS 
FDE1 24FB             (                    ROMbasic.ASM):05247           BCC  L9177          * DIGIT IF NO CARRY. TENS DIGIT DONE IF THERE IS A CARRY 
FDE3 CB3A             (                    ROMbasic.ASM):05248           ADDB #$3A           WAS ADDB #'9'+1 
FDE5 EDC1             (                    ROMbasic.ASM):05249           STD  ,U++           SAVE EXPONENT IN BUFFER 
FDE7 6FC4             (                    ROMbasic.ASM):05250           CLR  ,U             CLEAR FINAL BYTE IN BUFFER - PRINT TERMINATOR 
FDE9 7EFCBB           (                    ROMbasic.ASM):05251           JMP  L9054          INSERT ASTERISK PADDING, FLOATING DOLLAR SIGN, ETC. 
                      (                    ROMbasic.ASM):05252                                
                      (                    ROMbasic.ASM):05253 ; INSERT ASTERISK PADDING, FLOATING $ AND PRE-SIGN                      
FDEC 8E01F2           (                    ROMbasic.ASM):05254 L9185     LDX  #STRBUF+4      POINT X TO START OF PRINT ITEM BUFFER 
FDEF E684             (                    ROMbasic.ASM):05255           LDB  ,X             * GET SIGN BYTE OF ITEM-LIST BUFFER 
FDF1 3404             (                    ROMbasic.ASM):05256           PSHS B              * AND SAVE IT ON THE STACK 
FDF3 8620             (                    ROMbasic.ASM):05257           LDA  #SPACE         DEFAULT PAD WITH BLANKS 
FDF5 D69A             (                    ROMbasic.ASM):05258           LDB  VDA            * GET STATUS BYTE AND CHECK FOR 
FDF7 C520             (                    ROMbasic.ASM):05259           BITB #$20           * ASTERISK LEFT PADDING 
FDF9 3504             (                    ROMbasic.ASM):05260           PULS B              GET SIGN BYTE AGAIN 
FDFB 2708             (                    ROMbasic.ASM):05261           BEQ  L919E          BRANCH IF NO PADDING 
FDFD 862A             (                    ROMbasic.ASM):05262           LDA  #'*'           PAD WITH ASTERISK 
FDFF C120             (                    ROMbasic.ASM):05263           CMPB #SPACE         WAS THE FIRST BYTE A BLANK (POSITIVE)? 
FE01 2602             (                    ROMbasic.ASM):05264           BNE  L919E          NO 
FE03 1F89             (                    ROMbasic.ASM):05265           TFR  A,B            TRANSFER PAD CHARACTER TO ACCB 
FE05 3404             (                    ROMbasic.ASM):05266 L919E     PSHS B              SAVE FIRST CHARACTER ON STACK 
FE07 A780             (                    ROMbasic.ASM):05267 L91A0     STA  ,X+            STORE PAD CHARACTER IN BUFFER 
FE09 E684             (                    ROMbasic.ASM):05268           LDB  ,X             GET NEXT CHARACTER IN BUFFER 
FE0B 2710             (                    ROMbasic.ASM):05269           BEQ  L91B6          INSERT A ZERO IF END OF BUFFER 
FE0D C145             (                    ROMbasic.ASM):05270           CMPB #'E'           * CHECK FOR AN ‘E’ AND 
FE0F 270C             (                    ROMbasic.ASM):05271           BEQ  L91B6          * PUT A ZERO BEFORE IT 
FE11 C130             (                    ROMbasic.ASM):05272           CMPB #'0'           * REPLACE LEADING ZEROES WITH 
FE13 27F2             (                    ROMbasic.ASM):05273           BEQ  L91A0          * PAD CHARACTERS 
FE15 C12C             (                    ROMbasic.ASM):05274           CMPB #','           * REPLACE LEADING COMMAS 
FE17 27EE             (                    ROMbasic.ASM):05275           BEQ  L91A0          * WITH PAD CHARACTERS 
FE19 C12E             (                    ROMbasic.ASM):05276           CMPB #'.'           * CHECK FOR DECIMAL POINT 
FE1B 2604             (                    ROMbasic.ASM):05277           BNE  L91BA          * AND DON’T PUT A ZERO BEFORE IT 
FE1D 8630             (                    ROMbasic.ASM):05278 L91B6     LDA  #'0'           * REPLACE PREVIOUS CHARACTER 
FE1F A782             (                    ROMbasic.ASM):05279           STA  ,-X            * WITH A ZERO 
FE21 969A             (                    ROMbasic.ASM):05280 L91BA     LDA  VDA            * GET STATUS BYTE, CHECK 
FE23 8510             (                    ROMbasic.ASM):05281           BITA #$10           * FOR FLOATING $ 
FE25 2704             (                    ROMbasic.ASM):05282           BEQ  L91C4          * BRANCH IF NO FLOATING $ 
FE27 C624             (                    ROMbasic.ASM):05283           LDB  #'$'           * STORE A $ IN 
FE29 E782             (                    ROMbasic.ASM):05284           STB  ,-X            * BUFFER 
FE2B 8404             (                    ROMbasic.ASM):05285 L91C4     ANDA #$04           CHECK PRE-SIGN FLAG 
FE2D 3504             (                    ROMbasic.ASM):05286           PULS B              GET SIGN CHARACTER 
FE2F 2602             (                    ROMbasic.ASM):05287           BNE  L91CC          RETURN IF POST-SIGN REQUIRED 
FE31 E782             (                    ROMbasic.ASM):05288           STB  ,-X            STORE FIRST CHARACTER 
FE33 39               (                    ROMbasic.ASM):05289 L91CC     RTS                  
                      (                    ROMbasic.ASM):05290 ;                              
                      (                    ROMbasic.ASM):05291 ; CONVERT FPA0 INTO A NUMBER OF THE FORM - NNN,NNN,NNN X 10**M.                      
                      (                    ROMbasic.ASM):05292 ; THE EXPONENT M WILL BE RETURNED IN V47 (BASE 10 EXPONENT).                      
FE34 3440             (                    ROMbasic.ASM):05293 L91CD     PSHS U              SAVE BUFFER POINTER 
FE36 4F               (                    ROMbasic.ASM):05294           CLRA                INITIAL EXPONENT OFFSET = 0 
FE37 9747             (                    ROMbasic.ASM):05295 L91D0     STA  V47            SAVE EXPONENT OFFSET 
FE39 D64F             (                    ROMbasic.ASM):05296           LDB  FP0EXP         GET EXPONENT OF FPA0 
FE3B C180             (                    ROMbasic.ASM):05297           CMPB #$80           * COMPARE TO EXPONENT OF .5 
FE3D 2211             (                    ROMbasic.ASM):05298           BHI  L91E9          * AND BRANCH IF FPA0 > = 1.0 
                      (                    ROMbasic.ASM):05299                                
                      (                    ROMbasic.ASM):05300 ; IF FPA0 < 1.0, MULTIPLY IT BY 1E+09 UNTIL IT IS >= 1                      
FE3F 8EF031           (                    ROMbasic.ASM):05301           LDX  #LBDC0         POINT X TO FP NUMBER (1E+09) 
FE42 BDED3B           (                    ROMbasic.ASM):05302           JSR  LBACA          MULTIPLY FPA0 BY 1E+09 
FE45 9647             (                    ROMbasic.ASM):05303           LDA  V47            GET EXPONENT OFFSET 
FE47 8009             (                    ROMbasic.ASM):05304           SUBA #$09           SUBTRACT 9 (BECAUSE WE MULTIPLIED BY 1E+09 ABOVE) 
FE49 20EC             (                    ROMbasic.ASM):05305           BRA  L91D0          CHECK TO SEE IF > 1.0 
FE4B BDEDF3           (                    ROMbasic.ASM):05306 L91E4     JSR  LBB82          DIVIDE FPA0 BY 10 
FE4E 0C47             (                    ROMbasic.ASM):05307           INC  V47            INCREMENT EXPONENT OFFSET 
FE50 8EF02C           (                    ROMbasic.ASM):05308 L91E9     LDX  #LBDBB         POINT X TO FP NUMBER (999,999,999) 
FE53 BDEF11           (                    ROMbasic.ASM):05309           JSR  LBCA0          COMPARE FPA0 TO X 
FE56 2EF3             (                    ROMbasic.ASM):05310           BGT  L91E4          BRANCH IF FPA0 > 999,999,999 
FE58 8EF027           (                    ROMbasic.ASM):05311 L91F1     LDX  #LBDB6         POINT X TO FP NUMBER (99,999,999.9) 
FE5B BDEF11           (                    ROMbasic.ASM):05312           JSR  LBCA0          COMPARE FPA0 TO X 
FE5E 2E07             (                    ROMbasic.ASM):05313           BGT  L9200          RETURN IF 999,999,999 > FPA0 > 99,999,999.9 
FE60 BDEDDB           (                    ROMbasic.ASM):05314           JSR  LBB6A          MULTIPLY FPA0 BY 10 
FE63 0A47             (                    ROMbasic.ASM):05315           DEC  V47            DECREMENT EXPONENT OFFSET 
FE65 20F1             (                    ROMbasic.ASM):05316           BRA  L91F1          KEEP UNNORMALIZING 
FE67 35C0             (                    ROMbasic.ASM):05317 L9200     PULS U,PC           RESTORE BUFFER POINTER AND RETURN 
                      (                    ROMbasic.ASM):05318 ;                              
                      (                    ROMbasic.ASM):05319 ; CONVERT FPA0 INTO AN INTEGER, THEN DECODE IT                      
                      (                    ROMbasic.ASM):05320 ; INTO A DECIMAL ASCII STRING IN THE BUFFER                      
FE69 3440             (                    ROMbasic.ASM):05321 L9202     PSHS U              SAVE BUFFER POINTER 
FE6B BDEC25           (                    ROMbasic.ASM):05322           JSR  LB9B4          ADD .5 TO FPA0 (ROUND OFF) 
FE6E BDEF39           (                    ROMbasic.ASM):05323           JSR  LBCC8          CONVERT FPA0 TO INTEGER FORMAT 
FE71 3540             (                    ROMbasic.ASM):05324           PULS U              RESTORE BUFFER POINTER 
                      (                    ROMbasic.ASM):05325 ;                              
                      (                    ROMbasic.ASM):05326 ; CONVERT FPA0 INTO A DECIMAL ASCII STRING                      
FE73 8EF136           (                    ROMbasic.ASM):05327           LDX  #LBEC5         POINT X TO UNNORMALIZED POWERS OF 10 
FE76 C680             (                    ROMbasic.ASM):05328           LDB  #$80           INITIALIZE DIGIT COUNTER TO 0 + $80. 
                      (                    ROMbasic.ASM):05329 ; BIT 7 SET IS USED TO INDICATE THAT THE POWER OF 10 MANTISSA                      
                      (                    ROMbasic.ASM):05330 ; IS NEGATIVE. WHEN YOU ‘ADD’ A NEGATIVE MANTISSA, IT IS                      
                      (                    ROMbasic.ASM):05331 ; THE SAME AS SUBTRACTING A POSITIVE ONE AND BIT 7 OF ACCB                      
                      (                    ROMbasic.ASM):05332 ; IS HOW THIS ROUTINE KNOWS THAT A ‘SUBTRACTION’ IS OCCURRING.                      
FE78 8D36             (                    ROMbasic.ASM):05333 L9211     BSR  L9249          CHECK FOR COMMA INSERTION 
FE7A 9653             (                    ROMbasic.ASM):05334 L9213     LDA  FPA0+3         * ‘ADD’ A POWER OF 10 MANTISSA TO FPA0. 
FE7C AB03             (                    ROMbasic.ASM):05335           ADDA $03,X          * IF THE MANTISSA IS NEGATIVE, A SUBTRACTION 
FE7E 9753             (                    ROMbasic.ASM):05336           STA  FPA0+3         * WILL BE WHAT REALLY TAKES PLACE. 
FE80 9652             (                    ROMbasic.ASM):05337           LDA  FPA0+2         * 
FE82 A902             (                    ROMbasic.ASM):05338           ADCA $02,X          * 
FE84 9752             (                    ROMbasic.ASM):05339           STA  FPA0+2         * 
FE86 9651             (                    ROMbasic.ASM):05340           LDA  FPA0+1         * 
FE88 A901             (                    ROMbasic.ASM):05341           ADCA $01,X          * 
FE8A 9751             (                    ROMbasic.ASM):05342           STA  FPA0+1         * 
FE8C 9650             (                    ROMbasic.ASM):05343           LDA  FPA0           * 
FE8E A984             (                    ROMbasic.ASM):05344           ADCA ,X             * 
FE90 9750             (                    ROMbasic.ASM):05345           STA  FPA0           * 
FE92 5C               (                    ROMbasic.ASM):05346           INCB                ADD ONE TO DIGIT COUNTER 
FE93 56               (                    ROMbasic.ASM):05347           RORB ROTATE CARRY INTO BIT 7  
FE94 59               (                    ROMbasic.ASM):05348           ROLB                * SET OVERFLOW FLAG - BRANCH IF CARRY SET AND 
FE95 28E3             (                    ROMbasic.ASM):05349           BVC  L9213          * ADDING MANTISSA OR CARRY CLEAR AND SUBTRACTING MANTISSA 
FE97 2403             (                    ROMbasic.ASM):05350           BCC  L9235          BRANCH IF SUBTRACTING MANTISSA 
FE99 C00B             (                    ROMbasic.ASM):05351           SUBB #10+1          WAS SUBB #10+1 
FE9B 50               (                    ROMbasic.ASM):05352           NEGB                * IF ADDING MANTISSA 
FE9C CB2F             (                    ROMbasic.ASM):05353 L9235     ADDB #$2F           WAS ADDB #'0'-1 
FE9E 3004             (                    ROMbasic.ASM):05354           LEAX $04,X          MOVE TO NEXT POWER OF 10 MANTISSA 
FEA0 1F98             (                    ROMbasic.ASM):05355           TFR  B,A            SAVE DIGIT IN ACCA 
FEA2 847F             (                    ROMbasic.ASM):05356           ANDA #$7F           MASK OFF ADD/SUBTRACT FLAG (BIT 7) 
FEA4 A7C0             (                    ROMbasic.ASM):05357           STA  ,U+            STORE DIGIT IN BUFFER 
FEA6 53               (                    ROMbasic.ASM):05358           COMB                TOGGLE ADD/SUBTRACT FLAG 
FEA7 C480             (                    ROMbasic.ASM):05359           ANDB #$80           MASK OFF EVERYTHING BUT ADD/SUB FLAG 
FEA9 8CF15A           (                    ROMbasic.ASM):05360           CMPX #LBEE9         COMPARE TO END OF UNNORMALIZED POWERS OF 10 
FEAC 26CA             (                    ROMbasic.ASM):05361           BNE  L9211          BRANCH IF NOT DONE 
FEAE 6FC4             (                    ROMbasic.ASM):05362           CLR  ,U             PUT A ZERO AT END OF INTEGER 
                      (                    ROMbasic.ASM):05363                                
                      (                    ROMbasic.ASM):05364 ; DECREMENT DECIMAL POINT COUNTER AND CHECK FOR COMMA INSERTION                      
FEB0 0A45             (                    ROMbasic.ASM):05365 L9249     DEC  V45            DECREMENT DECIMAL POINT COUNTER 
FEB2 2609             (                    ROMbasic.ASM):05366           BNE  L9256          NOT TIME FOR DECIMAL POINT 
FEB4 DF39             (                    ROMbasic.ASM):05367 L924D     STU  VARPTR         SAVE BUFFER POINTER-POSITION OF THE DECIMAL POINT 
FEB6 862E             (                    ROMbasic.ASM):05368           LDA  #'.'           * STORE A DECIMAL 
FEB8 A7C0             (                    ROMbasic.ASM):05369           STA  ,U+            * POINT IN THE OUTPUT BUFFER 
FEBA 0F97             (                    ROMbasic.ASM):05370           CLR  VD7            * CLEAR COMMA COUNTER - NOW IT WILL TAKE 255 
                      (                    ROMbasic.ASM):05371 ;                             * DECREMENTS BEFORE ANOTHER COMMA WILL BE INSERTED 
FEBC 39               (                    ROMbasic.ASM):05372           RTS                  
FEBD 0A97             (                    ROMbasic.ASM):05373 L9256     DEC  VD7            DECREMENT COMMA COUNTER 
FEBF 2608             (                    ROMbasic.ASM):05374           BNE  L9262          RETURN IF NOT TIME FOR COMMA 
FEC1 8603             (                    ROMbasic.ASM):05375           LDA  #$03           * RESET COMMA COUNTER TO 3; THREE 
FEC3 9797             (                    ROMbasic.ASM):05376           STA  VD7            * DIGITS BETWEEN COMMAS 
FEC5 862C             (                    ROMbasic.ASM):05377           LDA  #','           * PUT A COMMA INTO 
FEC7 A7C0             (                    ROMbasic.ASM):05378           STA  ,U+            * THE BUFFER 
FEC9 39               (                    ROMbasic.ASM):05379 L9262     RTS                  
                      (                    ROMbasic.ASM):05380                                
                      (                    ROMbasic.ASM):05381 ; INITIALIZE DECIMAL POINT AND COMMA COUNTERS                      
FECA 9647             (                    ROMbasic.ASM):05382 L9263     LDA  V47            GET THE BASE 10 EXPONENT OFFSET 
FECC 8B0A             (                    ROMbasic.ASM):05383           ADDA #10            * ADD 10 (FPA0 WAS ‘NORMALIZED’ TO 9 PLACES LEFT 
FECE 9745             (                    ROMbasic.ASM):05384           STA  V45            * OF DECIMAL POINT) - SAVE IN DECIMAL POINT COUNTER 
FED0 4C               (                    ROMbasic.ASM):05385           INCA                ADD ONE FOR THE DECIMAL POINT 
FED1 8003             (                    ROMbasic.ASM):05386 L926A     SUBA #$03           * DIVIDE DECIMAL POINT COUNTER BY 3; LEAVE 
FED3 24FC             (                    ROMbasic.ASM):05387           BCC  L926A          * THE REMAINDER IN ACCA 
FED5 8B05             (                    ROMbasic.ASM):05388           ADDA #$05           CONVERT REMAINDER INTO A NUMBER FROM 1-3 
FED7 9797             (                    ROMbasic.ASM):05389           STA  VD7            SAVE COMMA COUNTER 
FED9 969A             (                    ROMbasic.ASM):05390           LDA  VDA            GET STATUS BYTE 
FEDB 8440             (                    ROMbasic.ASM):05391           ANDA #$40           CHECK FOR COMMA FLAG 
FEDD 2602             (                    ROMbasic.ASM):05392           BNE  L927A          BRANCH IF COMMA FLAG ACTIVE 
FEDF 9797             (                    ROMbasic.ASM):05393           STA  VD7            CLEAR COMMA COUNTER - 255 DIGITS OUTPUT BEFORE A COMMA 
FEE1 39               (                    ROMbasic.ASM):05394 L927A     RTS                  
                      (                    ROMbasic.ASM):05395 ;                              
                      (                    ROMbasic.ASM):05396 ; INSERT ACCA ZEROES INTO THE BUFFER                      
FEE2 3402             (                    ROMbasic.ASM):05397 L927B     PSHS A              SAVE ZEROES COUNTER 
FEE4 8DCA             (                    ROMbasic.ASM):05398           BSR  L9249          CHECK FOR DECIMAL POINT 
FEE6 3502             (                    ROMbasic.ASM):05399           PULS A              RESTORE ZEROES COUNTER 
FEE8 4A               (                    ROMbasic.ASM):05400 L9281     DECA                * DECREMENT ZEROES COUNTER AND 
FEE9 2B0A             (                    ROMbasic.ASM):05401           BMI  L928E          * RETURN IF < 0 
FEEB 3402             (                    ROMbasic.ASM):05402           PSHS A              SAVE ZEROES COUNTER 
FEED 8630             (                    ROMbasic.ASM):05403           LDA  #'0'           * PUT A ZERO INTO 
FEEF A7C0             (                    ROMbasic.ASM):05404           STA  ,U+            * THE BUFFER 
FEF1 A6E0             (                    ROMbasic.ASM):05405           LDA  ,S+            RESTORE THE ZEROES COUNTER 
FEF3 26ED             (                    ROMbasic.ASM):05406           BNE  L927B          BRANCH IF NOT DONE 
FEF5 39               (                    ROMbasic.ASM):05407 L928E     RTS                  
                      (                    ROMbasic.ASM):05408                                
                      (                    ROMbasic.ASM):05409 ; LINE                         
FEF6 8189             (                    ROMbasic.ASM):05410 LINE      CMPA #TOK_INPUT     ‘INPUT’ TOKEN 
FEF8 1027F95C         (                    ROMbasic.ASM):05411           LBEQ L89C0          GO DO ‘LINE INPUT’ COMMAND 
FEFC 7EE528           (                    ROMbasic.ASM):05412           JMP  LB277          ‘SYNTAX ERROR’ IF NOT "LINE INPUT" 
                      (                    ROMbasic.ASM):05413                 
                      (                    ROMbasic.ASM):05414 ; Init SCC channel A for 115.2kbps using external clock, polled
                      (                    ROMbasic.ASM):05415 SCCA_INIT:
FEFF B6C012           (                    ROMbasic.ASM):05416           LDA  ZSCCAC         ; reset the register pointer
FF02 8EFF14           (                    ROMbasic.ASM):05417           LDX  #SCCA_TBL      ; init table pointer
FF05 A680             (                    ROMbasic.ASM):05418 T0?       LDA  ,X+            ; load address from table
FF07 2A01             (                    ROMbasic.ASM):05419           BPL  T1?            ; if positive, save register data
FF09 39               (                    ROMbasic.ASM):05420           RTS
FF0A B7C012           (                    ROMbasic.ASM):05421 T1?       STA  ZSCCAC         ; write the register pointer to WR0
FF0D A680             (                    ROMbasic.ASM):05422           LDA  ,X+            ; get data byte from table
FF0F B7C012           (                    ROMbasic.ASM):05423           STA  ZSCCAC         ; write to SCC ch A command
FF12 20F1             (                    ROMbasic.ASM):05424           BRA  T0?
                      (                    ROMbasic.ASM):05425 
                      (                    ROMbasic.ASM):05426 ;Initialization table for SCC Channel A in ASYNC mode, external 16x clock
                      (                    ROMbasic.ASM):05427 ; thanks to John Monahan (S100Computers.com)!
FF14 0980             (                    ROMbasic.ASM):05428 SCCA_TBL: FCB  $09,$80        ; Point to WR9; Reset Ch A
FF16 0900             (                    ROMbasic.ASM):05429           FCB  $09,$00        ; Point to WR9; un-reset CH A
FF18 0444             (                    ROMbasic.ASM):05430           FCB  $04,$44        ; Point to WR4; X16 clock,1 Stop,NP
FF1A 03C1             (                    ROMbasic.ASM):05431           FCB  $03,$C1        ; Point to WR3; Enable receiver, No Auto Enable (Hardware CTS), Receive 8 bits
FF1C 05EA             (                    ROMbasic.ASM):05432           FCB  $05,$EA        ; Point to WR5; Enable, Transmit 8 bits RTS,DTR, Enable
FF1E 0B05             (                    ROMbasic.ASM):05433           FCB  $0B,$05        ; Point to WR11; RX clock = TX clock = RTXC pin; TRXC pin = xmit clock
FF20 0F00             (                    ROMbasic.ASM):05434           FCB  $0F,$00        ; Point to WR15; no INT from hardware CTS/RTS
FF22 FFFF             (                    ROMbasic.ASM):05435           FCB  $FF,$FF        ; EOT marker
                      (                    ROMbasic.ASM):05436 
                      (                    ROMbasic.ASM):05437 ; Information about build
FF24 00               (                    ROMbasic.ASM):05438           FCB  0
FF25 4D4943524F534F46 (                    ROMbasic.ASM):05439           FCC  "MICROSOFT BASIC FOR HD6309 SBC. BUILT APRIL 22, 2014"
     5420424153494320
     464F522048443633
     3039205342432E20
     4255494C54204150
     52494C2032322C20
     32303134
FF59 00               (                    ROMbasic.ASM):05440           FCB  0
                      (                    ROMbasic.ASM):05441                              
                      (                    ROMbasic.ASM):05442 ; END OF EXTENDED BASIC                      
                      (                    ROMbasic.ASM):05443 ; INTERRUPT VECTORS                      
                      (                    ROMbasic.ASM):05444           ORG  $FFF0           
FFF0 DB4C             (                    ROMbasic.ASM):05445 LBFF0     FDB  RESVEC         ; Divide by zero / illegal opcode trap
FFF2 009B             (                    ROMbasic.ASM):05446 LBFF2     FDB  SW3VEC         ; SWI3 
FFF4 009E             (                    ROMbasic.ASM):05447 LBFF4     FDB  SW2VEC         ; SWI2 
FFF6 00AA             (                    ROMbasic.ASM):05448 LBFF6     FDB  FRQVEC         ; FIRQ 
FFF8 00A7             (                    ROMbasic.ASM):05449 LBFF8     FDB  IRQVEC         ; IRQ 
FFFA 00A1             (                    ROMbasic.ASM):05450 LBFFA     FDB  SWIVEC         ; SWI 
FFFC 00A4             (                    ROMbasic.ASM):05451 LBFFC     FDB  NMIVEC         ; NMI 
FFFE DB4C             (                    ROMbasic.ASM):05452 LBFFE     FDB  RESVEC         ; RESET 
